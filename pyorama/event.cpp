/* Generated by Cython 0.29.13 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [],
        "extra_compile_args": [
            "-w",
            "-std=c++11",
            "-O3",
            "-ffast-math",
            "-march=native",
            "-fno-var-tracking-assignments"
        ],
        "extra_link_args": [
            "-std=c++11"
        ],
        "include_dirs": [
            "/home/anish/.local/lib/python3.6/site-packages/numpy/core/include"
        ],
        "language": "c++",
        "libraries": [
            "GL",
            "GLU",
            "GLEW",
            "SDL2",
            "SDL2_image",
            "SDL2_mixer",
            "openal",
            "ogg",
            "vorbis",
            "vorbisfile",
            "vorbisenc",
            "opusfile",
            "FLAC",
            "chipmunk",
            "assimp"
        ],
        "name": "pyorama.event",
        "sources": [
            "./pyorama/event.pyx"
        ]
    },
    "module_name": "pyorama.event"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_13"
#define CYTHON_HEX_VERSION 0x001D0DF0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__pyorama__event
#define __PYX_HAVE_API__pyorama__event
/* Early includes */
#include <string.h>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include "GL/glew.h"
#include "SDL2/SDL.h"
#include "SDL2/SDL_image.h"
#include "SDL2/SDL_mixer.h"
#include <math.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "pyorama/event.pyx",
  "stringsource",
  "type.pxd",
  "pyorama/core/item_hash_map.pxd",
  "pyorama/core/item_vector.pxd",
  "pyorama/core/item_slot_map.pxd",
  "pyorama/math3d/mat4.pxd",
  "pyorama/math3d/mat3.pxd",
  "pyorama/math3d/quat.pxd",
  "pyorama/math3d/vec3.pxd",
  "pyorama/math3d/mat2.pxd",
  "pyorama/math3d/vec2.pxd",
  "pyorama/math3d/vec4.pxd",
  "pyorama/graphics.pxd",
};

/* "pyorama/core/handle.pxd":3
 * from pyorama.libs.c cimport *
 * 
 * ctypedef uint64_t Handle             # <<<<<<<<<<<<<<
 * 
 * cdef uint32_t c_handle_get_index(Handle *handle) nogil
 */
typedef uint64_t __pyx_t_7pyorama_4core_6handle_Handle;

/* "pyorama/core/item_slot_map.pxd":6
 * from pyorama.libs.c cimport *
 * 
 * ctypedef uint8_t ItemType             # <<<<<<<<<<<<<<
 * 
 * @cython.final
 */
typedef uint8_t __pyx_t_7pyorama_4core_13item_slot_map_ItemType;

/* "pyorama/event.pxd":15
 *     PyObject *user_data
 * 
 * ctypedef uint32_t EventType             # <<<<<<<<<<<<<<
 * cpdef enum EventTypes:
 *     EVENT_TYPE_NONE = 0
 */
typedef uint32_t __pyx_t_7pyorama_5event_EventType;

/*--- Type declarations ---*/
struct __pyx_obj_7pyorama_4core_13item_hash_map_ItemHashMap;
struct __pyx_obj_7pyorama_4core_11item_vector_ItemVector;
struct __pyx_obj_7pyorama_4core_13item_slot_map_ItemSlotMap;
struct __pyx_obj_7pyorama_6math3d_4mat4_Mat4;
struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3;
struct __pyx_obj_7pyorama_6math3d_4quat_Quat;
struct __pyx_obj_7pyorama_6math3d_4vec3_Vec3;
struct __pyx_obj_7pyorama_6math3d_4mat2_Mat2;
struct __pyx_obj_7pyorama_6math3d_4vec2_Vec2;
struct __pyx_obj_7pyorama_6math3d_4vec4_Vec4;
struct __pyx_obj_7pyorama_8graphics_GraphicsManager;
struct __pyx_obj_7pyorama_5event_EventManager;
struct __pyx_obj___Pyx_EnumMeta;

/* "pyorama/math3d/common.pxd":6
 * cimport libc.math as c_math
 * 
 * ctypedef float[2] Vec2C             # <<<<<<<<<<<<<<
 * ctypedef float[3] Vec3C
 * ctypedef float[4] Vec4C
 */
typedef float __pyx_t_7pyorama_6math3d_6common_Vec2C[2];

/* "pyorama/math3d/common.pxd":7
 * 
 * ctypedef float[2] Vec2C
 * ctypedef float[3] Vec3C             # <<<<<<<<<<<<<<
 * ctypedef float[4] Vec4C
 * ctypedef float[4] QuatC
 */
typedef float __pyx_t_7pyorama_6math3d_6common_Vec3C[3];

/* "pyorama/math3d/common.pxd":8
 * ctypedef float[2] Vec2C
 * ctypedef float[3] Vec3C
 * ctypedef float[4] Vec4C             # <<<<<<<<<<<<<<
 * ctypedef float[4] QuatC
 * ctypedef float[4] Mat2C
 */
typedef float __pyx_t_7pyorama_6math3d_6common_Vec4C[4];

/* "pyorama/math3d/common.pxd":9
 * ctypedef float[3] Vec3C
 * ctypedef float[4] Vec4C
 * ctypedef float[4] QuatC             # <<<<<<<<<<<<<<
 * ctypedef float[4] Mat2C
 * ctypedef float[9] Mat3C
 */
typedef float __pyx_t_7pyorama_6math3d_6common_QuatC[4];

/* "pyorama/math3d/common.pxd":10
 * ctypedef float[4] Vec4C
 * ctypedef float[4] QuatC
 * ctypedef float[4] Mat2C             # <<<<<<<<<<<<<<
 * ctypedef float[9] Mat3C
 * ctypedef float[16] Mat4C
 */
typedef float __pyx_t_7pyorama_6math3d_6common_Mat2C[4];

/* "pyorama/math3d/common.pxd":11
 * ctypedef float[4] QuatC
 * ctypedef float[4] Mat2C
 * ctypedef float[9] Mat3C             # <<<<<<<<<<<<<<
 * ctypedef float[16] Mat4C
 * 
 */
typedef float __pyx_t_7pyorama_6math3d_6common_Mat3C[9];

/* "pyorama/math3d/common.pxd":12
 * ctypedef float[4] Mat2C
 * ctypedef float[9] Mat3C
 * ctypedef float[16] Mat4C             # <<<<<<<<<<<<<<
 * 
 * cdef float epsilon = 0.000001
 */
typedef float __pyx_t_7pyorama_6math3d_6common_Mat4C[16];
struct __pyx_opt_args_7pyorama_6math3d_4mat4_4Mat4_c_nearly_equals;
struct __pyx_opt_args_7pyorama_6math3d_4mat4_4Mat4_c_scale_add;
struct __pyx_opt_args_7pyorama_6math3d_4mat4_4Mat4_c_set_data;

/* "pyorama/math3d/mat4.pxd":44
 *     cdef inline void c_mul(Mat4C *out, Mat4C *a, Mat4C *b) nogil
 *     @staticmethod
 *     cdef inline bint c_nearly_equals(Mat4C *a, Mat4C *b, float epsilon=epsilon) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void c_ortho(Mat4C *out, float left, float right, float bottom, float top, float near, float far) nogil
 */
struct __pyx_opt_args_7pyorama_6math3d_4mat4_4Mat4_c_nearly_equals {
  int __pyx_n;
  float epsilon;
};

/* "pyorama/math3d/mat4.pxd":62
 *     cdef inline void c_scale(Mat4C *out, Mat4C *a, Vec3C *factor) nogil
 *     @staticmethod
 *     cdef inline void c_scale_add(Mat4C *out, Mat4C *a, float scale=1.0, float add=0.0) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void c_set_data(Mat4C *out, float m00=0.0, float m01=0.0, float m02=0.0, float m03=0.0,
 */
struct __pyx_opt_args_7pyorama_6math3d_4mat4_4Mat4_c_scale_add {
  int __pyx_n;
  float scale;
  float add;
};

/* "pyorama/math3d/mat4.pxd":64
 *     cdef inline void c_scale_add(Mat4C *out, Mat4C *a, float scale=1.0, float add=0.0) nogil
 *     @staticmethod
 *     cdef inline void c_set_data(Mat4C *out, float m00=0.0, float m01=0.0, float m02=0.0, float m03=0.0,             # <<<<<<<<<<<<<<
 *             float m10=0.0, float m11=0.0, float m12=0.0, float m13=0.0,
 *             float m20=0.0, float m21=0.0, float m22=0.0, float m23=0.0,
 */
struct __pyx_opt_args_7pyorama_6math3d_4mat4_4Mat4_c_set_data {
  int __pyx_n;
  float m00;
  float m01;
  float m02;
  float m03;
  float m10;
  float m11;
  float m12;
  float m13;
  float m20;
  float m21;
  float m22;
  float m23;
  float m30;
  float m31;
  float m32;
  float m33;
};
struct __pyx_opt_args_7pyorama_6math3d_4mat3_4Mat3_c_nearly_equals;
struct __pyx_opt_args_7pyorama_6math3d_4mat3_4Mat3_c_scale_add;
struct __pyx_opt_args_7pyorama_6math3d_4mat3_4Mat3_c_set_data;

/* "pyorama/math3d/mat3.pxd":43
 *     cdef inline void c_mul(Mat3C *out, Mat3C *a, Mat3C *b) nogil
 *     @staticmethod
 *     cdef inline bint c_nearly_equals(Mat3C *a, Mat3C *b, float epsilon=epsilon) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void c_normal_from_mat4(Mat3C *out, Mat4C *a) nogil
 */
struct __pyx_opt_args_7pyorama_6math3d_4mat3_4Mat3_c_nearly_equals {
  int __pyx_n;
  float epsilon;
};

/* "pyorama/math3d/mat3.pxd":53
 *     cdef inline void c_scale(Mat3C *out, Mat3C *a, Vec2C *factor) nogil
 *     @staticmethod
 *     cdef inline void c_scale_add(Mat3C *out, Mat3C *a, float scale=1.0, float add=0.0) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void c_set_data(Mat3C *out, float m00=0.0, float m01=0.0, float m02=0.0,
 */
struct __pyx_opt_args_7pyorama_6math3d_4mat3_4Mat3_c_scale_add {
  int __pyx_n;
  float scale;
  float add;
};

/* "pyorama/math3d/mat3.pxd":55
 *     cdef inline void c_scale_add(Mat3C *out, Mat3C *a, float scale=1.0, float add=0.0) nogil
 *     @staticmethod
 *     cdef inline void c_set_data(Mat3C *out, float m00=0.0, float m01=0.0, float m02=0.0,             # <<<<<<<<<<<<<<
 *             float m10=0.0, float m11=0.0, float m12=0.0,
 *             float m20=0.0, float m21=0.0, float m22=0.0) nogil
 */
struct __pyx_opt_args_7pyorama_6math3d_4mat3_4Mat3_c_set_data {
  int __pyx_n;
  float m00;
  float m01;
  float m02;
  float m10;
  float m11;
  float m12;
  float m20;
  float m21;
  float m22;
};
struct __pyx_opt_args_7pyorama_6math3d_4quat_4Quat_c_nearly_equals;
struct __pyx_opt_args_7pyorama_6math3d_4quat_4Quat_c_scale_add;
struct __pyx_opt_args_7pyorama_6math3d_4quat_4Quat_c_set_data;

/* "pyorama/math3d/quat.pxd":36
 *     cdef inline void c_mul(QuatC *out, QuatC *a, QuatC *b) nogil
 *     @staticmethod
 *     cdef inline bint c_nearly_equals(QuatC *a, QuatC *b, float epsilon=0.000001) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void c_norm(QuatC *out, QuatC *a) nogil
 */
struct __pyx_opt_args_7pyorama_6math3d_4quat_4Quat_c_nearly_equals {
  int __pyx_n;
  float epsilon;
};

/* "pyorama/math3d/quat.pxd":48
 *     cdef inline void c_rotation_to(QuatC *out, Vec3C *a, Vec3C *b) nogil
 *     @staticmethod
 *     cdef inline void c_scale_add(QuatC *out, QuatC *a, float scale=1.0, float add=0.0) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void c_set_axes(QuatC *out, Vec3C *view, Vec3C *right, Vec3C *up) nogil
 */
struct __pyx_opt_args_7pyorama_6math3d_4quat_4Quat_c_scale_add {
  int __pyx_n;
  float scale;
  float add;
};

/* "pyorama/math3d/quat.pxd":54
 *     cdef inline void c_set_axis_angle(QuatC *out, Vec3C *axis, float radians) nogil
 *     @staticmethod
 *     cdef inline void c_set_data(QuatC *out, float x=0.0, float y=0.0, float z=0.0, float w=0.0) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void c_slerp(QuatC *out, QuatC *a, QuatC *b, float t) nogil
 */
struct __pyx_opt_args_7pyorama_6math3d_4quat_4Quat_c_set_data {
  int __pyx_n;
  float x;
  float y;
  float z;
  float w;
};
struct __pyx_opt_args_7pyorama_6math3d_4vec3_4Vec3_c_nearly_equals;
struct __pyx_opt_args_7pyorama_6math3d_4vec3_4Vec3_c_scale_add;
struct __pyx_opt_args_7pyorama_6math3d_4vec3_4Vec3_c_set_data;

/* "pyorama/math3d/vec3.pxd":42
 *     cdef inline void c_mul(Vec3C *out, Vec3C *a, Vec3C *b) nogil
 *     @staticmethod
 *     cdef inline bint c_nearly_equals(Vec3C *a, Vec3C *b, float epsilon=epsilon) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void c_negate(Vec3C *out, Vec3C *a) nogil
 */
struct __pyx_opt_args_7pyorama_6math3d_4vec3_4Vec3_c_nearly_equals {
  int __pyx_n;
  float epsilon;
};

/* "pyorama/math3d/vec3.pxd":52
 *     cdef inline void c_round(Vec3C *out, Vec3C *a) nogil
 *     @staticmethod
 *     cdef inline void c_scale_add(Vec3C *out, Vec3C *a, float scale=1.0, float add=0.0) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void c_set_data(Vec3C *out, float x=0.0, float y=0.0, float z=0.0) nogil
 */
struct __pyx_opt_args_7pyorama_6math3d_4vec3_4Vec3_c_scale_add {
  int __pyx_n;
  float scale;
  float add;
};

/* "pyorama/math3d/vec3.pxd":54
 *     cdef inline void c_scale_add(Vec3C *out, Vec3C *a, float scale=1.0, float add=0.0) nogil
 *     @staticmethod
 *     cdef inline void c_set_data(Vec3C *out, float x=0.0, float y=0.0, float z=0.0) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline float c_sqr_dist(Vec3C *a, Vec3C *b) nogil
 */
struct __pyx_opt_args_7pyorama_6math3d_4vec3_4Vec3_c_set_data {
  int __pyx_n;
  float x;
  float y;
  float z;
};
struct __pyx_opt_args_7pyorama_6math3d_4mat2_4Mat2_c_nearly_equals;
struct __pyx_opt_args_7pyorama_6math3d_4mat2_4Mat2_c_scale_add;
struct __pyx_opt_args_7pyorama_6math3d_4mat2_4Mat2_c_set_data;

/* "pyorama/math3d/mat2.pxd":31
 *     cdef inline void c_mul(Mat2C *out, Mat2C *a, Mat2C *b) nogil
 *     @staticmethod
 *     cdef inline bint c_nearly_equals(Mat2C *a, Mat2C *b, float epsilon=epsilon) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void c_random(Mat2C *out) nogil
 */
struct __pyx_opt_args_7pyorama_6math3d_4mat2_4Mat2_c_nearly_equals {
  int __pyx_n;
  float epsilon;
};

/* "pyorama/math3d/mat2.pxd":39
 *     cdef inline void c_scale(Mat2C *out, Mat2C *a, Vec3C *factor) nogil
 *     @staticmethod
 *     cdef inline void c_scale_add(Mat2C *out, Mat2C *a, float scale=1.0, float add=0.0) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void c_set_data(Mat2C *out, float m00=0.0, float m01=0.0, float m10=0.0, float m11=0.0) nogil
 */
struct __pyx_opt_args_7pyorama_6math3d_4mat2_4Mat2_c_scale_add {
  int __pyx_n;
  float scale;
  float add;
};

/* "pyorama/math3d/mat2.pxd":41
 *     cdef inline void c_scale_add(Mat2C *out, Mat2C *a, float scale=1.0, float add=0.0) nogil
 *     @staticmethod
 *     cdef inline void c_set_data(Mat2C *out, float m00=0.0, float m01=0.0, float m10=0.0, float m11=0.0) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void c_sub(Mat2C *out, Mat2C *a, Mat2C *b) nogil
 */
struct __pyx_opt_args_7pyorama_6math3d_4mat2_4Mat2_c_set_data {
  int __pyx_n;
  float m00;
  float m01;
  float m10;
  float m11;
};
struct __pyx_opt_args_7pyorama_6math3d_4vec2_4Vec2_c_nearly_equals;
struct __pyx_opt_args_7pyorama_6math3d_4vec2_4Vec2_c_scale_add;
struct __pyx_opt_args_7pyorama_6math3d_4vec2_4Vec2_c_set_data;

/* "pyorama/math3d/vec2.pxd":41
 *     cdef inline void c_mul(Vec2C *out, Vec2C *a, Vec2C *b) nogil
 *     @staticmethod
 *     cdef inline bint c_nearly_equals(Vec2C *a, Vec2C *b, float epsilon=epsilon) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void c_negate(Vec2C *out, Vec2C *a) nogil
 */
struct __pyx_opt_args_7pyorama_6math3d_4vec2_4Vec2_c_nearly_equals {
  int __pyx_n;
  float epsilon;
};

/* "pyorama/math3d/vec2.pxd":51
 *     cdef inline void c_round(Vec2C *out, Vec2C *a) nogil
 *     @staticmethod
 *     cdef inline void c_scale_add(Vec2C *out, Vec2C *a, float scale=1.0, float add=0.0) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void c_set_data(Vec2C *out, float x=0.0, float y=0.0) nogil
 */
struct __pyx_opt_args_7pyorama_6math3d_4vec2_4Vec2_c_scale_add {
  int __pyx_n;
  float scale;
  float add;
};

/* "pyorama/math3d/vec2.pxd":53
 *     cdef inline void c_scale_add(Vec2C *out, Vec2C *a, float scale=1.0, float add=0.0) nogil
 *     @staticmethod
 *     cdef inline void c_set_data(Vec2C *out, float x=0.0, float y=0.0) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline float c_sqr_dist(Vec2C *a, Vec2C *b) nogil
 */
struct __pyx_opt_args_7pyorama_6math3d_4vec2_4Vec2_c_set_data {
  int __pyx_n;
  float x;
  float y;
};
struct __pyx_opt_args_7pyorama_6math3d_4vec4_4Vec4_c_nearly_equals;
struct __pyx_opt_args_7pyorama_6math3d_4vec4_4Vec4_c_scale_add;
struct __pyx_opt_args_7pyorama_6math3d_4vec4_4Vec4_c_set_data;

/* "pyorama/math3d/vec4.pxd":37
 *     cdef inline void c_mul(Vec4C *out, Vec4C *a, Vec4C *b) nogil
 *     @staticmethod
 *     cdef inline bint c_nearly_equals(Vec4C *a, Vec4C *b, float epsilon=0.000001) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void c_negate(Vec4C *out, Vec4C *a) nogil
 */
struct __pyx_opt_args_7pyorama_6math3d_4vec4_4Vec4_c_nearly_equals {
  int __pyx_n;
  float epsilon;
};

/* "pyorama/math3d/vec4.pxd":47
 *     cdef inline void c_round(Vec4C *out, Vec4C *a) nogil
 *     @staticmethod
 *     cdef inline void c_scale_add(Vec4C *out, Vec4C *a, float scale=1.0, float add=0.0) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void c_set_data(Vec4C *out, float x=0.0, float y=0.0, float z=0.0, float w=0.0) nogil
 */
struct __pyx_opt_args_7pyorama_6math3d_4vec4_4Vec4_c_scale_add {
  int __pyx_n;
  float scale;
  float add;
};

/* "pyorama/math3d/vec4.pxd":49
 *     cdef inline void c_scale_add(Vec4C *out, Vec4C *a, float scale=1.0, float add=0.0) nogil
 *     @staticmethod
 *     cdef inline void c_set_data(Vec4C *out, float x=0.0, float y=0.0, float z=0.0, float w=0.0) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline float c_sqr_dist(Vec4C *a, Vec4C *b) nogil
 */
struct __pyx_opt_args_7pyorama_6math3d_4vec4_4Vec4_c_set_data {
  int __pyx_n;
  float x;
  float y;
  float z;
  float w;
};
struct __pyx_t_7pyorama_8graphics_WindowC;
typedef struct __pyx_t_7pyorama_8graphics_WindowC __pyx_t_7pyorama_8graphics_WindowC;
struct __pyx_t_7pyorama_8graphics_Camera3dC;
typedef struct __pyx_t_7pyorama_8graphics_Camera3dC __pyx_t_7pyorama_8graphics_Camera3dC;
struct __pyx_t_7pyorama_8graphics_ImageC;
typedef struct __pyx_t_7pyorama_8graphics_ImageC __pyx_t_7pyorama_8graphics_ImageC;
struct __pyx_t_7pyorama_8graphics_SamplerC;
typedef struct __pyx_t_7pyorama_8graphics_SamplerC __pyx_t_7pyorama_8graphics_SamplerC;
struct __pyx_t_7pyorama_8graphics_TextureC;
typedef struct __pyx_t_7pyorama_8graphics_TextureC __pyx_t_7pyorama_8graphics_TextureC;
struct __pyx_t_7pyorama_8graphics_AttributeC;
typedef struct __pyx_t_7pyorama_8graphics_AttributeC __pyx_t_7pyorama_8graphics_AttributeC;
struct __pyx_t_7pyorama_8graphics_UniformC;
typedef struct __pyx_t_7pyorama_8graphics_UniformC __pyx_t_7pyorama_8graphics_UniformC;
struct __pyx_t_7pyorama_8graphics_MeshC;
typedef struct __pyx_t_7pyorama_8graphics_MeshC __pyx_t_7pyorama_8graphics_MeshC;
struct __pyx_t_7pyorama_8graphics_ModelC;
typedef struct __pyx_t_7pyorama_8graphics_ModelC __pyx_t_7pyorama_8graphics_ModelC;
struct __pyx_t_7pyorama_8graphics_ModelBatchC;
typedef struct __pyx_t_7pyorama_8graphics_ModelBatchC __pyx_t_7pyorama_8graphics_ModelBatchC;
struct __pyx_t_7pyorama_8graphics_ShaderC;
typedef struct __pyx_t_7pyorama_8graphics_ShaderC __pyx_t_7pyorama_8graphics_ShaderC;
struct __pyx_t_7pyorama_8graphics_ProgramC;
typedef struct __pyx_t_7pyorama_8graphics_ProgramC __pyx_t_7pyorama_8graphics_ProgramC;

/* "pyorama/graphics.pxd":61
 *     uint8_t *pixels
 * 
 * cpdef enum SamplerFilter:             # <<<<<<<<<<<<<<
 *     SAMPLER_FILTER_NEAREST = 9728
 *     SAMPLER_FILTER_LINEAR = 9729
 */
enum __pyx_t_7pyorama_8graphics_SamplerFilter {
  __pyx_e_7pyorama_8graphics_SAMPLER_FILTER_NEAREST = 0x2600,
  __pyx_e_7pyorama_8graphics_SAMPLER_FILTER_LINEAR = 0x2601,
  __pyx_e_7pyorama_8graphics_SAMPLER_FILTER_NEAREST_MIPMAP_NEAREST = 0x2700,
  __pyx_e_7pyorama_8graphics_SAMPLER_FILTER_LINEAR_MIPMAP_NEAREST = 0x2701,
  __pyx_e_7pyorama_8graphics_SAMPLER_FILTER_NEAREST_MIPMAP_LINEAR = 0x2702,
  __pyx_e_7pyorama_8graphics_SAMPLER_FILTER_LINEAR_MIPMAP_LINEAR = 0x2703
};

/* "pyorama/graphics.pxd":69
 *     SAMPLER_FILTER_LINEAR_MIPMAP_LINEAR = 9987
 * 
 * cpdef enum SamplerWrap:             # <<<<<<<<<<<<<<
 *     SAMPLER_WRAP_CLAMP_TO_EDGE = 33071
 *     SAMPLER_WRAP_MIRRORED_REPEAT = 33648
 */
enum __pyx_t_7pyorama_8graphics_SamplerWrap {
  __pyx_e_7pyorama_8graphics_SAMPLER_WRAP_CLAMP_TO_EDGE = 0x812F,
  __pyx_e_7pyorama_8graphics_SAMPLER_WRAP_MIRRORED_REPEAT = 0x8370,
  __pyx_e_7pyorama_8graphics_SAMPLER_WRAP_REPEAT = 0x2901
};

/* "pyorama/graphics.pxd":85
 *     Handle image
 * 
 * cpdef enum MathType:             # <<<<<<<<<<<<<<
 *     MATH_TYPE_FLOAT = GL_FLOAT
 *     MATH_TYPE_VEC2 = GL_FLOAT_VEC2
 */
enum __pyx_t_7pyorama_8graphics_MathType {

  /* "pyorama/graphics.pxd":92
 *     MATH_TYPE_MAT2 = GL_FLOAT_MAT2
 *     MATH_TYPE_MAT3 = GL_FLOAT_MAT3
 *     MATH_TYPE_MAT4 = GL_FLOAT_MAT4             # <<<<<<<<<<<<<<
 * 
 * ctypedef struct AttributeC:
 */
  __pyx_e_7pyorama_8graphics_MATH_TYPE_FLOAT = GL_FLOAT,
  __pyx_e_7pyorama_8graphics_MATH_TYPE_VEC2 = GL_FLOAT_VEC2,
  __pyx_e_7pyorama_8graphics_MATH_TYPE_VEC3 = GL_FLOAT_VEC3,
  __pyx_e_7pyorama_8graphics_MATH_TYPE_VEC4 = GL_FLOAT_VEC4,
  __pyx_e_7pyorama_8graphics_MATH_TYPE_MAT2 = GL_FLOAT_MAT2,
  __pyx_e_7pyorama_8graphics_MATH_TYPE_MAT3 = GL_FLOAT_MAT3,
  __pyx_e_7pyorama_8graphics_MATH_TYPE_MAT4 = GL_FLOAT_MAT4
};

/* "pyorama/graphics.pxd":131
 *     size_t num_models
 * 
 * cpdef enum ShaderType:             # <<<<<<<<<<<<<<
 *     SHADER_TYPE_VERTEX
 *     SHADER_TYPE_FRAGMENT
 */
enum __pyx_t_7pyorama_8graphics_ShaderType {
  __pyx_e_7pyorama_8graphics_SHADER_TYPE_VERTEX,
  __pyx_e_7pyorama_8graphics_SHADER_TYPE_FRAGMENT
};

/* "pyorama/graphics.pxd":18
 * from pyorama.math3d.mat4 cimport *
 * 
 * ctypedef struct WindowC:             # <<<<<<<<<<<<<<
 *     uint32_t id
 *     int width
 */
struct __pyx_t_7pyorama_8graphics_WindowC {
  uint32_t id;
  int width;
  int height;
  char *title;
  size_t title_len;
};

/* "pyorama/graphics.pxd":32
 * """
 * 
 * ctypedef struct Camera3dC:             # <<<<<<<<<<<<<<
 *     float fovy
 *     float aspect
 */
struct __pyx_t_7pyorama_8graphics_Camera3dC {
  float fovy;
  float aspect;
  float near;
  float far;
  __pyx_t_7pyorama_6math3d_6common_Vec3C forward;
  __pyx_t_7pyorama_6math3d_6common_Vec3C up;
  __pyx_t_7pyorama_6math3d_6common_Vec3C right;
  __pyx_t_7pyorama_6math3d_6common_Vec3C position;
  __pyx_t_7pyorama_6math3d_6common_Vec3C target;
};

/* "pyorama/graphics.pxd":56
 * """
 * 
 * ctypedef struct ImageC:             # <<<<<<<<<<<<<<
 *     int width
 *     int height
 */
struct __pyx_t_7pyorama_8graphics_ImageC {
  int width;
  int height;
  uint8_t *pixels;
};

/* "pyorama/graphics.pxd":74
 *     SAMPLER_WRAP_REPEAT = 10497
 * 
 * ctypedef struct SamplerC:             # <<<<<<<<<<<<<<
 *     SamplerFilter mag_filter
 *     SamplerFilter min_filter
 */
struct __pyx_t_7pyorama_8graphics_SamplerC {
  enum __pyx_t_7pyorama_8graphics_SamplerFilter mag_filter;
  enum __pyx_t_7pyorama_8graphics_SamplerFilter min_filter;
  enum __pyx_t_7pyorama_8graphics_SamplerWrap wrap_s;
  enum __pyx_t_7pyorama_8graphics_SamplerWrap wrap_t;
};

/* "pyorama/graphics.pxd":80
 *     SamplerWrap wrap_t
 * 
 * ctypedef struct TextureC:             # <<<<<<<<<<<<<<
 *     uint32_t id
 *     Handle sampler
 */
struct __pyx_t_7pyorama_8graphics_TextureC {
  uint32_t id;
  __pyx_t_7pyorama_4core_6handle_Handle sampler;
  __pyx_t_7pyorama_4core_6handle_Handle image;
};

/* "pyorama/graphics.pxd":94
 *     MATH_TYPE_MAT4 = GL_FLOAT_MAT4
 * 
 * ctypedef struct AttributeC:             # <<<<<<<<<<<<<<
 *     uint32_t index
 *     MathType type
 */
struct __pyx_t_7pyorama_8graphics_AttributeC {
  uint32_t index;
  enum __pyx_t_7pyorama_8graphics_MathType type;
  size_t size;
  size_t offset;
};

/* "pyorama/graphics.pxd":100
 *     size_t offset
 * 
 * ctypedef struct UniformC:             # <<<<<<<<<<<<<<
 *     uint32_t index
 *     MathType type
 */
struct __pyx_t_7pyorama_8graphics_UniformC {
  uint32_t index;
  enum __pyx_t_7pyorama_8graphics_MathType type;
  size_t size;
};

/* "pyorama/graphics.pxd":105
 *     size_t size
 * 
 * ctypedef struct MeshC:             # <<<<<<<<<<<<<<
 *     float *vertices_data
 *     size_t vertices_length
 */
struct __pyx_t_7pyorama_8graphics_MeshC {
  float *vertices_data;
  size_t vertices_length;
  uint32_t *indices_data;
  size_t indices_length;
};

/* "pyorama/graphics.pxd":111
 *     size_t indices_length
 * 
 * ctypedef struct ModelC:             # <<<<<<<<<<<<<<
 *     Handle mesh
 *     Vec3C translation
 */
struct __pyx_t_7pyorama_8graphics_ModelC {
  __pyx_t_7pyorama_4core_6handle_Handle mesh;
  __pyx_t_7pyorama_6math3d_6common_Vec3C translation;
  __pyx_t_7pyorama_6math3d_6common_QuatC rotation;
  __pyx_t_7pyorama_6math3d_6common_Vec3C scale;
};

/* "pyorama/graphics.pxd":117
 *     Vec3C scale
 * 
 * ctypedef struct ModelBatchC:             # <<<<<<<<<<<<<<
 *     uint32_t vao_id
 *     uint32_t vbo_id
 */
struct __pyx_t_7pyorama_8graphics_ModelBatchC {
  uint32_t vao_id;
  uint32_t vbo_id;
  uint32_t ibo_id;
  uint32_t tbo_id;
  uint32_t tbo_tex_id;
  float *vertices_data;
  size_t vertices_length;
  uint32_t *indices_data;
  size_t indices_length;
  float *transform_data;
  size_t transform_length;
  size_t num_models;
};

/* "pyorama/graphics.pxd":135
 *     SHADER_TYPE_FRAGMENT
 * 
 * ctypedef struct ShaderC:             # <<<<<<<<<<<<<<
 *     uint32_t id
 *     ShaderType type
 */
struct __pyx_t_7pyorama_8graphics_ShaderC {
  uint32_t id;
  enum __pyx_t_7pyorama_8graphics_ShaderType type;
  char *source;
  size_t source_length;
};

/* "pyorama/graphics.pxd":141
 *     size_t source_length
 * 
 * ctypedef struct ProgramC:             # <<<<<<<<<<<<<<
 *     uint32_t id
 *     Handle vs
 */
struct __pyx_t_7pyorama_8graphics_ProgramC {
  uint32_t id;
  __pyx_t_7pyorama_4core_6handle_Handle vs;
  __pyx_t_7pyorama_4core_6handle_Handle fs;
  size_t num_uniforms;
  PyObject *uniform_map;
  __pyx_t_7pyorama_8graphics_UniformC uniform_info[16];
};

/* "pyorama/core/item.pxd":3
 * from pyorama.graphics cimport *
 * 
 * cpdef enum ItemType:             # <<<<<<<<<<<<<<
 *     ITEM_TYPE_NONE
 *     ITEM_TYPE_WINDOW
 */
enum __pyx_t_7pyorama_4core_4item_ItemType {
  __pyx_e_7pyorama_4core_4item_ITEM_TYPE_NONE,
  __pyx_e_7pyorama_4core_4item_ITEM_TYPE_WINDOW,
  __pyx_e_7pyorama_4core_4item_ITEM_TYPE_CAMERA_3D,
  __pyx_e_7pyorama_4core_4item_ITEM_TYPE_CAMERA_2D,
  __pyx_e_7pyorama_4core_4item_ITEM_TYPE_IMAGE,
  __pyx_e_7pyorama_4core_4item_ITEM_TYPE_SAMPLER,
  __pyx_e_7pyorama_4core_4item_ITEM_TYPE_TEXTURE,
  __pyx_e_7pyorama_4core_4item_ITEM_TYPE_MESH,
  __pyx_e_7pyorama_4core_4item_ITEM_TYPE_MODEL,
  __pyx_e_7pyorama_4core_4item_ITEM_TYPE_MODEL_BATCH,
  __pyx_e_7pyorama_4core_4item_ITEM_TYPE_SHADER,
  __pyx_e_7pyorama_4core_4item_ITEM_TYPE_PROGRAM,
  __pyx_e_7pyorama_4core_4item_ITEM_TYPE_LISTENER
};

/* "pyorama/keyboard.pxd":3
 * from pyorama.libs.sdl2 cimport *
 * 
 * cpdef enum ScanCodes:             # <<<<<<<<<<<<<<
 *     SCAN_CODE_UNKNOWN = SDL_SCANCODE_UNKNOWN
 *     SCAN_CODE_A = SDL_SCANCODE_A
 */
enum __pyx_t_7pyorama_8keyboard_ScanCodes {

  /* "pyorama/keyboard.pxd":250
 *     SCAN_CODE_AUDIOREWIND = SDL_SCANCODE_AUDIOREWIND
 *     SCAN_CODE_AUDIOFASTFORWARD = SDL_SCANCODE_AUDIOFASTFORWARD
 *     SCAN_CODE_NUM_SCAN_CODES = SDL_NUM_SCANCODES             # <<<<<<<<<<<<<<
 * 
 * cpdef enum KeyCodes:
 */
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_UNKNOWN = SDL_SCANCODE_UNKNOWN,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_A = SDL_SCANCODE_A,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_B = SDL_SCANCODE_B,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_C = SDL_SCANCODE_C,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_D = SDL_SCANCODE_D,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_E = SDL_SCANCODE_E,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_F = SDL_SCANCODE_F,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_G = SDL_SCANCODE_G,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_H = SDL_SCANCODE_H,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_I = SDL_SCANCODE_I,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_J = SDL_SCANCODE_J,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_K = SDL_SCANCODE_K,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_L = SDL_SCANCODE_L,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_M = SDL_SCANCODE_M,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_N = SDL_SCANCODE_N,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_O = SDL_SCANCODE_O,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_P = SDL_SCANCODE_P,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_Q = SDL_SCANCODE_Q,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_R = SDL_SCANCODE_R,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_S = SDL_SCANCODE_S,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_T = SDL_SCANCODE_T,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_U = SDL_SCANCODE_U,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_V = SDL_SCANCODE_V,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_W = SDL_SCANCODE_W,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_X = SDL_SCANCODE_X,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_Y = SDL_SCANCODE_Y,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_Z = SDL_SCANCODE_Z,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_1 = SDL_SCANCODE_1,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_2 = SDL_SCANCODE_2,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_3 = SDL_SCANCODE_3,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_4 = SDL_SCANCODE_4,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_5 = SDL_SCANCODE_5,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_6 = SDL_SCANCODE_6,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_7 = SDL_SCANCODE_7,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_8 = SDL_SCANCODE_8,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_9 = SDL_SCANCODE_9,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_0 = SDL_SCANCODE_0,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_RETURN = SDL_SCANCODE_RETURN,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_ESCAPE = SDL_SCANCODE_ESCAPE,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_BACKSPACE = SDL_SCANCODE_BACKSPACE,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_TAB = SDL_SCANCODE_TAB,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_SPACE = SDL_SCANCODE_SPACE,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_MINUS = SDL_SCANCODE_MINUS,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_EQUALS = SDL_SCANCODE_EQUALS,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_LEFTBRACKET = SDL_SCANCODE_LEFTBRACKET,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_RIGHTBRACKET = SDL_SCANCODE_RIGHTBRACKET,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_BACKSLASH = SDL_SCANCODE_BACKSLASH,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_NONUSHASH = SDL_SCANCODE_NONUSHASH,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_SEMICOLON = SDL_SCANCODE_SEMICOLON,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_APOSTROPHE = SDL_SCANCODE_APOSTROPHE,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_GRAVE = SDL_SCANCODE_GRAVE,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_COMMA = SDL_SCANCODE_COMMA,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_PERIOD = SDL_SCANCODE_PERIOD,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_SLASH = SDL_SCANCODE_SLASH,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_CAPSLOCK = SDL_SCANCODE_CAPSLOCK,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_F1 = SDL_SCANCODE_F1,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_F2 = SDL_SCANCODE_F2,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_F3 = SDL_SCANCODE_F3,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_F4 = SDL_SCANCODE_F4,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_F5 = SDL_SCANCODE_F5,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_F6 = SDL_SCANCODE_F6,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_F7 = SDL_SCANCODE_F7,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_F8 = SDL_SCANCODE_F8,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_F9 = SDL_SCANCODE_F9,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_F10 = SDL_SCANCODE_F10,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_F11 = SDL_SCANCODE_F11,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_F12 = SDL_SCANCODE_F12,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_PRINTSCREEN = SDL_SCANCODE_PRINTSCREEN,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_SCROLLLOCK = SDL_SCANCODE_SCROLLLOCK,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_PAUSE = SDL_SCANCODE_PAUSE,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_INSERT = SDL_SCANCODE_INSERT,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_HOME = SDL_SCANCODE_HOME,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_PAGEUP = SDL_SCANCODE_PAGEUP,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_DELETE = SDL_SCANCODE_DELETE,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_END = SDL_SCANCODE_END,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_PAGEDOWN = SDL_SCANCODE_PAGEDOWN,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_RIGHT = SDL_SCANCODE_RIGHT,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_LEFT = SDL_SCANCODE_LEFT,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_DOWN = SDL_SCANCODE_DOWN,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_UP = SDL_SCANCODE_UP,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_NUMLOCKCLEAR = SDL_SCANCODE_NUMLOCKCLEAR,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_DIVIDE = SDL_SCANCODE_KP_DIVIDE,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_MULTIPLY = SDL_SCANCODE_KP_MULTIPLY,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_MINUS = SDL_SCANCODE_KP_MINUS,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_PLUS = SDL_SCANCODE_KP_PLUS,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_ENTER = SDL_SCANCODE_KP_ENTER,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_1 = SDL_SCANCODE_KP_1,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_2 = SDL_SCANCODE_KP_2,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_3 = SDL_SCANCODE_KP_3,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_4 = SDL_SCANCODE_KP_4,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_5 = SDL_SCANCODE_KP_5,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_6 = SDL_SCANCODE_KP_6,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_7 = SDL_SCANCODE_KP_7,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_8 = SDL_SCANCODE_KP_8,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_9 = SDL_SCANCODE_KP_9,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_0 = SDL_SCANCODE_KP_0,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_PERIOD = SDL_SCANCODE_KP_PERIOD,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_NONUSBACKSLASH = SDL_SCANCODE_NONUSBACKSLASH,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_APPLICATION = SDL_SCANCODE_APPLICATION,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_POWER = SDL_SCANCODE_POWER,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_EQUALS = SDL_SCANCODE_KP_EQUALS,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_F13 = SDL_SCANCODE_F13,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_F14 = SDL_SCANCODE_F14,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_F15 = SDL_SCANCODE_F15,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_F16 = SDL_SCANCODE_F16,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_F17 = SDL_SCANCODE_F17,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_F18 = SDL_SCANCODE_F18,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_F19 = SDL_SCANCODE_F19,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_F20 = SDL_SCANCODE_F20,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_F21 = SDL_SCANCODE_F21,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_F22 = SDL_SCANCODE_F22,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_F23 = SDL_SCANCODE_F23,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_F24 = SDL_SCANCODE_F24,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_EXECUTE = SDL_SCANCODE_EXECUTE,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_HELP = SDL_SCANCODE_HELP,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_MENU = SDL_SCANCODE_MENU,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_SELECT = SDL_SCANCODE_SELECT,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_STOP = SDL_SCANCODE_STOP,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_AGAIN = SDL_SCANCODE_AGAIN,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_UNDO = SDL_SCANCODE_UNDO,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_CUT = SDL_SCANCODE_CUT,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_COPY = SDL_SCANCODE_COPY,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_PASTE = SDL_SCANCODE_PASTE,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_FIND = SDL_SCANCODE_FIND,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_MUTE = SDL_SCANCODE_MUTE,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_VOLUMEUP = SDL_SCANCODE_VOLUMEUP,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_VOLUMEDOWN = SDL_SCANCODE_VOLUMEDOWN,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_COMMA = SDL_SCANCODE_KP_COMMA,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_EQUALSAS400 = SDL_SCANCODE_KP_EQUALSAS400,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_INTERNATIONAL1 = SDL_SCANCODE_INTERNATIONAL1,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_INTERNATIONAL2 = SDL_SCANCODE_INTERNATIONAL2,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_INTERNATIONAL3 = SDL_SCANCODE_INTERNATIONAL3,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_INTERNATIONAL4 = SDL_SCANCODE_INTERNATIONAL4,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_INTERNATIONAL5 = SDL_SCANCODE_INTERNATIONAL5,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_INTERNATIONAL6 = SDL_SCANCODE_INTERNATIONAL6,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_INTERNATIONAL7 = SDL_SCANCODE_INTERNATIONAL7,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_INTERNATIONAL8 = SDL_SCANCODE_INTERNATIONAL8,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_INTERNATIONAL9 = SDL_SCANCODE_INTERNATIONAL9,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_LANG1 = SDL_SCANCODE_LANG1,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_LANG2 = SDL_SCANCODE_LANG2,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_LANG3 = SDL_SCANCODE_LANG3,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_LANG4 = SDL_SCANCODE_LANG4,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_LANG5 = SDL_SCANCODE_LANG5,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_LANG6 = SDL_SCANCODE_LANG6,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_LANG7 = SDL_SCANCODE_LANG7,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_LANG8 = SDL_SCANCODE_LANG8,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_LANG9 = SDL_SCANCODE_LANG9,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_ALTERASE = SDL_SCANCODE_ALTERASE,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_SYSREQ = SDL_SCANCODE_SYSREQ,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_CANCEL = SDL_SCANCODE_CANCEL,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_CLEAR = SDL_SCANCODE_CLEAR,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_PRIOR = SDL_SCANCODE_PRIOR,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_RETURN2 = SDL_SCANCODE_RETURN2,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_SEPARATOR = SDL_SCANCODE_SEPARATOR,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_OUT = SDL_SCANCODE_OUT,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_OPER = SDL_SCANCODE_OPER,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_CLEARAGAIN = SDL_SCANCODE_CLEARAGAIN,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_CRSEL = SDL_SCANCODE_CRSEL,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_EXSEL = SDL_SCANCODE_EXSEL,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_00 = SDL_SCANCODE_KP_00,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_000 = SDL_SCANCODE_KP_000,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_THOUSANDSSEPARATOR = SDL_SCANCODE_THOUSANDSSEPARATOR,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_DECIMALSEPARATOR = SDL_SCANCODE_DECIMALSEPARATOR,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_CURRENCYUNIT = SDL_SCANCODE_CURRENCYUNIT,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_CURRENCYSUBUNIT = SDL_SCANCODE_CURRENCYSUBUNIT,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_LEFTPAREN = SDL_SCANCODE_KP_LEFTPAREN,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_RIGHTPAREN = SDL_SCANCODE_KP_RIGHTPAREN,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_LEFTBRACE = SDL_SCANCODE_KP_LEFTBRACE,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_RIGHTBRACE = SDL_SCANCODE_KP_RIGHTBRACE,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_TAB = SDL_SCANCODE_KP_TAB,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_BACKSPACE = SDL_SCANCODE_KP_BACKSPACE,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_A = SDL_SCANCODE_KP_A,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_B = SDL_SCANCODE_KP_B,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_C = SDL_SCANCODE_KP_C,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_D = SDL_SCANCODE_KP_D,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_E = SDL_SCANCODE_KP_E,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_F = SDL_SCANCODE_KP_F,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_XOR = SDL_SCANCODE_KP_XOR,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_POWER = SDL_SCANCODE_KP_POWER,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_PERCENT = SDL_SCANCODE_KP_PERCENT,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_LESS = SDL_SCANCODE_KP_LESS,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_GREATER = SDL_SCANCODE_KP_GREATER,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_AMPERSAND = SDL_SCANCODE_KP_AMPERSAND,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_DBLAMPERSAND = SDL_SCANCODE_KP_DBLAMPERSAND,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_VERTICALBAR = SDL_SCANCODE_KP_VERTICALBAR,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_DBLVERTICALBAR = SDL_SCANCODE_KP_DBLVERTICALBAR,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_COLON = SDL_SCANCODE_KP_COLON,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_HASH = SDL_SCANCODE_KP_HASH,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_SPACE = SDL_SCANCODE_KP_SPACE,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_AT = SDL_SCANCODE_KP_AT,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_EXCLAM = SDL_SCANCODE_KP_EXCLAM,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_MEMSTORE = SDL_SCANCODE_KP_MEMSTORE,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_MEMRECALL = SDL_SCANCODE_KP_MEMRECALL,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_MEMCLEAR = SDL_SCANCODE_KP_MEMCLEAR,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_MEMADD = SDL_SCANCODE_KP_MEMADD,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_MEMSUBTRACT = SDL_SCANCODE_KP_MEMSUBTRACT,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_MEMMULTIPLY = SDL_SCANCODE_KP_MEMMULTIPLY,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_MEMDIVIDE = SDL_SCANCODE_KP_MEMDIVIDE,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_PLUSMINUS = SDL_SCANCODE_KP_PLUSMINUS,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_CLEAR = SDL_SCANCODE_KP_CLEAR,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_CLEARENTRY = SDL_SCANCODE_KP_CLEARENTRY,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_BINARY = SDL_SCANCODE_KP_BINARY,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_OCTAL = SDL_SCANCODE_KP_OCTAL,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_DECIMAL = SDL_SCANCODE_KP_DECIMAL,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KP_HEXADECIMAL = SDL_SCANCODE_KP_HEXADECIMAL,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_LCTRL = SDL_SCANCODE_LCTRL,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_LSHIFT = SDL_SCANCODE_LSHIFT,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_LALT = SDL_SCANCODE_LALT,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_LGUI = SDL_SCANCODE_LGUI,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_RCTRL = SDL_SCANCODE_RCTRL,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_RSHIFT = SDL_SCANCODE_RSHIFT,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_RALT = SDL_SCANCODE_RALT,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_RGUI = SDL_SCANCODE_RGUI,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_MODE = SDL_SCANCODE_MODE,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_AUDIONEXT = SDL_SCANCODE_AUDIONEXT,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_AUDIOPREV = SDL_SCANCODE_AUDIOPREV,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_AUDIOSTOP = SDL_SCANCODE_AUDIOSTOP,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_AUDIOPLAY = SDL_SCANCODE_AUDIOPLAY,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_AUDIOMUTE = SDL_SCANCODE_AUDIOMUTE,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_MEDIASELECT = SDL_SCANCODE_MEDIASELECT,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_WWW = SDL_SCANCODE_WWW,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_MAIL = SDL_SCANCODE_MAIL,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_CALCULATOR = SDL_SCANCODE_CALCULATOR,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_COMPUTER = SDL_SCANCODE_COMPUTER,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_AC_SEARCH = SDL_SCANCODE_AC_SEARCH,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_AC_HOME = SDL_SCANCODE_AC_HOME,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_AC_BACK = SDL_SCANCODE_AC_BACK,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_AC_FORWARD = SDL_SCANCODE_AC_FORWARD,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_AC_STOP = SDL_SCANCODE_AC_STOP,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_AC_REFRESH = SDL_SCANCODE_AC_REFRESH,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_AC_BOOKMARKS = SDL_SCANCODE_AC_BOOKMARKS,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_BRIGHTNESSDOWN = SDL_SCANCODE_BRIGHTNESSDOWN,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_BRIGHTNESSUP = SDL_SCANCODE_BRIGHTNESSUP,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_DISPLAYSWITCH = SDL_SCANCODE_DISPLAYSWITCH,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KBDILLUMTOGGLE = SDL_SCANCODE_KBDILLUMTOGGLE,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KBDILLUMDOWN = SDL_SCANCODE_KBDILLUMDOWN,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_KBDILLUMUP = SDL_SCANCODE_KBDILLUMUP,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_EJECT = SDL_SCANCODE_EJECT,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_SLEEP = SDL_SCANCODE_SLEEP,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_APP1 = SDL_SCANCODE_APP1,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_APP2 = SDL_SCANCODE_APP2,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_AUDIOREWIND = SDL_SCANCODE_AUDIOREWIND,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_AUDIOFASTFORWARD = SDL_SCANCODE_AUDIOFASTFORWARD,
  __pyx_e_7pyorama_8keyboard_SCAN_CODE_NUM_SCAN_CODES = SDL_NUM_SCANCODES
};

/* "pyorama/keyboard.pxd":252
 *     SCAN_CODE_NUM_SCAN_CODES = SDL_NUM_SCANCODES
 * 
 * cpdef enum KeyCodes:             # <<<<<<<<<<<<<<
 *     KEY_CODE_UNKNOWN = SDLK_UNKNOWN
 *     KEY_CODE_RETURN = SDLK_RETURN
 */
enum __pyx_t_7pyorama_8keyboard_KeyCodes {

  /* "pyorama/keyboard.pxd":492
 *     KEY_CODE_APP2 = SDLK_APP2
 *     KEY_CODE_AUDIOREWIND = SDLK_AUDIOREWIND
 *     KEY_CODE_AUDIOFASTFORWARD = SDLK_AUDIOFASTFORWARD             # <<<<<<<<<<<<<<
 * 
 * cpdef enum KeyMods:
 */
  __pyx_e_7pyorama_8keyboard_KEY_CODE_UNKNOWN = SDLK_UNKNOWN,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_RETURN = SDLK_RETURN,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_ESCAPE = SDLK_ESCAPE,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_BACKSPACE = SDLK_BACKSPACE,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_TAB = SDLK_TAB,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_SPACE = SDLK_SPACE,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_EXCLAIM = SDLK_EXCLAIM,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_QUOTEDBL = SDLK_QUOTEDBL,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_HASH = SDLK_HASH,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_PERCENT = SDLK_PERCENT,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_DOLLAR = SDLK_DOLLAR,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_AMPERSAND = SDLK_AMPERSAND,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_QUOTE = SDLK_QUOTE,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_LEFTPAREN = SDLK_LEFTPAREN,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_RIGHTPAREN = SDLK_RIGHTPAREN,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_ASTERISK = SDLK_ASTERISK,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_PLUS = SDLK_PLUS,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_COMMA = SDLK_COMMA,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_MINUS = SDLK_MINUS,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_PERIOD = SDLK_PERIOD,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_SLASH = SDLK_SLASH,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_0 = SDLK_0,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_1 = SDLK_1,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_2 = SDLK_2,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_3 = SDLK_3,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_4 = SDLK_4,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_5 = SDLK_5,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_6 = SDLK_6,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_7 = SDLK_7,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_8 = SDLK_8,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_9 = SDLK_9,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_COLON = SDLK_COLON,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_SEMICOLON = SDLK_SEMICOLON,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_LESS = SDLK_LESS,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_EQUALS = SDLK_EQUALS,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_GREATER = SDLK_GREATER,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_QUESTION = SDLK_QUESTION,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_AT = SDLK_AT,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_LEFTBRACKET = SDLK_LEFTBRACKET,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_BACKSLASH = SDLK_BACKSLASH,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_RIGHTBRACKET = SDLK_RIGHTBRACKET,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_CARET = SDLK_CARET,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_UNDERSCORE = SDLK_UNDERSCORE,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_BACKQUOTE = SDLK_BACKQUOTE,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_a = SDLK_a,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_b = SDLK_b,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_c = SDLK_c,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_d = SDLK_d,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_e = SDLK_e,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_f = SDLK_f,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_g = SDLK_g,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_h = SDLK_h,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_i = SDLK_i,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_j = SDLK_j,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_k = SDLK_k,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_l = SDLK_l,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_m = SDLK_m,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_n = SDLK_n,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_o = SDLK_o,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_p = SDLK_p,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_q = SDLK_q,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_r = SDLK_r,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_s = SDLK_s,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_t = SDLK_t,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_u = SDLK_u,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_v = SDLK_v,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_w = SDLK_w,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_x = SDLK_x,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_y = SDLK_y,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_z = SDLK_z,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_CAPSLOCK = SDLK_CAPSLOCK,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_F1 = SDLK_F1,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_F2 = SDLK_F2,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_F3 = SDLK_F3,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_F4 = SDLK_F4,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_F5 = SDLK_F5,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_F6 = SDLK_F6,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_F7 = SDLK_F7,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_F8 = SDLK_F8,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_F9 = SDLK_F9,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_F10 = SDLK_F10,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_F11 = SDLK_F11,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_F12 = SDLK_F12,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_PRINTSCREEN = SDLK_PRINTSCREEN,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_SCROLLLOCK = SDLK_SCROLLLOCK,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_PAUSE = SDLK_PAUSE,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_INSERT = SDLK_INSERT,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_HOME = SDLK_HOME,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_PAGEUP = SDLK_PAGEUP,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_DELETE = SDLK_DELETE,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_END = SDLK_END,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_PAGEDOWN = SDLK_PAGEDOWN,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_RIGHT = SDLK_RIGHT,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_LEFT = SDLK_LEFT,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_DOWN = SDLK_DOWN,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_UP = SDLK_UP,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_NUMLOCKCLEAR = SDLK_NUMLOCKCLEAR,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_DIVIDE = SDLK_KP_DIVIDE,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_MULTIPLY = SDLK_KP_MULTIPLY,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_MINUS = SDLK_KP_MINUS,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_PLUS = SDLK_KP_PLUS,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_ENTER = SDLK_KP_ENTER,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_1 = SDLK_KP_1,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_2 = SDLK_KP_2,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_3 = SDLK_KP_3,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_4 = SDLK_KP_4,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_5 = SDLK_KP_5,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_6 = SDLK_KP_6,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_7 = SDLK_KP_7,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_8 = SDLK_KP_8,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_9 = SDLK_KP_9,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_0 = SDLK_KP_0,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_PERIOD = SDLK_KP_PERIOD,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_APPLICATION = SDLK_APPLICATION,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_POWER = SDLK_POWER,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_EQUALS = SDLK_KP_EQUALS,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_F13 = SDLK_F13,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_F14 = SDLK_F14,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_F15 = SDLK_F15,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_F16 = SDLK_F16,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_F17 = SDLK_F17,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_F18 = SDLK_F18,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_F19 = SDLK_F19,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_F20 = SDLK_F20,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_F21 = SDLK_F21,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_F22 = SDLK_F22,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_F23 = SDLK_F23,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_F24 = SDLK_F24,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_EXECUTE = SDLK_EXECUTE,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_HELP = SDLK_HELP,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_MENU = SDLK_MENU,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_SELECT = SDLK_SELECT,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_STOP = SDLK_STOP,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_AGAIN = SDLK_AGAIN,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_UNDO = SDLK_UNDO,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_CUT = SDLK_CUT,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_COPY = SDLK_COPY,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_PASTE = SDLK_PASTE,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_FIND = SDLK_FIND,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_MUTE = SDLK_MUTE,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_VOLUMEUP = SDLK_VOLUMEUP,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_VOLUMEDOWN = SDLK_VOLUMEDOWN,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_COMMA = SDLK_KP_COMMA,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_EQUALSAS400 = SDLK_KP_EQUALSAS400,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_ALTERASE = SDLK_ALTERASE,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_SYSREQ = SDLK_SYSREQ,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_CANCEL = SDLK_CANCEL,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_CLEAR = SDLK_CLEAR,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_PRIOR = SDLK_PRIOR,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_RETURN2 = SDLK_RETURN2,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_SEPARATOR = SDLK_SEPARATOR,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_OUT = SDLK_OUT,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_OPER = SDLK_OPER,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_CLEARAGAIN = SDLK_CLEARAGAIN,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_CRSEL = SDLK_CRSEL,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_EXSEL = SDLK_EXSEL,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_00 = SDLK_KP_00,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_000 = SDLK_KP_000,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_THOUSANDSSEPARATOR = SDLK_THOUSANDSSEPARATOR,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_DECIMALSEPARATOR = SDLK_DECIMALSEPARATOR,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_CURRENCYUNIT = SDLK_CURRENCYUNIT,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_CURRENCYSUBUNIT = SDLK_CURRENCYSUBUNIT,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_LEFTPAREN = SDLK_KP_LEFTPAREN,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_RIGHTPAREN = SDLK_KP_RIGHTPAREN,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_LEFTBRACE = SDLK_KP_LEFTBRACE,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_RIGHTBRACE = SDLK_KP_RIGHTBRACE,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_TAB = SDLK_KP_TAB,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_BACKSPACE = SDLK_KP_BACKSPACE,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_A = SDLK_KP_A,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_B = SDLK_KP_B,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_C = SDLK_KP_C,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_D = SDLK_KP_D,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_E = SDLK_KP_E,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_F = SDLK_KP_F,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_XOR = SDLK_KP_XOR,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_POWER = SDLK_KP_POWER,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_PERCENT = SDLK_KP_PERCENT,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_LESS = SDLK_KP_LESS,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_GREATER = SDLK_KP_GREATER,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_AMPERSAND = SDLK_KP_AMPERSAND,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_DBLAMPERSAND = SDLK_KP_DBLAMPERSAND,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_VERTICALBAR = SDLK_KP_VERTICALBAR,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_DBLVERTICALBAR = SDLK_KP_DBLVERTICALBAR,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_COLON = SDLK_KP_COLON,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_HASH = SDLK_KP_HASH,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_SPACE = SDLK_KP_SPACE,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_AT = SDLK_KP_AT,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_EXCLAM = SDLK_KP_EXCLAM,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_MEMSTORE = SDLK_KP_MEMSTORE,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_MEMRECALL = SDLK_KP_MEMRECALL,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_MEMCLEAR = SDLK_KP_MEMCLEAR,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_MEMADD = SDLK_KP_MEMADD,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_MEMSUBTRACT = SDLK_KP_MEMSUBTRACT,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_MEMMULTIPLY = SDLK_KP_MEMMULTIPLY,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_MEMDIVIDE = SDLK_KP_MEMDIVIDE,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_PLUSMINUS = SDLK_KP_PLUSMINUS,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_CLEAR = SDLK_KP_CLEAR,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_CLEARENTRY = SDLK_KP_CLEARENTRY,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_BINARY = SDLK_KP_BINARY,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_OCTAL = SDLK_KP_OCTAL,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_DECIMAL = SDLK_KP_DECIMAL,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KP_HEXADECIMAL = SDLK_KP_HEXADECIMAL,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_LCTRL = SDLK_LCTRL,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_LSHIFT = SDLK_LSHIFT,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_LALT = SDLK_LALT,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_LGUI = SDLK_LGUI,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_RCTRL = SDLK_RCTRL,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_RSHIFT = SDLK_RSHIFT,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_RALT = SDLK_RALT,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_RGUI = SDLK_RGUI,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_MODE = SDLK_MODE,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_AUDIONEXT = SDLK_AUDIONEXT,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_AUDIOPREV = SDLK_AUDIOPREV,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_AUDIOSTOP = SDLK_AUDIOSTOP,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_AUDIOPLAY = SDLK_AUDIOPLAY,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_AUDIOMUTE = SDLK_AUDIOMUTE,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_MEDIASELECT = SDLK_MEDIASELECT,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_WWW = SDLK_WWW,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_MAIL = SDLK_MAIL,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_CALCULATOR = SDLK_CALCULATOR,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_COMPUTER = SDLK_COMPUTER,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_AC_SEARCH = SDLK_AC_SEARCH,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_AC_HOME = SDLK_AC_HOME,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_AC_BACK = SDLK_AC_BACK,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_AC_FORWARD = SDLK_AC_FORWARD,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_AC_STOP = SDLK_AC_STOP,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_AC_REFRESH = SDLK_AC_REFRESH,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_AC_BOOKMARKS = SDLK_AC_BOOKMARKS,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_BRIGHTNESSDOWN = SDLK_BRIGHTNESSDOWN,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_BRIGHTNESSUP = SDLK_BRIGHTNESSUP,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_DISPLAYSWITCH = SDLK_DISPLAYSWITCH,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KBDILLUMTOGGLE = SDLK_KBDILLUMTOGGLE,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KBDILLUMDOWN = SDLK_KBDILLUMDOWN,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_KBDILLUMUP = SDLK_KBDILLUMUP,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_EJECT = SDLK_EJECT,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_SLEEP = SDLK_SLEEP,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_APP1 = SDLK_APP1,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_APP2 = SDLK_APP2,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_AUDIOREWIND = SDLK_AUDIOREWIND,
  __pyx_e_7pyorama_8keyboard_KEY_CODE_AUDIOFASTFORWARD = SDLK_AUDIOFASTFORWARD
};

/* "pyorama/keyboard.pxd":494
 *     KEY_CODE_AUDIOFASTFORWARD = SDLK_AUDIOFASTFORWARD
 * 
 * cpdef enum KeyMods:             # <<<<<<<<<<<<<<
 *     KEY_MOD_NONE = KMOD_NONE
 *     KEY_MOD_LSHIFT = KMOD_LSHIFT
 */
enum __pyx_t_7pyorama_8keyboard_KeyMods {

  /* "pyorama/keyboard.pxd":511
 *     KEY_MOD_SHIFT = KMOD_SHIFT
 *     KEY_MOD_ALT = KMOD_ALT
 *     KEY_MOD_GUI = KMOD_GUI             # <<<<<<<<<<<<<<
 */
  __pyx_e_7pyorama_8keyboard_KEY_MOD_NONE = KMOD_NONE,
  __pyx_e_7pyorama_8keyboard_KEY_MOD_LSHIFT = KMOD_LSHIFT,
  __pyx_e_7pyorama_8keyboard_KEY_MOD_RSHIFT = KMOD_RSHIFT,
  __pyx_e_7pyorama_8keyboard_KEY_MOD_LCTRL = KMOD_LCTRL,
  __pyx_e_7pyorama_8keyboard_KEY_MOD_RCTRL = KMOD_RCTRL,
  __pyx_e_7pyorama_8keyboard_KEY_MOD_LALT = KMOD_LALT,
  __pyx_e_7pyorama_8keyboard_KEY_MOD_RALT = KMOD_RALT,
  __pyx_e_7pyorama_8keyboard_KEY_MOD_LGUI = KMOD_LGUI,
  __pyx_e_7pyorama_8keyboard_KEY_MOD_RGUI = KMOD_RGUI,
  __pyx_e_7pyorama_8keyboard_KEY_MOD_NUM = KMOD_NUM,
  __pyx_e_7pyorama_8keyboard_KEY_MOD_CAPS = KMOD_CAPS,
  __pyx_e_7pyorama_8keyboard_KEY_MOD_MODE = KMOD_MODE,
  __pyx_e_7pyorama_8keyboard_KEY_MOD_RESERVED = KMOD_RESERVED,
  __pyx_e_7pyorama_8keyboard_KEY_MOD_CTRL = KMOD_CTRL,
  __pyx_e_7pyorama_8keyboard_KEY_MOD_SHIFT = KMOD_SHIFT,
  __pyx_e_7pyorama_8keyboard_KEY_MOD_ALT = KMOD_ALT,
  __pyx_e_7pyorama_8keyboard_KEY_MOD_GUI = KMOD_GUI
};
struct __pyx_t_7pyorama_5event_ListenerC;
typedef struct __pyx_t_7pyorama_5event_ListenerC __pyx_t_7pyorama_5event_ListenerC;

/* "pyorama/event.pxd":16
 * 
 * ctypedef uint32_t EventType
 * cpdef enum EventTypes:             # <<<<<<<<<<<<<<
 *     EVENT_TYPE_NONE = 0
 *     EVENT_TYPE_WINDOW = SDL_WINDOWEVENT
 */
enum __pyx_t_7pyorama_5event_EventTypes {

  /* "pyorama/event.pxd":25
 *     EVENT_TYPE_MOUSE_MOTION = SDL_MOUSEMOTION
 *     EVENT_TYPE_MOUSE_WHEEL = SDL_MOUSEWHEEL
 *     EVENT_TYPE_USER = SDL_USEREVENT             # <<<<<<<<<<<<<<
 * 
 * cpdef enum WindowEventTypes:
 */
  __pyx_e_7pyorama_5event_EVENT_TYPE_NONE = 0,
  __pyx_e_7pyorama_5event_EVENT_TYPE_WINDOW = SDL_WINDOWEVENT,
  __pyx_e_7pyorama_5event_EVENT_TYPE_KEY_DOWN = SDL_KEYDOWN,
  __pyx_e_7pyorama_5event_EVENT_TYPE_KEY_UP = SDL_KEYUP,
  __pyx_e_7pyorama_5event_EVENT_TYPE_MOUSE_BUTTON_DOWN = SDL_MOUSEBUTTONDOWN,
  __pyx_e_7pyorama_5event_EVENT_TYPE_MOUSE_BUTTON_UP = SDL_MOUSEBUTTONUP,
  __pyx_e_7pyorama_5event_EVENT_TYPE_MOUSE_MOTION = SDL_MOUSEMOTION,
  __pyx_e_7pyorama_5event_EVENT_TYPE_MOUSE_WHEEL = SDL_MOUSEWHEEL,
  __pyx_e_7pyorama_5event_EVENT_TYPE_USER = SDL_USEREVENT
};

/* "pyorama/event.pxd":27
 *     EVENT_TYPE_USER = SDL_USEREVENT
 * 
 * cpdef enum WindowEventTypes:             # <<<<<<<<<<<<<<
 *     WINDOW_EVENT_TYPE_SHOWN = SDL_WINDOWEVENT_SHOWN
 *     WINDOW_EVENT_TYPE_HIDDEN = SDL_WINDOWEVENT_HIDDEN
 */
enum __pyx_t_7pyorama_5event_WindowEventTypes {

  /* "pyorama/event.pxd":43
 *     WINDOW_EVENT_TYPE_CLOSE = SDL_WINDOWEVENT_CLOSE
 *     WINDOW_EVENT_TYPE_TAKE_FOCUS = SDL_WINDOWEVENT_TAKE_FOCUS
 *     WINDOW_EVENT_TYPE_HIT_TEST = SDL_WINDOWEVENT_HIT_TEST             # <<<<<<<<<<<<<<
 * 
 * @cython.final
 */
  __pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_SHOWN = SDL_WINDOWEVENT_SHOWN,
  __pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_HIDDEN = SDL_WINDOWEVENT_HIDDEN,
  __pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_EXPOSED = SDL_WINDOWEVENT_EXPOSED,
  __pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_MOVED = SDL_WINDOWEVENT_MOVED,
  __pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_RESIZED = SDL_WINDOWEVENT_RESIZED,
  __pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_CHANGED = SDL_WINDOWEVENT_SIZE_CHANGED,
  __pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_MINIMIZED = SDL_WINDOWEVENT_MINIMIZED,
  __pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_MAXIMIZED = SDL_WINDOWEVENT_MAXIMIZED,
  __pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_RESTORED = SDL_WINDOWEVENT_RESTORED,
  __pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_ENTER = SDL_WINDOWEVENT_ENTER,
  __pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_LEAVE = SDL_WINDOWEVENT_LEAVE,
  __pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_FOCUS_GAINED = SDL_WINDOWEVENT_FOCUS_GAINED,
  __pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_FOCUS_LOST = SDL_WINDOWEVENT_FOCUS_LOST,
  __pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_CLOSE = SDL_WINDOWEVENT_CLOSE,
  __pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_TAKE_FOCUS = SDL_WINDOWEVENT_TAKE_FOCUS,
  __pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_HIT_TEST = SDL_WINDOWEVENT_HIT_TEST
};

/* "pyorama/event.pxd":9
 * from pyorama.keyboard cimport *
 * 
 * ctypedef struct ListenerC:             # <<<<<<<<<<<<<<
 *     EventTypes event_type
 *     size_t index
 */
struct __pyx_t_7pyorama_5event_ListenerC {
  enum __pyx_t_7pyorama_5event_EventTypes event_type;
  size_t index;
  PyObject *callback;
  PyObject *user_data;
};

/* "pyorama/core/item_hash_map.pxd":5
 * 
 * @cython.final
 * cdef class ItemHashMap:             # <<<<<<<<<<<<<<
 *     cdef dict hash_map
 * 
 */
struct __pyx_obj_7pyorama_4core_13item_hash_map_ItemHashMap {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pyorama_4core_13item_hash_map_ItemHashMap *__pyx_vtab;
  PyObject *hash_map;
};


/* "pyorama/core/item_vector.pxd":5
 * 
 * @cython.final
 * cdef class ItemVector:             # <<<<<<<<<<<<<<
 *     cdef:
 *         char *items
 */
struct __pyx_obj_7pyorama_4core_11item_vector_ItemVector {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pyorama_4core_11item_vector_ItemVector *__pyx_vtab;
  char *items;
  size_t max_items;
  size_t item_size;
  size_t num_items;
};


/* "pyorama/core/item_slot_map.pxd":9
 * 
 * @cython.final
 * cdef class ItemSlotMap:             # <<<<<<<<<<<<<<
 *     cdef:
 *         ItemVector items
 */
struct __pyx_obj_7pyorama_4core_13item_slot_map_ItemSlotMap {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pyorama_4core_13item_slot_map_ItemSlotMap *__pyx_vtab;
  struct __pyx_obj_7pyorama_4core_11item_vector_ItemVector *items;
  struct __pyx_obj_7pyorama_4core_11item_vector_ItemVector *indices;
  struct __pyx_obj_7pyorama_4core_11item_vector_ItemVector *erase;
  __pyx_t_7pyorama_4core_13item_slot_map_ItemType item_type;
  uint32_t free_list_front;
  uint32_t free_list_back;
};


/* "pyorama/math3d/mat4.pxd":4
 * from pyorama.math3d.vec3 cimport *
 * 
 * cdef class Mat4:             # <<<<<<<<<<<<<<
 *     cdef Mat4C *ptr
 * 
 */
struct __pyx_obj_7pyorama_6math3d_4mat4_Mat4 {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pyorama_6math3d_4mat4_Mat4 *__pyx_vtab;
  __pyx_t_7pyorama_6math3d_6common_Mat4C *ptr;
};


/* "pyorama/math3d/mat3.pxd":5
 * from pyorama.math3d.mat4 cimport *
 * 
 * cdef class Mat3:             # <<<<<<<<<<<<<<
 *     cdef Mat3C *ptr
 * 
 */
struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pyorama_6math3d_4mat3_Mat3 *__pyx_vtab;
  __pyx_t_7pyorama_6math3d_6common_Mat3C *ptr;
};


/* "pyorama/math3d/quat.pxd":4
 * from pyorama.math3d.vec3 cimport *
 * 
 * cdef class Quat:             # <<<<<<<<<<<<<<
 *     cdef QuatC *ptr
 * 
 */
struct __pyx_obj_7pyorama_6math3d_4quat_Quat {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pyorama_6math3d_4quat_Quat *__pyx_vtab;
  __pyx_t_7pyorama_6math3d_6common_QuatC *ptr;
};


/* "pyorama/math3d/vec3.pxd":6
 * from pyorama.math3d.quat cimport *
 * 
 * cdef class Vec3:             # <<<<<<<<<<<<<<
 *     cdef Vec3C *ptr
 * 
 */
struct __pyx_obj_7pyorama_6math3d_4vec3_Vec3 {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pyorama_6math3d_4vec3_Vec3 *__pyx_vtab;
  __pyx_t_7pyorama_6math3d_6common_Vec3C *ptr;
};


/* "pyorama/math3d/mat2.pxd":5
 * from pyorama.math3d.mat2 cimport *
 * 
 * cdef class Mat2:             # <<<<<<<<<<<<<<
 *     cdef Mat2C *ptr
 * 
 */
struct __pyx_obj_7pyorama_6math3d_4mat2_Mat2 {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pyorama_6math3d_4mat2_Mat2 *__pyx_vtab;
  __pyx_t_7pyorama_6math3d_6common_Mat2C *ptr;
};


/* "pyorama/math3d/vec2.pxd":7
 * from pyorama.math3d.mat4 cimport *
 * 
 * cdef class Vec2:             # <<<<<<<<<<<<<<
 *     cdef Vec2C *ptr
 * 
 */
struct __pyx_obj_7pyorama_6math3d_4vec2_Vec2 {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pyorama_6math3d_4vec2_Vec2 *__pyx_vtab;
  __pyx_t_7pyorama_6math3d_6common_Vec2C *ptr;
};


/* "pyorama/math3d/vec4.pxd":5
 * from pyorama.math3d.quat cimport *
 * 
 * cdef class Vec4:             # <<<<<<<<<<<<<<
 *     cdef Vec4C *ptr
 * 
 */
struct __pyx_obj_7pyorama_6math3d_4vec4_Vec4 {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pyorama_6math3d_4vec4_Vec4 *__pyx_vtab;
  __pyx_t_7pyorama_6math3d_6common_Vec4C *ptr;
};


/* "pyorama/graphics.pxd":150
 * 
 * @cython.final
 * cdef class GraphicsManager:             # <<<<<<<<<<<<<<
 *     cdef SDL_Window *root_window
 *     cdef SDL_GLContext root_context
 */
struct __pyx_obj_7pyorama_8graphics_GraphicsManager {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pyorama_8graphics_GraphicsManager *__pyx_vtab;
  SDL_Window *root_window;
  SDL_GLContext root_context;
  struct __pyx_obj_7pyorama_4core_13item_slot_map_ItemSlotMap *windows;
  struct __pyx_obj_7pyorama_4core_13item_slot_map_ItemSlotMap *cameras_3d;
  struct __pyx_obj_7pyorama_4core_13item_slot_map_ItemSlotMap *images;
  struct __pyx_obj_7pyorama_4core_13item_slot_map_ItemSlotMap *samplers;
  struct __pyx_obj_7pyorama_4core_13item_slot_map_ItemSlotMap *textures;
  struct __pyx_obj_7pyorama_4core_13item_slot_map_ItemSlotMap *meshes;
  struct __pyx_obj_7pyorama_4core_13item_slot_map_ItemSlotMap *models;
  struct __pyx_obj_7pyorama_4core_13item_slot_map_ItemSlotMap *model_batches;
  struct __pyx_obj_7pyorama_4core_13item_slot_map_ItemSlotMap *shaders;
  struct __pyx_obj_7pyorama_4core_13item_slot_map_ItemSlotMap *programs;
};


/* "pyorama/event.pxd":46
 * 
 * @cython.final
 * cdef class EventManager:             # <<<<<<<<<<<<<<
 *     cdef dict listener_map
 *     cdef ItemSlotMap listeners
 */
struct __pyx_obj_7pyorama_5event_EventManager {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pyorama_5event_EventManager *__pyx_vtab;
  PyObject *listener_map;
  struct __pyx_obj_7pyorama_4core_13item_slot_map_ItemSlotMap *listeners;
  size_t num_user_event_types;
  struct __pyx_obj_7pyorama_4core_11item_vector_ItemVector *free_user_event_types;
};


/* "EnumBase":15
 * 
 * @cython.internal
 * cdef class __Pyx_EnumMeta(type):             # <<<<<<<<<<<<<<
 *     def __init__(cls, name, parents, dct):
 *         type.__init__(cls, name, parents, dct)
 */
struct __pyx_obj___Pyx_EnumMeta {
  PyHeapTypeObject __pyx_base;
};



/* "pyorama/core/item_hash_map.pxd":5
 * 
 * @cython.final
 * cdef class ItemHashMap:             # <<<<<<<<<<<<<<
 *     cdef dict hash_map
 * 
 */

struct __pyx_vtabstruct_7pyorama_4core_13item_hash_map_ItemHashMap {
  void (*c_append)(struct __pyx_obj_7pyorama_4core_13item_hash_map_ItemHashMap *, PyObject *, uint64_t);
  void (*c_remove)(struct __pyx_obj_7pyorama_4core_13item_hash_map_ItemHashMap *, PyObject *);
  uint64_t (*c_get)(struct __pyx_obj_7pyorama_4core_13item_hash_map_ItemHashMap *, PyObject *);
  int (*c_contains)(struct __pyx_obj_7pyorama_4core_13item_hash_map_ItemHashMap *, PyObject *);
};
static struct __pyx_vtabstruct_7pyorama_4core_13item_hash_map_ItemHashMap *__pyx_vtabptr_7pyorama_4core_13item_hash_map_ItemHashMap;


/* "pyorama/core/item_vector.pxd":5
 * 
 * @cython.final
 * cdef class ItemVector:             # <<<<<<<<<<<<<<
 *     cdef:
 *         char *items
 */

struct __pyx_vtabstruct_7pyorama_4core_11item_vector_ItemVector {
  void (*c_push_empty)(struct __pyx_obj_7pyorama_4core_11item_vector_ItemVector *);
  void (*c_pop_empty)(struct __pyx_obj_7pyorama_4core_11item_vector_ItemVector *);
  void (*c_push)(struct __pyx_obj_7pyorama_4core_11item_vector_ItemVector *, void *);
  void (*c_pop)(struct __pyx_obj_7pyorama_4core_11item_vector_ItemVector *, void *);
  void *(*c_get_ptr)(struct __pyx_obj_7pyorama_4core_11item_vector_ItemVector *, size_t);
  void (*c_get)(struct __pyx_obj_7pyorama_4core_11item_vector_ItemVector *, size_t, void *);
  void (*c_set)(struct __pyx_obj_7pyorama_4core_11item_vector_ItemVector *, size_t, void *);
  void (*c_clear)(struct __pyx_obj_7pyorama_4core_11item_vector_ItemVector *, size_t);
  void (*c_clear_all)(struct __pyx_obj_7pyorama_4core_11item_vector_ItemVector *);
  void (*c_swap)(struct __pyx_obj_7pyorama_4core_11item_vector_ItemVector *, size_t, size_t);
  void (*c_resize)(struct __pyx_obj_7pyorama_4core_11item_vector_ItemVector *, size_t);
  void (*c_remove_empty)(struct __pyx_obj_7pyorama_4core_11item_vector_ItemVector *, size_t);
  void (*c_remove)(struct __pyx_obj_7pyorama_4core_11item_vector_ItemVector *, size_t, void *);
};
static struct __pyx_vtabstruct_7pyorama_4core_11item_vector_ItemVector *__pyx_vtabptr_7pyorama_4core_11item_vector_ItemVector;


/* "pyorama/core/item_slot_map.pxd":9
 * 
 * @cython.final
 * cdef class ItemSlotMap:             # <<<<<<<<<<<<<<
 *     cdef:
 *         ItemVector items
 */

struct __pyx_vtabstruct_7pyorama_4core_13item_slot_map_ItemSlotMap {
  __pyx_t_7pyorama_4core_6handle_Handle (*c_create)(struct __pyx_obj_7pyorama_4core_13item_slot_map_ItemSlotMap *);
  void (*c_delete)(struct __pyx_obj_7pyorama_4core_13item_slot_map_ItemSlotMap *, __pyx_t_7pyorama_4core_6handle_Handle);
  void *(*c_get_ptr)(struct __pyx_obj_7pyorama_4core_13item_slot_map_ItemSlotMap *, __pyx_t_7pyorama_4core_6handle_Handle);
  int (*c_is_free_list_empty)(struct __pyx_obj_7pyorama_4core_13item_slot_map_ItemSlotMap *);
  int (*c_is_handle_valid)(struct __pyx_obj_7pyorama_4core_13item_slot_map_ItemSlotMap *, __pyx_t_7pyorama_4core_6handle_Handle);
};
static struct __pyx_vtabstruct_7pyorama_4core_13item_slot_map_ItemSlotMap *__pyx_vtabptr_7pyorama_4core_13item_slot_map_ItemSlotMap;


/* "pyorama/math3d/mat4.pxd":4
 * from pyorama.math3d.vec3 cimport *
 * 
 * cdef class Mat4:             # <<<<<<<<<<<<<<
 *     cdef Mat4C *ptr
 * 
 */

struct __pyx_vtabstruct_7pyorama_6math3d_4mat4_Mat4 {
  void (*c_add)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *);
  void (*c_copy)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *);
  float (*c_det)(__pyx_t_7pyorama_6math3d_6common_Mat4C *);
  void (*c_div)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *);
  void (*c_dot)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *);
  int (*c_equals)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *);
  void (*c_from_quat)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_QuatC *);
  void (*c_from_rotation)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, float, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_from_rotation_x)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, float);
  void (*c_from_rotation_y)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, float);
  void (*c_from_rotation_z)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, float);
  void (*c_from_scaling)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_from_translation)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_frustum)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, float, float, float, float, float, float);
  void (*c_identity)(__pyx_t_7pyorama_6math3d_6common_Mat4C *);
  void (*c_inv)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *);
  void (*c_look_at)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_mul)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *);
  int (*c_nearly_equals)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *, struct __pyx_opt_args_7pyorama_6math3d_4mat4_4Mat4_c_nearly_equals *__pyx_optional_args);
  void (*c_ortho)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, float, float, float, float, float, float);
  void (*c_perspective)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, float, float, float, float);
  void (*c_random)(__pyx_t_7pyorama_6math3d_6common_Mat4C *);
  void (*c_rotate)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *, float, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_rotate_x)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *, float);
  void (*c_rotate_y)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *, float);
  void (*c_rotate_z)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *, float);
  void (*c_scale)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_scale_add)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *, struct __pyx_opt_args_7pyorama_6math3d_4mat4_4Mat4_c_scale_add *__pyx_optional_args);
  void (*c_set_data)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, struct __pyx_opt_args_7pyorama_6math3d_4mat4_4Mat4_c_set_data *__pyx_optional_args);
  void (*c_sub)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *);
  void (*c_translate)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_transpose)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *);
};
static struct __pyx_vtabstruct_7pyorama_6math3d_4mat4_Mat4 *__pyx_vtabptr_7pyorama_6math3d_4mat4_Mat4;


/* "pyorama/math3d/mat3.pxd":5
 * from pyorama.math3d.mat4 cimport *
 * 
 * cdef class Mat3:             # <<<<<<<<<<<<<<
 *     cdef Mat3C *ptr
 * 
 */

struct __pyx_vtabstruct_7pyorama_6math3d_4mat3_Mat3 {
  void (*c_add)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *);
  void (*c_copy)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *);
  float (*c_det)(__pyx_t_7pyorama_6math3d_6common_Mat3C *);
  void (*c_div)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *);
  void (*c_dot)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *);
  int (*c_equals)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *);
  void (*c_from_mat4)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *);
  void (*c_from_quat)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_QuatC *);
  void (*c_from_rotation)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, float);
  void (*c_from_scaling)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_from_skewing)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_from_skewing_x)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, float);
  void (*c_from_skewing_y)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, float);
  void (*c_from_translation)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_identity)(__pyx_t_7pyorama_6math3d_6common_Mat3C *);
  void (*c_inv)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *);
  void (*c_mul)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *);
  int (*c_nearly_equals)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, struct __pyx_opt_args_7pyorama_6math3d_4mat3_4Mat3_c_nearly_equals *__pyx_optional_args);
  void (*c_normal_from_mat4)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *);
  void (*c_random)(__pyx_t_7pyorama_6math3d_6common_Mat3C *);
  void (*c_rotate)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, float);
  void (*c_scale)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_scale_add)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, struct __pyx_opt_args_7pyorama_6math3d_4mat3_4Mat3_c_scale_add *__pyx_optional_args);
  void (*c_set_data)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, struct __pyx_opt_args_7pyorama_6math3d_4mat3_4Mat3_c_set_data *__pyx_optional_args);
  void (*c_skew)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_skew_x)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, float);
  void (*c_skew_y)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, float);
  void (*c_sub)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *);
  void (*c_transpose)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *);
  void (*c_translate)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
};
static struct __pyx_vtabstruct_7pyorama_6math3d_4mat3_Mat3 *__pyx_vtabptr_7pyorama_6math3d_4mat3_Mat3;


/* "pyorama/math3d/quat.pxd":4
 * from pyorama.math3d.vec3 cimport *
 * 
 * cdef class Quat:             # <<<<<<<<<<<<<<
 *     cdef QuatC *ptr
 * 
 */

struct __pyx_vtabstruct_7pyorama_6math3d_4quat_Quat {
  void (*c_add)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *);
  void (*c_calculate_w)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *);
  void (*c_conjugate)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *);
  void (*c_copy)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *);
  float (*c_dot)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *);
  int (*c_equals)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *);
  void (*c_from_euler)(__pyx_t_7pyorama_6math3d_6common_QuatC *, float, float, float);
  void (*c_from_mat3)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_Mat3C *);
  float (*c_get_axis_angle)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_QuatC *);
  void (*c_identity)(__pyx_t_7pyorama_6math3d_6common_QuatC *);
  void (*c_inv)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *);
  float (*c_length)(__pyx_t_7pyorama_6math3d_6common_QuatC *);
  void (*c_lerp)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *, float);
  void (*c_mul)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *);
  int (*c_nearly_equals)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *, struct __pyx_opt_args_7pyorama_6math3d_4quat_4Quat_c_nearly_equals *__pyx_optional_args);
  void (*c_norm)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *);
  void (*c_rotate_x)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *, float);
  void (*c_rotate_y)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *, float);
  void (*c_rotate_z)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *, float);
  void (*c_rotation_to)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_scale_add)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *, struct __pyx_opt_args_7pyorama_6math3d_4quat_4Quat_c_scale_add *__pyx_optional_args);
  void (*c_set_axes)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_set_axis_angle)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, float);
  void (*c_set_data)(__pyx_t_7pyorama_6math3d_6common_QuatC *, struct __pyx_opt_args_7pyorama_6math3d_4quat_4Quat_c_set_data *__pyx_optional_args);
  void (*c_slerp)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *, float);
  float (*c_sqr_length)(__pyx_t_7pyorama_6math3d_6common_QuatC *);
};
static struct __pyx_vtabstruct_7pyorama_6math3d_4quat_Quat *__pyx_vtabptr_7pyorama_6math3d_4quat_Quat;


/* "pyorama/math3d/vec3.pxd":6
 * from pyorama.math3d.quat cimport *
 * 
 * cdef class Vec3:             # <<<<<<<<<<<<<<
 *     cdef Vec3C *ptr
 * 
 */

struct __pyx_vtabstruct_7pyorama_6math3d_4vec3_Vec3 {
  void (*c_add)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  float (*c_angle)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_ceil)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_copy)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_cross)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  float (*c_dist)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_div)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  float (*c_dot)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  int (*c_equals)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_floor)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_inv)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  float (*c_length)(__pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_lerp)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, float);
  void (*c_max_comps)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_min_comps)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_mul)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  int (*c_nearly_equals)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, struct __pyx_opt_args_7pyorama_6math3d_4vec3_4Vec3_c_nearly_equals *__pyx_optional_args);
  void (*c_negate)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_norm)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_random)(__pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_round)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_scale_add)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, struct __pyx_opt_args_7pyorama_6math3d_4vec3_4Vec3_c_scale_add *__pyx_optional_args);
  void (*c_set_data)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, struct __pyx_opt_args_7pyorama_6math3d_4vec3_4Vec3_c_set_data *__pyx_optional_args);
  float (*c_sqr_dist)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  float (*c_sqr_length)(__pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_sub)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_transform_mat3)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *);
  void (*c_transform_mat4)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *);
  void (*c_transform_quat)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_QuatC *);
};
static struct __pyx_vtabstruct_7pyorama_6math3d_4vec3_Vec3 *__pyx_vtabptr_7pyorama_6math3d_4vec3_Vec3;


/* "pyorama/math3d/mat2.pxd":5
 * from pyorama.math3d.mat2 cimport *
 * 
 * cdef class Mat2:             # <<<<<<<<<<<<<<
 *     cdef Mat2C *ptr
 * 
 */

struct __pyx_vtabstruct_7pyorama_6math3d_4mat2_Mat2 {
  void (*c_add)(__pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *);
  void (*c_copy)(__pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *);
  float (*c_det)(__pyx_t_7pyorama_6math3d_6common_Mat2C *);
  void (*c_div)(__pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *);
  void (*c_dot)(__pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *);
  int (*c_equals)(__pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *);
  void (*c_from_rotation)(__pyx_t_7pyorama_6math3d_6common_Mat2C *, float);
  void (*c_from_scaling)(__pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_identity)(__pyx_t_7pyorama_6math3d_6common_Mat2C *);
  void (*c_inv)(__pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *);
  void (*c_mul)(__pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *);
  int (*c_nearly_equals)(__pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *, struct __pyx_opt_args_7pyorama_6math3d_4mat2_4Mat2_c_nearly_equals *__pyx_optional_args);
  void (*c_random)(__pyx_t_7pyorama_6math3d_6common_Mat2C *);
  void (*c_rotate)(__pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *, float);
  void (*c_scale)(__pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_scale_add)(__pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *, struct __pyx_opt_args_7pyorama_6math3d_4mat2_4Mat2_c_scale_add *__pyx_optional_args);
  void (*c_set_data)(__pyx_t_7pyorama_6math3d_6common_Mat2C *, struct __pyx_opt_args_7pyorama_6math3d_4mat2_4Mat2_c_set_data *__pyx_optional_args);
  void (*c_sub)(__pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *);
  void (*c_transpose)(__pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *);
};
static struct __pyx_vtabstruct_7pyorama_6math3d_4mat2_Mat2 *__pyx_vtabptr_7pyorama_6math3d_4mat2_Mat2;


/* "pyorama/math3d/vec2.pxd":7
 * from pyorama.math3d.mat4 cimport *
 * 
 * cdef class Vec2:             # <<<<<<<<<<<<<<
 *     cdef Vec2C *ptr
 * 
 */

struct __pyx_vtabstruct_7pyorama_6math3d_4vec2_Vec2 {
  void (*c_add)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_ceil)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_copy)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_cross)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  float (*c_dist)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_div)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  float (*c_dot)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  int (*c_equals)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_floor)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_inv)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  float (*c_length)(__pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_lerp)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *, float);
  void (*c_max_comps)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_min_comps)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_mul)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  int (*c_nearly_equals)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *, struct __pyx_opt_args_7pyorama_6math3d_4vec2_4Vec2_c_nearly_equals *__pyx_optional_args);
  void (*c_negate)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_norm)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_random)(__pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_round)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_scale_add)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *, struct __pyx_opt_args_7pyorama_6math3d_4vec2_4Vec2_c_scale_add *__pyx_optional_args);
  void (*c_set_data)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, struct __pyx_opt_args_7pyorama_6math3d_4vec2_4Vec2_c_set_data *__pyx_optional_args);
  float (*c_sqr_dist)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  float (*c_sqr_length)(__pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_sub)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_transform_mat2)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *);
  void (*c_transform_mat3)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *);
  void (*c_transform_mat4)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *);
};
static struct __pyx_vtabstruct_7pyorama_6math3d_4vec2_Vec2 *__pyx_vtabptr_7pyorama_6math3d_4vec2_Vec2;


/* "pyorama/math3d/vec4.pxd":5
 * from pyorama.math3d.quat cimport *
 * 
 * cdef class Vec4:             # <<<<<<<<<<<<<<
 *     cdef Vec4C *ptr
 * 
 */

struct __pyx_vtabstruct_7pyorama_6math3d_4vec4_Vec4 {
  void (*c_add)(__pyx_t_7pyorama_6math3d_6common_Vec4C *, __pyx_t_7pyorama_6math3d_6common_Vec4C *, __pyx_t_7pyorama_6math3d_6common_Vec4C *);
  void (*c_ceil)(__pyx_t_7pyorama_6math3d_6common_Vec4C *, __pyx_t_7pyorama_6math3d_6common_Vec4C *);
  void (*c_copy)(__pyx_t_7pyorama_6math3d_6common_Vec4C *, __pyx_t_7pyorama_6math3d_6common_Vec4C *);
  float (*c_dist)(__pyx_t_7pyorama_6math3d_6common_Vec4C *, __pyx_t_7pyorama_6math3d_6common_Vec4C *);
  void (*c_div)(__pyx_t_7pyorama_6math3d_6common_Vec4C *, __pyx_t_7pyorama_6math3d_6common_Vec4C *, __pyx_t_7pyorama_6math3d_6common_Vec4C *);
  float (*c_dot)(__pyx_t_7pyorama_6math3d_6common_Vec4C *, __pyx_t_7pyorama_6math3d_6common_Vec4C *);
  int (*c_equals)(__pyx_t_7pyorama_6math3d_6common_Vec4C *, __pyx_t_7pyorama_6math3d_6common_Vec4C *);
  void (*c_floor)(__pyx_t_7pyorama_6math3d_6common_Vec4C *, __pyx_t_7pyorama_6math3d_6common_Vec4C *);
  void (*c_inv)(__pyx_t_7pyorama_6math3d_6common_Vec4C *, __pyx_t_7pyorama_6math3d_6common_Vec4C *);
  float (*c_length)(__pyx_t_7pyorama_6math3d_6common_Vec4C *);
  void (*c_lerp)(__pyx_t_7pyorama_6math3d_6common_Vec4C *, __pyx_t_7pyorama_6math3d_6common_Vec4C *, __pyx_t_7pyorama_6math3d_6common_Vec4C *, float);
  void (*c_max_comps)(__pyx_t_7pyorama_6math3d_6common_Vec4C *, __pyx_t_7pyorama_6math3d_6common_Vec4C *, __pyx_t_7pyorama_6math3d_6common_Vec4C *);
  void (*c_min_comps)(__pyx_t_7pyorama_6math3d_6common_Vec4C *, __pyx_t_7pyorama_6math3d_6common_Vec4C *, __pyx_t_7pyorama_6math3d_6common_Vec4C *);
  void (*c_mul)(__pyx_t_7pyorama_6math3d_6common_Vec4C *, __pyx_t_7pyorama_6math3d_6common_Vec4C *, __pyx_t_7pyorama_6math3d_6common_Vec4C *);
  int (*c_nearly_equals)(__pyx_t_7pyorama_6math3d_6common_Vec4C *, __pyx_t_7pyorama_6math3d_6common_Vec4C *, struct __pyx_opt_args_7pyorama_6math3d_4vec4_4Vec4_c_nearly_equals *__pyx_optional_args);
  void (*c_negate)(__pyx_t_7pyorama_6math3d_6common_Vec4C *, __pyx_t_7pyorama_6math3d_6common_Vec4C *);
  void (*c_norm)(__pyx_t_7pyorama_6math3d_6common_Vec4C *, __pyx_t_7pyorama_6math3d_6common_Vec4C *);
  void (*c_random)(__pyx_t_7pyorama_6math3d_6common_Vec4C *);
  void (*c_round)(__pyx_t_7pyorama_6math3d_6common_Vec4C *, __pyx_t_7pyorama_6math3d_6common_Vec4C *);
  void (*c_scale_add)(__pyx_t_7pyorama_6math3d_6common_Vec4C *, __pyx_t_7pyorama_6math3d_6common_Vec4C *, struct __pyx_opt_args_7pyorama_6math3d_4vec4_4Vec4_c_scale_add *__pyx_optional_args);
  void (*c_set_data)(__pyx_t_7pyorama_6math3d_6common_Vec4C *, struct __pyx_opt_args_7pyorama_6math3d_4vec4_4Vec4_c_set_data *__pyx_optional_args);
  float (*c_sqr_dist)(__pyx_t_7pyorama_6math3d_6common_Vec4C *, __pyx_t_7pyorama_6math3d_6common_Vec4C *);
  float (*c_sqr_length)(__pyx_t_7pyorama_6math3d_6common_Vec4C *);
  void (*c_sub)(__pyx_t_7pyorama_6math3d_6common_Vec4C *, __pyx_t_7pyorama_6math3d_6common_Vec4C *, __pyx_t_7pyorama_6math3d_6common_Vec4C *);
  void (*c_transform_mat4)(__pyx_t_7pyorama_6math3d_6common_Vec4C *, __pyx_t_7pyorama_6math3d_6common_Vec4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *);
  void (*c_transform_quat)(__pyx_t_7pyorama_6math3d_6common_Vec4C *, __pyx_t_7pyorama_6math3d_6common_Vec4C *, __pyx_t_7pyorama_6math3d_6common_QuatC *);
};
static struct __pyx_vtabstruct_7pyorama_6math3d_4vec4_Vec4 *__pyx_vtabptr_7pyorama_6math3d_4vec4_Vec4;


/* "pyorama/graphics.pxd":150
 * 
 * @cython.final
 * cdef class GraphicsManager:             # <<<<<<<<<<<<<<
 *     cdef SDL_Window *root_window
 *     cdef SDL_GLContext root_context
 */

struct __pyx_vtabstruct_7pyorama_8graphics_GraphicsManager {
  __pyx_t_7pyorama_8graphics_WindowC *(*c_window_get_ptr)(struct __pyx_obj_7pyorama_8graphics_GraphicsManager *, __pyx_t_7pyorama_4core_6handle_Handle);
  __pyx_t_7pyorama_8graphics_Camera3dC *(*c_camera3d_get_ptr)(struct __pyx_obj_7pyorama_8graphics_GraphicsManager *, __pyx_t_7pyorama_4core_6handle_Handle);
  __pyx_t_7pyorama_8graphics_ImageC *(*c_image_get_ptr)(struct __pyx_obj_7pyorama_8graphics_GraphicsManager *, __pyx_t_7pyorama_4core_6handle_Handle);
  __pyx_t_7pyorama_8graphics_SamplerC *(*c_sampler_get_ptr)(struct __pyx_obj_7pyorama_8graphics_GraphicsManager *, __pyx_t_7pyorama_4core_6handle_Handle);
  __pyx_t_7pyorama_8graphics_TextureC *(*c_texture_get_ptr)(struct __pyx_obj_7pyorama_8graphics_GraphicsManager *, __pyx_t_7pyorama_4core_6handle_Handle);
  __pyx_t_7pyorama_8graphics_MeshC *(*c_mesh_get_ptr)(struct __pyx_obj_7pyorama_8graphics_GraphicsManager *, __pyx_t_7pyorama_4core_6handle_Handle);
  __pyx_t_7pyorama_8graphics_ModelC *(*c_model_get_ptr)(struct __pyx_obj_7pyorama_8graphics_GraphicsManager *, __pyx_t_7pyorama_4core_6handle_Handle);
  __pyx_t_7pyorama_8graphics_ModelBatchC *(*c_model_batch_get_ptr)(struct __pyx_obj_7pyorama_8graphics_GraphicsManager *, __pyx_t_7pyorama_4core_6handle_Handle);
  __pyx_t_7pyorama_8graphics_ShaderC *(*c_shader_get_ptr)(struct __pyx_obj_7pyorama_8graphics_GraphicsManager *, __pyx_t_7pyorama_4core_6handle_Handle);
  __pyx_t_7pyorama_8graphics_ProgramC *(*c_program_get_ptr)(struct __pyx_obj_7pyorama_8graphics_GraphicsManager *, __pyx_t_7pyorama_4core_6handle_Handle);
};
static struct __pyx_vtabstruct_7pyorama_8graphics_GraphicsManager *__pyx_vtabptr_7pyorama_8graphics_GraphicsManager;


/* "pyorama/event.pyx":5
 * cdef object INVALID_USER_EVENT_TYPE_ERROR = ValueError("UserEventType: invalid value")
 * 
 * cdef class EventManager:             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */

struct __pyx_vtabstruct_7pyorama_5event_EventManager {
  void (*c_check_user_event_type)(struct __pyx_obj_7pyorama_5event_EventManager *, __pyx_t_7pyorama_5event_EventType);
  PyObject *(*c_parse_window_event)(struct __pyx_obj_7pyorama_5event_EventManager *, SDL_WindowEvent *, double);
  PyObject *(*c_parse_key_down_event)(struct __pyx_obj_7pyorama_5event_EventManager *, SDL_KeyboardEvent *, double);
  PyObject *(*c_parse_key_up_event)(struct __pyx_obj_7pyorama_5event_EventManager *, SDL_KeyboardEvent *, double);
  PyObject *(*c_parse_mouse_button_down_event)(struct __pyx_obj_7pyorama_5event_EventManager *, SDL_MouseButtonEvent *, double);
  PyObject *(*c_parse_mouse_button_up_event)(struct __pyx_obj_7pyorama_5event_EventManager *, SDL_MouseButtonEvent *, double);
  PyObject *(*c_parse_mouse_motion_event)(struct __pyx_obj_7pyorama_5event_EventManager *, SDL_MouseMotionEvent *, double);
  PyObject *(*c_parse_mouse_wheel_event)(struct __pyx_obj_7pyorama_5event_EventManager *, SDL_MouseWheelEvent *, double);
  PyObject *(*c_parse_user_event)(struct __pyx_obj_7pyorama_5event_EventManager *, SDL_UserEvent *, double);
  __pyx_t_7pyorama_5event_ListenerC *(*c_listener_get_ptr)(struct __pyx_obj_7pyorama_5event_EventManager *, __pyx_t_7pyorama_4core_6handle_Handle);
};
static struct __pyx_vtabstruct_7pyorama_5event_EventManager *__pyx_vtabptr_7pyorama_5event_EventManager;
static void __pyx_f_7pyorama_5event_12EventManager_c_check_user_event_type(struct __pyx_obj_7pyorama_5event_EventManager *, __pyx_t_7pyorama_5event_EventType);
static PyObject *__pyx_f_7pyorama_5event_12EventManager_c_parse_window_event(struct __pyx_obj_7pyorama_5event_EventManager *, SDL_WindowEvent *, double);
static PyObject *__pyx_f_7pyorama_5event_12EventManager_c_parse_key_down_event(struct __pyx_obj_7pyorama_5event_EventManager *, SDL_KeyboardEvent *, double);
static PyObject *__pyx_f_7pyorama_5event_12EventManager_c_parse_key_up_event(struct __pyx_obj_7pyorama_5event_EventManager *, SDL_KeyboardEvent *, double);
static PyObject *__pyx_f_7pyorama_5event_12EventManager_c_parse_mouse_button_down_event(struct __pyx_obj_7pyorama_5event_EventManager *, SDL_MouseButtonEvent *, double);
static PyObject *__pyx_f_7pyorama_5event_12EventManager_c_parse_mouse_button_up_event(struct __pyx_obj_7pyorama_5event_EventManager *, SDL_MouseButtonEvent *, double);
static PyObject *__pyx_f_7pyorama_5event_12EventManager_c_parse_mouse_motion_event(struct __pyx_obj_7pyorama_5event_EventManager *, SDL_MouseMotionEvent *, double);
static PyObject *__pyx_f_7pyorama_5event_12EventManager_c_parse_mouse_wheel_event(struct __pyx_obj_7pyorama_5event_EventManager *, SDL_MouseWheelEvent *, double);
static PyObject *__pyx_f_7pyorama_5event_12EventManager_c_parse_user_event(struct __pyx_obj_7pyorama_5event_EventManager *, SDL_UserEvent *, double);
static __pyx_t_7pyorama_5event_ListenerC *__pyx_f_7pyorama_5event_12EventManager_c_listener_get_ptr(struct __pyx_obj_7pyorama_5event_EventManager *, __pyx_t_7pyorama_4core_6handle_Handle);

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* Globals.proto */
static PyObject* __Pyx_Globals(void);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum____pyx_t_7pyorama_4core_4item_ItemType(enum __pyx_t_7pyorama_4core_4item_ItemType value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(enum __pyx_t_7pyorama_5event_EventTypes value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint32_t(uint32_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(enum __pyx_t_7pyorama_5event_WindowEventTypes value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int32_t(int32_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint8_t(uint8_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_SDL_Scancode(SDL_Scancode value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint16_t(uint16_t value);

/* CIntFromPy.proto */
static CYTHON_INLINE uint32_t __Pyx_PyInt_As_uint32_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum __pyx_t_7pyorama_5event_EventTypes __Pyx_PyInt_As_enum____pyx_t_7pyorama_5event_EventTypes(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* VoidPtrImport.proto */
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static void __pyx_f_7pyorama_5event_12EventManager_c_check_user_event_type(struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self, __pyx_t_7pyorama_5event_EventType __pyx_v_event_type); /* proto*/
static __pyx_t_7pyorama_5event_ListenerC *__pyx_f_7pyorama_5event_12EventManager_c_listener_get_ptr(struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self, __pyx_t_7pyorama_4core_6handle_Handle __pyx_v_listener); /* proto*/
static PyObject *__pyx_f_7pyorama_5event_12EventManager_c_parse_window_event(CYTHON_UNUSED struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self, SDL_WindowEvent *__pyx_v_event, double __pyx_v_time_stamp); /* proto*/
static PyObject *__pyx_f_7pyorama_5event_12EventManager_c_parse_key_down_event(CYTHON_UNUSED struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self, SDL_KeyboardEvent *__pyx_v_event, double __pyx_v_time_stamp); /* proto*/
static PyObject *__pyx_f_7pyorama_5event_12EventManager_c_parse_key_up_event(CYTHON_UNUSED struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self, SDL_KeyboardEvent *__pyx_v_event, double __pyx_v_time_stamp); /* proto*/
static PyObject *__pyx_f_7pyorama_5event_12EventManager_c_parse_mouse_button_down_event(CYTHON_UNUSED struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self, SDL_MouseButtonEvent *__pyx_v_event, double __pyx_v_time_stamp); /* proto*/
static PyObject *__pyx_f_7pyorama_5event_12EventManager_c_parse_mouse_button_up_event(CYTHON_UNUSED struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self, SDL_MouseButtonEvent *__pyx_v_event, double __pyx_v_time_stamp); /* proto*/
static PyObject *__pyx_f_7pyorama_5event_12EventManager_c_parse_mouse_motion_event(CYTHON_UNUSED struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self, SDL_MouseMotionEvent *__pyx_v_event, double __pyx_v_time_stamp); /* proto*/
static PyObject *__pyx_f_7pyorama_5event_12EventManager_c_parse_mouse_wheel_event(CYTHON_UNUSED struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self, SDL_MouseWheelEvent *__pyx_v_event, double __pyx_v_time_stamp); /* proto*/
static PyObject *__pyx_f_7pyorama_5event_12EventManager_c_parse_user_event(CYTHON_UNUSED struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self, SDL_UserEvent *__pyx_v_event, double __pyx_v_time_stamp); /* proto*/

/* Module declarations from 'cython' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'pyorama.libs.c' */

/* Module declarations from 'pyorama.core.item_hash_map' */
static PyTypeObject *__pyx_ptype_7pyorama_4core_13item_hash_map_ItemHashMap = 0;

/* Module declarations from 'pyorama.core.handle' */

/* Module declarations from 'pyorama.core.item_vector' */
static PyTypeObject *__pyx_ptype_7pyorama_4core_11item_vector_ItemVector = 0;

/* Module declarations from 'pyorama.core.item_slot_map' */
static PyTypeObject *__pyx_ptype_7pyorama_4core_13item_slot_map_ItemSlotMap = 0;

/* Module declarations from 'pyorama.libs.gl' */

/* Module declarations from 'pyorama.libs.sdl2' */

/* Module declarations from 'libc.math' */

/* Module declarations from 'pyorama.math3d.common' */
static float *__pyx_vp_7pyorama_6math3d_6common_epsilon = 0;
#define __pyx_v_7pyorama_6math3d_6common_epsilon (*__pyx_vp_7pyorama_6math3d_6common_epsilon)

/* Module declarations from 'pyorama.math3d.mat4' */
static PyTypeObject *__pyx_ptype_7pyorama_6math3d_4mat4_Mat4 = 0;

/* Module declarations from 'pyorama.math3d.mat3' */
static PyTypeObject *__pyx_ptype_7pyorama_6math3d_4mat3_Mat3 = 0;

/* Module declarations from 'pyorama.math3d.quat' */
static PyTypeObject *__pyx_ptype_7pyorama_6math3d_4quat_Quat = 0;

/* Module declarations from 'pyorama.math3d.vec3' */
static PyTypeObject *__pyx_ptype_7pyorama_6math3d_4vec3_Vec3 = 0;

/* Module declarations from 'pyorama.math3d.mat2' */
static PyTypeObject *__pyx_ptype_7pyorama_6math3d_4mat2_Mat2 = 0;

/* Module declarations from 'pyorama.math3d.vec2' */
static PyTypeObject *__pyx_ptype_7pyorama_6math3d_4vec2_Vec2 = 0;

/* Module declarations from 'pyorama.math3d.vec4' */
static PyTypeObject *__pyx_ptype_7pyorama_6math3d_4vec4_Vec4 = 0;

/* Module declarations from 'pyorama.graphics' */
static PyTypeObject *__pyx_ptype_7pyorama_8graphics_GraphicsManager = 0;

/* Module declarations from 'pyorama.core.item' */

/* Module declarations from 'pyorama.keyboard' */

/* Module declarations from 'pyorama.event' */
static PyTypeObject *__pyx_ptype_7pyorama_5event_EventManager = 0;
static PyTypeObject *__pyx_ptype___Pyx_EnumMeta = 0;
static PyObject *__pyx_v_7pyorama_5event_INVALID_USER_EVENT_TYPE_ERROR = 0;
static PyObject *__Pyx_OrderedDict = 0;
static PyObject *__Pyx_EnumBase = 0;
static PyObject *__Pyx_globals = 0;
static PyObject *__pyx_unpickle___Pyx_EnumMeta__set_state(struct __pyx_obj___Pyx_EnumMeta *, PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "pyorama.event"
extern int __pyx_module_is_main_pyorama__event;
int __pyx_module_is_main_pyorama__event = 0;

/* Implementation of 'pyorama.event' */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_TypeError;
static const char __pyx_k_i[] = "i";
static const char __pyx_k_v[] = "v";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_cls[] = "cls";
static const char __pyx_k_dct[] = "dct";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_res[] = "res";
static const char __pyx_k_s_s[] = "%s.%s";
static const char __pyx_k_str[] = "__str__";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_enum[] = "enum";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_repr[] = "__repr__";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_type[] = "type";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_event[] = "event";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_s_s_d[] = "<%s.%s: %d>";
static const char __pyx_k_state[] = "state";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_which[] = "which";
static const char __pyx_k_width[] = "width";
static const char __pyx_k_button[] = "button";
static const char __pyx_k_clicks[] = "clicks";
static const char __pyx_k_events[] = "events";
static const char __pyx_k_height[] = "height";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_repeat[] = "repeat";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_IntEnum[] = "IntEnum";
static const char __pyx_k_members[] = "__members__";
static const char __pyx_k_parents[] = "parents";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_EnumBase[] = "EnumBase";
static const char __pyx_k_EnumType[] = "EnumType";
static const char __pyx_k_callback[] = "callback";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_key_code[] = "key_code";
static const char __pyx_k_listener[] = "listener";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_sub_type[] = "sub_type";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_direction[] = "direction";
static const char __pyx_k_listeners[] = "listeners";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_modifiers[] = "modifiers";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_scan_code[] = "scan_code";
static const char __pyx_k_timestamp[] = "timestamp";
static const char __pyx_k_user_data[] = "user_data";
static const char __pyx_k_window_id[] = "window_id";
static const char __pyx_k_EventTypes[] = "EventTypes";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_event_data[] = "event_data";
static const char __pyx_k_event_type[] = "event_type";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_relative_x[] = "relative_x";
static const char __pyx_k_relative_y[] = "relative_y";
static const char __pyx_k_time_stamp[] = "time_stamp";
static const char __pyx_k_OrderedDict[] = "OrderedDict";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_EventManager[] = "EventManager";
static const char __pyx_k_Pyx_EnumBase[] = "__Pyx_EnumBase";
static const char __pyx_k_listener_ptr[] = "listener_ptr";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_listener_free[] = "listener_free";
static const char __pyx_k_listener_init[] = "listener_init";
static const char __pyx_k_pyorama_event[] = "pyorama.event";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_EVENT_TYPE_NONE[] = "EVENT_TYPE_NONE";
static const char __pyx_k_EVENT_TYPE_USER[] = "EVENT_TYPE_USER";
static const char __pyx_k_listener_create[] = "listener_create";
static const char __pyx_k_listener_delete[] = "listener_delete";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_WindowEventTypes[] = "WindowEventTypes";
static const char __pyx_k_EVENT_TYPE_KEY_UP[] = "EVENT_TYPE_KEY_UP";
static const char __pyx_k_EVENT_TYPE_WINDOW[] = "EVENT_TYPE_WINDOW";
static const char __pyx_k_pyorama_event_pyx[] = "pyorama/event.pyx";
static const char __pyx_k_Pyx_EnumBase___new[] = "__Pyx_EnumBase.__new__";
static const char __pyx_k_Pyx_EnumBase___str[] = "__Pyx_EnumBase.__str__";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_EVENT_TYPE_KEY_DOWN[] = "EVENT_TYPE_KEY_DOWN";
static const char __pyx_k_EventManager_update[] = "EventManager.update";
static const char __pyx_k_Pyx_EnumBase___repr[] = "__Pyx_EnumBase.__repr__";
static const char __pyx_k_Unknown_enum_value_s[] = "Unknown enum value: '%s'";
static const char __pyx_k_user_event_type_emit[] = "user_event_type_emit";
static const char __pyx_k_EVENT_TYPE_MOUSE_WHEEL[] = "EVENT_TYPE_MOUSE_WHEEL";
static const char __pyx_k_user_event_type_create[] = "user_event_type_create";
static const char __pyx_k_user_event_type_delete[] = "user_event_type_delete";
static const char __pyx_k_EVENT_TYPE_MOUSE_MOTION[] = "EVENT_TYPE_MOUSE_MOTION";
static const char __pyx_k_WINDOW_EVENT_TYPE_CLOSE[] = "WINDOW_EVENT_TYPE_CLOSE";
static const char __pyx_k_WINDOW_EVENT_TYPE_ENTER[] = "WINDOW_EVENT_TYPE_ENTER";
static const char __pyx_k_WINDOW_EVENT_TYPE_LEAVE[] = "WINDOW_EVENT_TYPE_LEAVE";
static const char __pyx_k_WINDOW_EVENT_TYPE_MOVED[] = "WINDOW_EVENT_TYPE_MOVED";
static const char __pyx_k_WINDOW_EVENT_TYPE_SHOWN[] = "WINDOW_EVENT_TYPE_SHOWN";
static const char __pyx_k_WINDOW_EVENT_TYPE_HIDDEN[] = "WINDOW_EVENT_TYPE_HIDDEN";
static const char __pyx_k_WINDOW_EVENT_TYPE_CHANGED[] = "WINDOW_EVENT_TYPE_CHANGED";
static const char __pyx_k_WINDOW_EVENT_TYPE_EXPOSED[] = "WINDOW_EVENT_TYPE_EXPOSED";
static const char __pyx_k_WINDOW_EVENT_TYPE_RESIZED[] = "WINDOW_EVENT_TYPE_RESIZED";
static const char __pyx_k_EVENT_TYPE_MOUSE_BUTTON_UP[] = "EVENT_TYPE_MOUSE_BUTTON_UP";
static const char __pyx_k_EventManager_listener_free[] = "EventManager.listener_free";
static const char __pyx_k_EventManager_listener_init[] = "EventManager.listener_init";
static const char __pyx_k_WINDOW_EVENT_TYPE_HIT_TEST[] = "WINDOW_EVENT_TYPE_HIT_TEST";
static const char __pyx_k_WINDOW_EVENT_TYPE_RESTORED[] = "WINDOW_EVENT_TYPE_RESTORED";
static const char __pyx_k_UserEventType_invalid_value[] = "UserEventType: invalid value";
static const char __pyx_k_WINDOW_EVENT_TYPE_MAXIMIZED[] = "WINDOW_EVENT_TYPE_MAXIMIZED";
static const char __pyx_k_WINDOW_EVENT_TYPE_MINIMIZED[] = "WINDOW_EVENT_TYPE_MINIMIZED";
static const char __pyx_k_pyx_unpickle___Pyx_EnumMeta[] = "__pyx_unpickle___Pyx_EnumMeta";
static const char __pyx_k_EVENT_TYPE_MOUSE_BUTTON_DOWN[] = "EVENT_TYPE_MOUSE_BUTTON_DOWN";
static const char __pyx_k_EventManager___reduce_cython[] = "EventManager.__reduce_cython__";
static const char __pyx_k_EventManager_listener_create[] = "EventManager.listener_create";
static const char __pyx_k_EventManager_listener_delete[] = "EventManager.listener_delete";
static const char __pyx_k_WINDOW_EVENT_TYPE_FOCUS_LOST[] = "WINDOW_EVENT_TYPE_FOCUS_LOST";
static const char __pyx_k_WINDOW_EVENT_TYPE_TAKE_FOCUS[] = "WINDOW_EVENT_TYPE_TAKE_FOCUS";
static const char __pyx_k_EventManager___setstate_cython[] = "EventManager.__setstate_cython__";
static const char __pyx_k_WINDOW_EVENT_TYPE_FOCUS_GAINED[] = "WINDOW_EVENT_TYPE_FOCUS_GAINED";
static const char __pyx_k_EventManager_user_event_type_cre[] = "EventManager.user_event_type_create";
static const char __pyx_k_EventManager_user_event_type_del[] = "EventManager.user_event_type_delete";
static const char __pyx_k_EventManager_user_event_type_emi[] = "EventManager.user_event_type_emit";
static const char __pyx_k_Incompatible_checksums_s_vs_0xd4[] = "Incompatible checksums (%s vs 0xd41d8cd = ())";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static PyObject *__pyx_n_s_EVENT_TYPE_KEY_DOWN;
static PyObject *__pyx_n_s_EVENT_TYPE_KEY_UP;
static PyObject *__pyx_n_s_EVENT_TYPE_MOUSE_BUTTON_DOWN;
static PyObject *__pyx_n_s_EVENT_TYPE_MOUSE_BUTTON_UP;
static PyObject *__pyx_n_s_EVENT_TYPE_MOUSE_MOTION;
static PyObject *__pyx_n_s_EVENT_TYPE_MOUSE_WHEEL;
static PyObject *__pyx_n_s_EVENT_TYPE_NONE;
static PyObject *__pyx_n_s_EVENT_TYPE_USER;
static PyObject *__pyx_n_s_EVENT_TYPE_WINDOW;
static PyObject *__pyx_n_s_EnumBase;
static PyObject *__pyx_n_s_EnumType;
static PyObject *__pyx_n_s_EventManager;
static PyObject *__pyx_n_s_EventManager___reduce_cython;
static PyObject *__pyx_n_s_EventManager___setstate_cython;
static PyObject *__pyx_n_s_EventManager_listener_create;
static PyObject *__pyx_n_s_EventManager_listener_delete;
static PyObject *__pyx_n_s_EventManager_listener_free;
static PyObject *__pyx_n_s_EventManager_listener_init;
static PyObject *__pyx_n_s_EventManager_update;
static PyObject *__pyx_n_s_EventManager_user_event_type_cre;
static PyObject *__pyx_n_s_EventManager_user_event_type_del;
static PyObject *__pyx_n_s_EventManager_user_event_type_emi;
static PyObject *__pyx_n_s_EventTypes;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xd4;
static PyObject *__pyx_n_s_IntEnum;
static PyObject *__pyx_n_s_OrderedDict;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_Pyx_EnumBase;
static PyObject *__pyx_n_s_Pyx_EnumBase___new;
static PyObject *__pyx_n_s_Pyx_EnumBase___repr;
static PyObject *__pyx_n_s_Pyx_EnumBase___str;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unknown_enum_value_s;
static PyObject *__pyx_kp_u_UserEventType_invalid_value;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_WINDOW_EVENT_TYPE_CHANGED;
static PyObject *__pyx_n_s_WINDOW_EVENT_TYPE_CLOSE;
static PyObject *__pyx_n_s_WINDOW_EVENT_TYPE_ENTER;
static PyObject *__pyx_n_s_WINDOW_EVENT_TYPE_EXPOSED;
static PyObject *__pyx_n_s_WINDOW_EVENT_TYPE_FOCUS_GAINED;
static PyObject *__pyx_n_s_WINDOW_EVENT_TYPE_FOCUS_LOST;
static PyObject *__pyx_n_s_WINDOW_EVENT_TYPE_HIDDEN;
static PyObject *__pyx_n_s_WINDOW_EVENT_TYPE_HIT_TEST;
static PyObject *__pyx_n_s_WINDOW_EVENT_TYPE_LEAVE;
static PyObject *__pyx_n_s_WINDOW_EVENT_TYPE_MAXIMIZED;
static PyObject *__pyx_n_s_WINDOW_EVENT_TYPE_MINIMIZED;
static PyObject *__pyx_n_s_WINDOW_EVENT_TYPE_MOVED;
static PyObject *__pyx_n_s_WINDOW_EVENT_TYPE_RESIZED;
static PyObject *__pyx_n_s_WINDOW_EVENT_TYPE_RESTORED;
static PyObject *__pyx_n_s_WINDOW_EVENT_TYPE_SHOWN;
static PyObject *__pyx_n_s_WINDOW_EVENT_TYPE_TAKE_FOCUS;
static PyObject *__pyx_n_s_WindowEventTypes;
static PyObject *__pyx_n_u_button;
static PyObject *__pyx_n_s_callback;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_u_clicks;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_cls;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_n_u_data;
static PyObject *__pyx_n_s_dct;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_u_direction;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_enum;
static PyObject *__pyx_n_s_event;
static PyObject *__pyx_n_s_event_data;
static PyObject *__pyx_n_s_event_type;
static PyObject *__pyx_n_s_events;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_u_height;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_u_key_code;
static PyObject *__pyx_n_s_listener;
static PyObject *__pyx_n_s_listener_create;
static PyObject *__pyx_n_s_listener_delete;
static PyObject *__pyx_n_s_listener_free;
static PyObject *__pyx_n_s_listener_init;
static PyObject *__pyx_n_s_listener_ptr;
static PyObject *__pyx_n_s_listeners;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_members;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_u_modifiers;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_parents;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_pyorama_event;
static PyObject *__pyx_kp_s_pyorama_event_pyx;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle___Pyx_EnumMeta;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_u_relative_x;
static PyObject *__pyx_n_u_relative_y;
static PyObject *__pyx_n_u_repeat;
static PyObject *__pyx_n_s_repr;
static PyObject *__pyx_n_s_res;
static PyObject *__pyx_kp_s_s_s;
static PyObject *__pyx_kp_s_s_s_d;
static PyObject *__pyx_n_u_scan_code;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_u_state;
static PyObject *__pyx_n_s_str;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_u_sub_type;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_n_s_time_stamp;
static PyObject *__pyx_n_u_time_stamp;
static PyObject *__pyx_n_u_timestamp;
static PyObject *__pyx_n_u_type;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_user_data;
static PyObject *__pyx_n_s_user_event_type_create;
static PyObject *__pyx_n_s_user_event_type_delete;
static PyObject *__pyx_n_s_user_event_type_emit;
static PyObject *__pyx_n_s_v;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_values;
static PyObject *__pyx_n_u_which;
static PyObject *__pyx_n_u_width;
static PyObject *__pyx_n_u_window_id;
static PyObject *__pyx_n_u_x;
static PyObject *__pyx_n_u_y;
static int __pyx_pf_7pyorama_5event_12EventManager___cinit__(struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self); /* proto */
static void __pyx_pf_7pyorama_5event_12EventManager_2__dealloc__(struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pyorama_5event_12EventManager_4user_event_type_create(struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pyorama_5event_12EventManager_6user_event_type_delete(struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self, __pyx_t_7pyorama_5event_EventType __pyx_v_event_type); /* proto */
static PyObject *__pyx_pf_7pyorama_5event_12EventManager_8user_event_type_emit(struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self, __pyx_t_7pyorama_5event_EventType __pyx_v_event_type, PyObject *__pyx_v_event_data); /* proto */
static PyObject *__pyx_pf_7pyorama_5event_12EventManager_10listener_create(struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pyorama_5event_12EventManager_12listener_delete(struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self, __pyx_t_7pyorama_4core_6handle_Handle __pyx_v_listener); /* proto */
static PyObject *__pyx_pf_7pyorama_5event_12EventManager_14listener_init(struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self, __pyx_t_7pyorama_4core_6handle_Handle __pyx_v_listener, enum __pyx_t_7pyorama_5event_EventTypes __pyx_v_event_type, PyObject *__pyx_v_callback, PyObject *__pyx_v_user_data); /* proto */
static PyObject *__pyx_pf_7pyorama_5event_12EventManager_16listener_free(struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self, __pyx_t_7pyorama_4core_6handle_Handle __pyx_v_listener); /* proto */
static PyObject *__pyx_pf_7pyorama_5event_12EventManager_18update(struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pyorama_5event_12EventManager_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pyorama_5event_12EventManager_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8EnumBase_14__Pyx_EnumMeta___init__(struct __pyx_obj___Pyx_EnumMeta *__pyx_v_cls, PyObject *__pyx_v_name, PyObject *__pyx_v_parents, PyObject *__pyx_v_dct); /* proto */
static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumMeta_2__iter__(struct __pyx_obj___Pyx_EnumMeta *__pyx_v_cls); /* proto */
static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumMeta_4__getitem__(struct __pyx_obj___Pyx_EnumMeta *__pyx_v_cls, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumMeta_6__reduce_cython__(struct __pyx_obj___Pyx_EnumMeta *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumMeta_8__setstate_cython__(struct __pyx_obj___Pyx_EnumMeta *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumBase___new__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cls, PyObject *__pyx_v_value, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumBase_2__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumBase_4__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8EnumBase___pyx_unpickle___Pyx_EnumMeta(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_7pyorama_5event_EventManager(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new___Pyx_EnumMeta(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_222419149;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_codeobj__5;
static PyObject *__pyx_codeobj__7;
static PyObject *__pyx_codeobj__9;
static PyObject *__pyx_codeobj__11;
static PyObject *__pyx_codeobj__13;
static PyObject *__pyx_codeobj__15;
static PyObject *__pyx_codeobj__17;
static PyObject *__pyx_codeobj__19;
static PyObject *__pyx_codeobj__21;
static PyObject *__pyx_codeobj__23;
static PyObject *__pyx_codeobj__25;
static PyObject *__pyx_codeobj__28;
static PyObject *__pyx_codeobj__30;
static PyObject *__pyx_codeobj__32;
/* Late includes */

/* "pyorama/event.pyx":7
 * cdef class EventManager:
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.listeners = ItemSlotMap(sizeof(ListenerC), ITEM_TYPE_LISTENER)
 *         self.listener_map = {
 */

/* Python wrapper */
static int __pyx_pw_7pyorama_5event_12EventManager_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7pyorama_5event_12EventManager_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_7pyorama_5event_12EventManager___cinit__(((struct __pyx_obj_7pyorama_5event_EventManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pyorama_5event_12EventManager___cinit__(struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyorama/event.pyx":8
 * 
 *     def __cinit__(self):
 *         self.listeners = ItemSlotMap(sizeof(ListenerC), ITEM_TYPE_LISTENER)             # <<<<<<<<<<<<<<
 *         self.listener_map = {
 *             EVENT_TYPE_WINDOW: ItemVector(sizeof(Handle)),
 */
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((sizeof(__pyx_t_7pyorama_5event_ListenerC))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_4core_4item_ItemType(__pyx_e_7pyorama_4core_4item_ITEM_TYPE_LISTENER); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7pyorama_4core_13item_slot_map_ItemSlotMap), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->listeners);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->listeners));
  __pyx_v_self->listeners = ((struct __pyx_obj_7pyorama_4core_13item_slot_map_ItemSlotMap *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyorama/event.pyx":10
 *         self.listeners = ItemSlotMap(sizeof(ListenerC), ITEM_TYPE_LISTENER)
 *         self.listener_map = {
 *             EVENT_TYPE_WINDOW: ItemVector(sizeof(Handle)),             # <<<<<<<<<<<<<<
 *             EVENT_TYPE_KEY_DOWN: ItemVector(sizeof(Handle)),
 *             EVENT_TYPE_KEY_UP: ItemVector(sizeof(Handle)),
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_e_7pyorama_5event_EVENT_TYPE_WINDOW); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((sizeof(__pyx_t_7pyorama_4core_6handle_Handle))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7pyorama_4core_11item_vector_ItemVector), __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_t_3, __pyx_t_4) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyorama/event.pyx":11
 *         self.listener_map = {
 *             EVENT_TYPE_WINDOW: ItemVector(sizeof(Handle)),
 *             EVENT_TYPE_KEY_DOWN: ItemVector(sizeof(Handle)),             # <<<<<<<<<<<<<<
 *             EVENT_TYPE_KEY_UP: ItemVector(sizeof(Handle)),
 *             EVENT_TYPE_MOUSE_BUTTON_DOWN: ItemVector(sizeof(Handle)),
 */
  __pyx_t_4 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_e_7pyorama_5event_EVENT_TYPE_KEY_DOWN); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(__pyx_t_7pyorama_4core_6handle_Handle))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7pyorama_4core_11item_vector_ItemVector), __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_t_4, __pyx_t_1) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyorama/event.pyx":12
 *             EVENT_TYPE_WINDOW: ItemVector(sizeof(Handle)),
 *             EVENT_TYPE_KEY_DOWN: ItemVector(sizeof(Handle)),
 *             EVENT_TYPE_KEY_UP: ItemVector(sizeof(Handle)),             # <<<<<<<<<<<<<<
 *             EVENT_TYPE_MOUSE_BUTTON_DOWN: ItemVector(sizeof(Handle)),
 *             EVENT_TYPE_MOUSE_BUTTON_UP: ItemVector(sizeof(Handle)),
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_e_7pyorama_5event_EVENT_TYPE_KEY_UP); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_FromSize_t((sizeof(__pyx_t_7pyorama_4core_6handle_Handle))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7pyorama_4core_11item_vector_ItemVector), __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_t_1, __pyx_t_3) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pyorama/event.pyx":13
 *             EVENT_TYPE_KEY_DOWN: ItemVector(sizeof(Handle)),
 *             EVENT_TYPE_KEY_UP: ItemVector(sizeof(Handle)),
 *             EVENT_TYPE_MOUSE_BUTTON_DOWN: ItemVector(sizeof(Handle)),             # <<<<<<<<<<<<<<
 *             EVENT_TYPE_MOUSE_BUTTON_UP: ItemVector(sizeof(Handle)),
 *             EVENT_TYPE_MOUSE_MOTION: ItemVector(sizeof(Handle)),
 */
  __pyx_t_3 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_e_7pyorama_5event_EVENT_TYPE_MOUSE_BUTTON_DOWN); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((sizeof(__pyx_t_7pyorama_4core_6handle_Handle))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7pyorama_4core_11item_vector_ItemVector), __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_t_3, __pyx_t_4) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyorama/event.pyx":14
 *             EVENT_TYPE_KEY_UP: ItemVector(sizeof(Handle)),
 *             EVENT_TYPE_MOUSE_BUTTON_DOWN: ItemVector(sizeof(Handle)),
 *             EVENT_TYPE_MOUSE_BUTTON_UP: ItemVector(sizeof(Handle)),             # <<<<<<<<<<<<<<
 *             EVENT_TYPE_MOUSE_MOTION: ItemVector(sizeof(Handle)),
 *             EVENT_TYPE_MOUSE_WHEEL: ItemVector(sizeof(Handle)),
 */
  __pyx_t_4 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_e_7pyorama_5event_EVENT_TYPE_MOUSE_BUTTON_UP); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(__pyx_t_7pyorama_4core_6handle_Handle))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7pyorama_4core_11item_vector_ItemVector), __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_t_4, __pyx_t_1) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyorama/event.pyx":15
 *             EVENT_TYPE_MOUSE_BUTTON_DOWN: ItemVector(sizeof(Handle)),
 *             EVENT_TYPE_MOUSE_BUTTON_UP: ItemVector(sizeof(Handle)),
 *             EVENT_TYPE_MOUSE_MOTION: ItemVector(sizeof(Handle)),             # <<<<<<<<<<<<<<
 *             EVENT_TYPE_MOUSE_WHEEL: ItemVector(sizeof(Handle)),
 *         }
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_e_7pyorama_5event_EVENT_TYPE_MOUSE_MOTION); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_FromSize_t((sizeof(__pyx_t_7pyorama_4core_6handle_Handle))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7pyorama_4core_11item_vector_ItemVector), __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_t_1, __pyx_t_3) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pyorama/event.pyx":16
 *             EVENT_TYPE_MOUSE_BUTTON_UP: ItemVector(sizeof(Handle)),
 *             EVENT_TYPE_MOUSE_MOTION: ItemVector(sizeof(Handle)),
 *             EVENT_TYPE_MOUSE_WHEEL: ItemVector(sizeof(Handle)),             # <<<<<<<<<<<<<<
 *         }
 *         self.num_user_event_types = 0
 */
  __pyx_t_3 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_e_7pyorama_5event_EVENT_TYPE_MOUSE_WHEEL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((sizeof(__pyx_t_7pyorama_4core_6handle_Handle))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7pyorama_4core_11item_vector_ItemVector), __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_t_3, __pyx_t_4) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyorama/event.pyx":9
 *     def __cinit__(self):
 *         self.listeners = ItemSlotMap(sizeof(ListenerC), ITEM_TYPE_LISTENER)
 *         self.listener_map = {             # <<<<<<<<<<<<<<
 *             EVENT_TYPE_WINDOW: ItemVector(sizeof(Handle)),
 *             EVENT_TYPE_KEY_DOWN: ItemVector(sizeof(Handle)),
 */
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->listener_map);
  __Pyx_DECREF(__pyx_v_self->listener_map);
  __pyx_v_self->listener_map = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyorama/event.pyx":18
 *             EVENT_TYPE_MOUSE_WHEEL: ItemVector(sizeof(Handle)),
 *         }
 *         self.num_user_event_types = 0             # <<<<<<<<<<<<<<
 *         self.free_user_event_types = ItemVector(sizeof(EventType))
 * 
 */
  __pyx_v_self->num_user_event_types = 0;

  /* "pyorama/event.pyx":19
 *         }
 *         self.num_user_event_types = 0
 *         self.free_user_event_types = ItemVector(sizeof(EventType))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_2 = __Pyx_PyInt_FromSize_t((sizeof(__pyx_t_7pyorama_5event_EventType))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7pyorama_4core_11item_vector_ItemVector), __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->free_user_event_types);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->free_user_event_types));
  __pyx_v_self->free_user_event_types = ((struct __pyx_obj_7pyorama_4core_11item_vector_ItemVector *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pyorama/event.pyx":7
 * cdef class EventManager:
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.listeners = ItemSlotMap(sizeof(ListenerC), ITEM_TYPE_LISTENER)
 *         self.listener_map = {
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyorama.event.EventManager.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/event.pyx":21
 *         self.free_user_event_types = ItemVector(sizeof(EventType))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         self.listener_map = None
 *         self.events = None
 */

/* Python wrapper */
static void __pyx_pw_7pyorama_5event_12EventManager_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7pyorama_5event_12EventManager_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7pyorama_5event_12EventManager_2__dealloc__(((struct __pyx_obj_7pyorama_5event_EventManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7pyorama_5event_12EventManager_2__dealloc__(struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pyorama/event.pyx":22
 * 
 *     def __dealloc__(self):
 *         self.listener_map = None             # <<<<<<<<<<<<<<
 *         self.events = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->listener_map);
  __Pyx_DECREF(__pyx_v_self->listener_map);
  __pyx_v_self->listener_map = ((PyObject*)Py_None);

  /* "pyorama/event.pyx":23
 *     def __dealloc__(self):
 *         self.listener_map = None
 *         self.events = None             # <<<<<<<<<<<<<<
 * 
 *     def user_event_type_create(self):
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_events, Py_None) < 0) __PYX_ERR(0, 23, __pyx_L1_error)

  /* "pyorama/event.pyx":21
 *         self.free_user_event_types = ItemVector(sizeof(EventType))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         self.listener_map = None
 *         self.events = None
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("pyorama.event.EventManager.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "pyorama/event.pyx":25
 *         self.events = None
 * 
 *     def user_event_type_create(self):             # <<<<<<<<<<<<<<
 *         cdef EventType event_type
 *         if self.free_user_event_types.num_items > 0:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_5event_12EventManager_5user_event_type_create(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_5event_12EventManager_5user_event_type_create = {"user_event_type_create", (PyCFunction)__pyx_pw_7pyorama_5event_12EventManager_5user_event_type_create, METH_NOARGS, 0};
static PyObject *__pyx_pw_7pyorama_5event_12EventManager_5user_event_type_create(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("user_event_type_create (wrapper)", 0);
  __pyx_r = __pyx_pf_7pyorama_5event_12EventManager_4user_event_type_create(((struct __pyx_obj_7pyorama_5event_EventManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_5event_12EventManager_4user_event_type_create(struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self) {
  __pyx_t_7pyorama_5event_EventType __pyx_v_event_type;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("user_event_type_create", 0);

  /* "pyorama/event.pyx":27
 *     def user_event_type_create(self):
 *         cdef EventType event_type
 *         if self.free_user_event_types.num_items > 0:             # <<<<<<<<<<<<<<
 *             self.free_user_event_types.c_pop(&event_type)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->free_user_event_types->num_items > 0) != 0);
  if (__pyx_t_1) {

    /* "pyorama/event.pyx":28
 *         cdef EventType event_type
 *         if self.free_user_event_types.num_items > 0:
 *             self.free_user_event_types.c_pop(&event_type)             # <<<<<<<<<<<<<<
 *         else:
 *             event_type = EVENT_TYPE_USER + self.num_user_event_types
 */
    ((struct __pyx_vtabstruct_7pyorama_4core_11item_vector_ItemVector *)__pyx_v_self->free_user_event_types->__pyx_vtab)->c_pop(__pyx_v_self->free_user_event_types, (&__pyx_v_event_type)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 28, __pyx_L1_error)

    /* "pyorama/event.pyx":27
 *     def user_event_type_create(self):
 *         cdef EventType event_type
 *         if self.free_user_event_types.num_items > 0:             # <<<<<<<<<<<<<<
 *             self.free_user_event_types.c_pop(&event_type)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pyorama/event.pyx":30
 *             self.free_user_event_types.c_pop(&event_type)
 *         else:
 *             event_type = EVENT_TYPE_USER + self.num_user_event_types             # <<<<<<<<<<<<<<
 *         self.listener_map[event_type] = ItemVector(sizeof(Handle))
 *         self.num_user_event_types += 1
 */
  /*else*/ {
    __pyx_v_event_type = (__pyx_e_7pyorama_5event_EVENT_TYPE_USER + __pyx_v_self->num_user_event_types);
  }
  __pyx_L3:;

  /* "pyorama/event.pyx":31
 *         else:
 *             event_type = EVENT_TYPE_USER + self.num_user_event_types
 *         self.listener_map[event_type] = ItemVector(sizeof(Handle))             # <<<<<<<<<<<<<<
 *         self.num_user_event_types += 1
 *         return event_type
 */
  __pyx_t_2 = __Pyx_PyInt_FromSize_t((sizeof(__pyx_t_7pyorama_4core_6handle_Handle))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7pyorama_4core_11item_vector_ItemVector), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__pyx_v_self->listener_map == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 31, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_event_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyDict_SetItem(__pyx_v_self->listener_map, __pyx_t_2, __pyx_t_3) < 0)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pyorama/event.pyx":32
 *             event_type = EVENT_TYPE_USER + self.num_user_event_types
 *         self.listener_map[event_type] = ItemVector(sizeof(Handle))
 *         self.num_user_event_types += 1             # <<<<<<<<<<<<<<
 *         return event_type
 * 
 */
  __pyx_v_self->num_user_event_types = (__pyx_v_self->num_user_event_types + 1);

  /* "pyorama/event.pyx":33
 *         self.listener_map[event_type] = ItemVector(sizeof(Handle))
 *         self.num_user_event_types += 1
 *         return event_type             # <<<<<<<<<<<<<<
 * 
 *     def user_event_type_delete(self, EventType event_type):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_event_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pyorama/event.pyx":25
 *         self.events = None
 * 
 *     def user_event_type_create(self):             # <<<<<<<<<<<<<<
 *         cdef EventType event_type
 *         if self.free_user_event_types.num_items > 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyorama.event.EventManager.user_event_type_create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/event.pyx":35
 *         return event_type
 * 
 *     def user_event_type_delete(self, EventType event_type):             # <<<<<<<<<<<<<<
 *         self.c_check_user_event_type(event_type)
 *         del self.listener_map[event_type]
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_5event_12EventManager_7user_event_type_delete(PyObject *__pyx_v_self, PyObject *__pyx_arg_event_type); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_5event_12EventManager_7user_event_type_delete = {"user_event_type_delete", (PyCFunction)__pyx_pw_7pyorama_5event_12EventManager_7user_event_type_delete, METH_O, 0};
static PyObject *__pyx_pw_7pyorama_5event_12EventManager_7user_event_type_delete(PyObject *__pyx_v_self, PyObject *__pyx_arg_event_type) {
  __pyx_t_7pyorama_5event_EventType __pyx_v_event_type;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("user_event_type_delete (wrapper)", 0);
  assert(__pyx_arg_event_type); {
    __pyx_v_event_type = __Pyx_PyInt_As_uint32_t(__pyx_arg_event_type); if (unlikely((__pyx_v_event_type == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 35, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.event.EventManager.user_event_type_delete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pyorama_5event_12EventManager_6user_event_type_delete(((struct __pyx_obj_7pyorama_5event_EventManager *)__pyx_v_self), ((__pyx_t_7pyorama_5event_EventType)__pyx_v_event_type));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_5event_12EventManager_6user_event_type_delete(struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self, __pyx_t_7pyorama_5event_EventType __pyx_v_event_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("user_event_type_delete", 0);

  /* "pyorama/event.pyx":36
 * 
 *     def user_event_type_delete(self, EventType event_type):
 *         self.c_check_user_event_type(event_type)             # <<<<<<<<<<<<<<
 *         del self.listener_map[event_type]
 *         self.free_user_event_types.c_push(&event_type)
 */
  __pyx_f_7pyorama_5event_12EventManager_c_check_user_event_type(__pyx_v_self, __pyx_v_event_type); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 36, __pyx_L1_error)

  /* "pyorama/event.pyx":37
 *     def user_event_type_delete(self, EventType event_type):
 *         self.c_check_user_event_type(event_type)
 *         del self.listener_map[event_type]             # <<<<<<<<<<<<<<
 *         self.free_user_event_types.c_push(&event_type)
 *         self.num_user_event_types -= 1
 */
  if (unlikely(__pyx_v_self->listener_map == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 37, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_event_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_DelItem(__pyx_v_self->listener_map, __pyx_t_1) < 0)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyorama/event.pyx":38
 *         self.c_check_user_event_type(event_type)
 *         del self.listener_map[event_type]
 *         self.free_user_event_types.c_push(&event_type)             # <<<<<<<<<<<<<<
 *         self.num_user_event_types -= 1
 * 
 */
  ((struct __pyx_vtabstruct_7pyorama_4core_11item_vector_ItemVector *)__pyx_v_self->free_user_event_types->__pyx_vtab)->c_push(__pyx_v_self->free_user_event_types, (&__pyx_v_event_type)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 38, __pyx_L1_error)

  /* "pyorama/event.pyx":39
 *         del self.listener_map[event_type]
 *         self.free_user_event_types.c_push(&event_type)
 *         self.num_user_event_types -= 1             # <<<<<<<<<<<<<<
 * 
 *     cdef void c_check_user_event_type(self, EventType event_type) except *:
 */
  __pyx_v_self->num_user_event_types = (__pyx_v_self->num_user_event_types - 1);

  /* "pyorama/event.pyx":35
 *         return event_type
 * 
 *     def user_event_type_delete(self, EventType event_type):             # <<<<<<<<<<<<<<
 *         self.c_check_user_event_type(event_type)
 *         del self.listener_map[event_type]
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyorama.event.EventManager.user_event_type_delete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/event.pyx":41
 *         self.num_user_event_types -= 1
 * 
 *     cdef void c_check_user_event_type(self, EventType event_type) except *:             # <<<<<<<<<<<<<<
 *         if event_type not in self.listener_map:
 *             raise INVALID_USER_EVENT_TYPE_ERROR
 */

static void __pyx_f_7pyorama_5event_12EventManager_c_check_user_event_type(struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self, __pyx_t_7pyorama_5event_EventType __pyx_v_event_type) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("c_check_user_event_type", 0);

  /* "pyorama/event.pyx":42
 * 
 *     cdef void c_check_user_event_type(self, EventType event_type) except *:
 *         if event_type not in self.listener_map:             # <<<<<<<<<<<<<<
 *             raise INVALID_USER_EVENT_TYPE_ERROR
 *         elif event_type < EVENT_TYPE_USER:
 */
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_event_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_self->listener_map == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 42, __pyx_L1_error)
  }
  __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_t_1, __pyx_v_self->listener_map, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (unlikely(__pyx_t_3)) {

    /* "pyorama/event.pyx":43
 *     cdef void c_check_user_event_type(self, EventType event_type) except *:
 *         if event_type not in self.listener_map:
 *             raise INVALID_USER_EVENT_TYPE_ERROR             # <<<<<<<<<<<<<<
 *         elif event_type < EVENT_TYPE_USER:
 *             raise INVALID_USER_EVENT_TYPE_ERROR
 */
    __Pyx_Raise(__pyx_v_7pyorama_5event_INVALID_USER_EVENT_TYPE_ERROR, 0, 0, 0);
    __PYX_ERR(0, 43, __pyx_L1_error)

    /* "pyorama/event.pyx":42
 * 
 *     cdef void c_check_user_event_type(self, EventType event_type) except *:
 *         if event_type not in self.listener_map:             # <<<<<<<<<<<<<<
 *             raise INVALID_USER_EVENT_TYPE_ERROR
 *         elif event_type < EVENT_TYPE_USER:
 */
  }

  /* "pyorama/event.pyx":44
 *         if event_type not in self.listener_map:
 *             raise INVALID_USER_EVENT_TYPE_ERROR
 *         elif event_type < EVENT_TYPE_USER:             # <<<<<<<<<<<<<<
 *             raise INVALID_USER_EVENT_TYPE_ERROR
 * 
 */
  __pyx_t_3 = ((__pyx_v_event_type < __pyx_e_7pyorama_5event_EVENT_TYPE_USER) != 0);
  if (unlikely(__pyx_t_3)) {

    /* "pyorama/event.pyx":45
 *             raise INVALID_USER_EVENT_TYPE_ERROR
 *         elif event_type < EVENT_TYPE_USER:
 *             raise INVALID_USER_EVENT_TYPE_ERROR             # <<<<<<<<<<<<<<
 * 
 *     def user_event_type_emit(self, EventType event_type, dict event_data=None):
 */
    __Pyx_Raise(__pyx_v_7pyorama_5event_INVALID_USER_EVENT_TYPE_ERROR, 0, 0, 0);
    __PYX_ERR(0, 45, __pyx_L1_error)

    /* "pyorama/event.pyx":44
 *         if event_type not in self.listener_map:
 *             raise INVALID_USER_EVENT_TYPE_ERROR
 *         elif event_type < EVENT_TYPE_USER:             # <<<<<<<<<<<<<<
 *             raise INVALID_USER_EVENT_TYPE_ERROR
 * 
 */
  }

  /* "pyorama/event.pyx":41
 *         self.num_user_event_types -= 1
 * 
 *     cdef void c_check_user_event_type(self, EventType event_type) except *:             # <<<<<<<<<<<<<<
 *         if event_type not in self.listener_map:
 *             raise INVALID_USER_EVENT_TYPE_ERROR
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyorama.event.EventManager.c_check_user_event_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "pyorama/event.pyx":47
 *             raise INVALID_USER_EVENT_TYPE_ERROR
 * 
 *     def user_event_type_emit(self, EventType event_type, dict event_data=None):             # <<<<<<<<<<<<<<
 *         cdef SDL_Event event
 *         self.c_check_user_event_type(event_type)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_5event_12EventManager_9user_event_type_emit(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_5event_12EventManager_9user_event_type_emit = {"user_event_type_emit", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_5event_12EventManager_9user_event_type_emit, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7pyorama_5event_12EventManager_9user_event_type_emit(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_7pyorama_5event_EventType __pyx_v_event_type;
  PyObject *__pyx_v_event_data = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("user_event_type_emit (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_event_type,&__pyx_n_s_event_data,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject*)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_event_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_event_data);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "user_event_type_emit") < 0)) __PYX_ERR(0, 47, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_event_type = __Pyx_PyInt_As_uint32_t(values[0]); if (unlikely((__pyx_v_event_type == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 47, __pyx_L3_error)
    __pyx_v_event_data = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("user_event_type_emit", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 47, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.event.EventManager.user_event_type_emit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_event_data), (&PyDict_Type), 1, "event_data", 1))) __PYX_ERR(0, 47, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pyorama_5event_12EventManager_8user_event_type_emit(((struct __pyx_obj_7pyorama_5event_EventManager *)__pyx_v_self), __pyx_v_event_type, __pyx_v_event_data);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_5event_12EventManager_8user_event_type_emit(struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self, __pyx_t_7pyorama_5event_EventType __pyx_v_event_type, PyObject *__pyx_v_event_data) {
  SDL_Event __pyx_v_event;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("user_event_type_emit", 0);

  /* "pyorama/event.pyx":49
 *     def user_event_type_emit(self, EventType event_type, dict event_data=None):
 *         cdef SDL_Event event
 *         self.c_check_user_event_type(event_type)             # <<<<<<<<<<<<<<
 *         event.type = event_type
 *         event.user.data1 = <PyObject *>event_data
 */
  __pyx_f_7pyorama_5event_12EventManager_c_check_user_event_type(__pyx_v_self, __pyx_v_event_type); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 49, __pyx_L1_error)

  /* "pyorama/event.pyx":50
 *         cdef SDL_Event event
 *         self.c_check_user_event_type(event_type)
 *         event.type = event_type             # <<<<<<<<<<<<<<
 *         event.user.data1 = <PyObject *>event_data
 *         Py_XINCREF(<PyObject *>event.user.data1)
 */
  __pyx_v_event.type = __pyx_v_event_type;

  /* "pyorama/event.pyx":51
 *         self.c_check_user_event_type(event_type)
 *         event.type = event_type
 *         event.user.data1 = <PyObject *>event_data             # <<<<<<<<<<<<<<
 *         Py_XINCREF(<PyObject *>event.user.data1)
 *         SDL_PushEvent(&event)
 */
  __pyx_v_event.user.data1 = ((PyObject *)__pyx_v_event_data);

  /* "pyorama/event.pyx":52
 *         event.type = event_type
 *         event.user.data1 = <PyObject *>event_data
 *         Py_XINCREF(<PyObject *>event.user.data1)             # <<<<<<<<<<<<<<
 *         SDL_PushEvent(&event)
 * 
 */
  Py_XINCREF(((PyObject *)__pyx_v_event.user.data1));

  /* "pyorama/event.pyx":53
 *         event.user.data1 = <PyObject *>event_data
 *         Py_XINCREF(<PyObject *>event.user.data1)
 *         SDL_PushEvent(&event)             # <<<<<<<<<<<<<<
 * 
 *     #Listener
 */
  (void)(SDL_PushEvent((&__pyx_v_event)));

  /* "pyorama/event.pyx":47
 *             raise INVALID_USER_EVENT_TYPE_ERROR
 * 
 *     def user_event_type_emit(self, EventType event_type, dict event_data=None):             # <<<<<<<<<<<<<<
 *         cdef SDL_Event event
 *         self.c_check_user_event_type(event_type)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyorama.event.EventManager.user_event_type_emit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/event.pyx":56
 * 
 *     #Listener
 *     def listener_create(self):             # <<<<<<<<<<<<<<
 *         return self.listeners.c_create()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_5event_12EventManager_11listener_create(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_5event_12EventManager_11listener_create = {"listener_create", (PyCFunction)__pyx_pw_7pyorama_5event_12EventManager_11listener_create, METH_NOARGS, 0};
static PyObject *__pyx_pw_7pyorama_5event_12EventManager_11listener_create(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("listener_create (wrapper)", 0);
  __pyx_r = __pyx_pf_7pyorama_5event_12EventManager_10listener_create(((struct __pyx_obj_7pyorama_5event_EventManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_5event_12EventManager_10listener_create(struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_7pyorama_4core_6handle_Handle __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("listener_create", 0);

  /* "pyorama/event.pyx":57
 *     #Listener
 *     def listener_create(self):
 *         return self.listeners.c_create()             # <<<<<<<<<<<<<<
 * 
 *     def listener_delete(self, Handle listener):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7pyorama_4core_13item_slot_map_ItemSlotMap *)__pyx_v_self->listeners->__pyx_vtab)->c_create(__pyx_v_self->listeners); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 57, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_uint64_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyorama/event.pyx":56
 * 
 *     #Listener
 *     def listener_create(self):             # <<<<<<<<<<<<<<
 *         return self.listeners.c_create()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyorama.event.EventManager.listener_create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/event.pyx":59
 *         return self.listeners.c_create()
 * 
 *     def listener_delete(self, Handle listener):             # <<<<<<<<<<<<<<
 *         return self.listeners.c_delete(listener)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_5event_12EventManager_13listener_delete(PyObject *__pyx_v_self, PyObject *__pyx_arg_listener); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_5event_12EventManager_13listener_delete = {"listener_delete", (PyCFunction)__pyx_pw_7pyorama_5event_12EventManager_13listener_delete, METH_O, 0};
static PyObject *__pyx_pw_7pyorama_5event_12EventManager_13listener_delete(PyObject *__pyx_v_self, PyObject *__pyx_arg_listener) {
  __pyx_t_7pyorama_4core_6handle_Handle __pyx_v_listener;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("listener_delete (wrapper)", 0);
  assert(__pyx_arg_listener); {
    __pyx_v_listener = __Pyx_PyInt_As_uint64_t(__pyx_arg_listener); if (unlikely((__pyx_v_listener == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 59, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.event.EventManager.listener_delete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pyorama_5event_12EventManager_12listener_delete(((struct __pyx_obj_7pyorama_5event_EventManager *)__pyx_v_self), ((__pyx_t_7pyorama_4core_6handle_Handle)__pyx_v_listener));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_5event_12EventManager_12listener_delete(struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self, __pyx_t_7pyorama_4core_6handle_Handle __pyx_v_listener) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("listener_delete", 0);

  /* "pyorama/event.pyx":60
 * 
 *     def listener_delete(self, Handle listener):
 *         return self.listeners.c_delete(listener)             # <<<<<<<<<<<<<<
 * 
 *     cdef ListenerC *c_listener_get_ptr(self, Handle listener) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  ((struct __pyx_vtabstruct_7pyorama_4core_13item_slot_map_ItemSlotMap *)__pyx_v_self->listeners->__pyx_vtab)->c_delete(__pyx_v_self->listeners, __pyx_v_listener); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 60, __pyx_L1_error)
  __pyx_t_1 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyorama/event.pyx":59
 *         return self.listeners.c_create()
 * 
 *     def listener_delete(self, Handle listener):             # <<<<<<<<<<<<<<
 *         return self.listeners.c_delete(listener)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyorama.event.EventManager.listener_delete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/event.pyx":62
 *         return self.listeners.c_delete(listener)
 * 
 *     cdef ListenerC *c_listener_get_ptr(self, Handle listener) except *:             # <<<<<<<<<<<<<<
 *         return <ListenerC *>self.listeners.c_get_ptr(listener)
 * 
 */

static __pyx_t_7pyorama_5event_ListenerC *__pyx_f_7pyorama_5event_12EventManager_c_listener_get_ptr(struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self, __pyx_t_7pyorama_4core_6handle_Handle __pyx_v_listener) {
  __pyx_t_7pyorama_5event_ListenerC *__pyx_r;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  __Pyx_RefNannySetupContext("c_listener_get_ptr", 0);

  /* "pyorama/event.pyx":63
 * 
 *     cdef ListenerC *c_listener_get_ptr(self, Handle listener) except *:
 *         return <ListenerC *>self.listeners.c_get_ptr(listener)             # <<<<<<<<<<<<<<
 * 
 *     def listener_init(self, Handle listener, EventTypes event_type, object callback, dict user_data):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7pyorama_4core_13item_slot_map_ItemSlotMap *)__pyx_v_self->listeners->__pyx_vtab)->c_get_ptr(__pyx_v_self->listeners, __pyx_v_listener); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 63, __pyx_L1_error)
  __pyx_r = ((__pyx_t_7pyorama_5event_ListenerC *)__pyx_t_1);
  goto __pyx_L0;

  /* "pyorama/event.pyx":62
 *         return self.listeners.c_delete(listener)
 * 
 *     cdef ListenerC *c_listener_get_ptr(self, Handle listener) except *:             # <<<<<<<<<<<<<<
 *         return <ListenerC *>self.listeners.c_get_ptr(listener)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyorama.event.EventManager.c_listener_get_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/event.pyx":65
 *         return <ListenerC *>self.listeners.c_get_ptr(listener)
 * 
 *     def listener_init(self, Handle listener, EventTypes event_type, object callback, dict user_data):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ListenerC *listener_ptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_5event_12EventManager_15listener_init(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_5event_12EventManager_15listener_init = {"listener_init", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_5event_12EventManager_15listener_init, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7pyorama_5event_12EventManager_15listener_init(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_7pyorama_4core_6handle_Handle __pyx_v_listener;
  enum __pyx_t_7pyorama_5event_EventTypes __pyx_v_event_type;
  PyObject *__pyx_v_callback = 0;
  PyObject *__pyx_v_user_data = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("listener_init (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_listener,&__pyx_n_s_event_type,&__pyx_n_s_callback,&__pyx_n_s_user_data,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_listener)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_event_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("listener_init", 1, 4, 4, 1); __PYX_ERR(0, 65, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_callback)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("listener_init", 1, 4, 4, 2); __PYX_ERR(0, 65, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_user_data)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("listener_init", 1, 4, 4, 3); __PYX_ERR(0, 65, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "listener_init") < 0)) __PYX_ERR(0, 65, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_listener = __Pyx_PyInt_As_uint64_t(values[0]); if (unlikely((__pyx_v_listener == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 65, __pyx_L3_error)
    __pyx_v_event_type = ((enum __pyx_t_7pyorama_5event_EventTypes)__Pyx_PyInt_As_enum____pyx_t_7pyorama_5event_EventTypes(values[1])); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 65, __pyx_L3_error)
    __pyx_v_callback = values[2];
    __pyx_v_user_data = ((PyObject*)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("listener_init", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 65, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.event.EventManager.listener_init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_user_data), (&PyDict_Type), 1, "user_data", 1))) __PYX_ERR(0, 65, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pyorama_5event_12EventManager_14listener_init(((struct __pyx_obj_7pyorama_5event_EventManager *)__pyx_v_self), __pyx_v_listener, __pyx_v_event_type, __pyx_v_callback, __pyx_v_user_data);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_5event_12EventManager_14listener_init(struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self, __pyx_t_7pyorama_4core_6handle_Handle __pyx_v_listener, enum __pyx_t_7pyorama_5event_EventTypes __pyx_v_event_type, PyObject *__pyx_v_callback, PyObject *__pyx_v_user_data) {
  __pyx_t_7pyorama_5event_ListenerC *__pyx_v_listener_ptr;
  struct __pyx_obj_7pyorama_4core_11item_vector_ItemVector *__pyx_v_listeners = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_7pyorama_5event_ListenerC *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  __Pyx_RefNannySetupContext("listener_init", 0);

  /* "pyorama/event.pyx":71
 *             ItemVector listeners
 * 
 *         listener_ptr = self.c_listener_get_ptr(listener)             # <<<<<<<<<<<<<<
 *         listeners = <ItemVector>(self.listener_map[event_type])
 *         listener_ptr.event_type = event_type
 */
  __pyx_t_1 = __pyx_f_7pyorama_5event_12EventManager_c_listener_get_ptr(__pyx_v_self, __pyx_v_listener); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 71, __pyx_L1_error)
  __pyx_v_listener_ptr = __pyx_t_1;

  /* "pyorama/event.pyx":72
 * 
 *         listener_ptr = self.c_listener_get_ptr(listener)
 *         listeners = <ItemVector>(self.listener_map[event_type])             # <<<<<<<<<<<<<<
 *         listener_ptr.event_type = event_type
 *         listener_ptr.index = listeners.num_items
 */
  if (unlikely(__pyx_v_self->listener_map == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 72, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_v_event_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_self->listener_map, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_t_3;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_listeners = ((struct __pyx_obj_7pyorama_4core_11item_vector_ItemVector *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyorama/event.pyx":73
 *         listener_ptr = self.c_listener_get_ptr(listener)
 *         listeners = <ItemVector>(self.listener_map[event_type])
 *         listener_ptr.event_type = event_type             # <<<<<<<<<<<<<<
 *         listener_ptr.index = listeners.num_items
 *         listener_ptr.callback = <PyObject *>callback
 */
  __pyx_v_listener_ptr->event_type = __pyx_v_event_type;

  /* "pyorama/event.pyx":74
 *         listeners = <ItemVector>(self.listener_map[event_type])
 *         listener_ptr.event_type = event_type
 *         listener_ptr.index = listeners.num_items             # <<<<<<<<<<<<<<
 *         listener_ptr.callback = <PyObject *>callback
 *         listener_ptr.user_data = <PyObject *>user_data
 */
  __pyx_t_4 = __pyx_v_listeners->num_items;
  __pyx_v_listener_ptr->index = __pyx_t_4;

  /* "pyorama/event.pyx":75
 *         listener_ptr.event_type = event_type
 *         listener_ptr.index = listeners.num_items
 *         listener_ptr.callback = <PyObject *>callback             # <<<<<<<<<<<<<<
 *         listener_ptr.user_data = <PyObject *>user_data
 *         Py_XINCREF(<PyObject *>callback)
 */
  __pyx_v_listener_ptr->callback = ((PyObject *)__pyx_v_callback);

  /* "pyorama/event.pyx":76
 *         listener_ptr.index = listeners.num_items
 *         listener_ptr.callback = <PyObject *>callback
 *         listener_ptr.user_data = <PyObject *>user_data             # <<<<<<<<<<<<<<
 *         Py_XINCREF(<PyObject *>callback)
 *         Py_XINCREF(<PyObject *>user_data)
 */
  __pyx_v_listener_ptr->user_data = ((PyObject *)__pyx_v_user_data);

  /* "pyorama/event.pyx":77
 *         listener_ptr.callback = <PyObject *>callback
 *         listener_ptr.user_data = <PyObject *>user_data
 *         Py_XINCREF(<PyObject *>callback)             # <<<<<<<<<<<<<<
 *         Py_XINCREF(<PyObject *>user_data)
 *         listeners.c_push(&listener)
 */
  Py_XINCREF(((PyObject *)__pyx_v_callback));

  /* "pyorama/event.pyx":78
 *         listener_ptr.user_data = <PyObject *>user_data
 *         Py_XINCREF(<PyObject *>callback)
 *         Py_XINCREF(<PyObject *>user_data)             # <<<<<<<<<<<<<<
 *         listeners.c_push(&listener)
 * 
 */
  Py_XINCREF(((PyObject *)__pyx_v_user_data));

  /* "pyorama/event.pyx":79
 *         Py_XINCREF(<PyObject *>callback)
 *         Py_XINCREF(<PyObject *>user_data)
 *         listeners.c_push(&listener)             # <<<<<<<<<<<<<<
 * 
 *     def listener_free(self, Handle listener):
 */
  ((struct __pyx_vtabstruct_7pyorama_4core_11item_vector_ItemVector *)__pyx_v_listeners->__pyx_vtab)->c_push(__pyx_v_listeners, (&__pyx_v_listener)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 79, __pyx_L1_error)

  /* "pyorama/event.pyx":65
 *         return <ListenerC *>self.listeners.c_get_ptr(listener)
 * 
 *     def listener_init(self, Handle listener, EventTypes event_type, object callback, dict user_data):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ListenerC *listener_ptr
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyorama.event.EventManager.listener_init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_listeners);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/event.pyx":81
 *         listeners.c_push(&listener)
 * 
 *     def listener_free(self, Handle listener):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ListenerC *listener_ptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_5event_12EventManager_17listener_free(PyObject *__pyx_v_self, PyObject *__pyx_arg_listener); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_5event_12EventManager_17listener_free = {"listener_free", (PyCFunction)__pyx_pw_7pyorama_5event_12EventManager_17listener_free, METH_O, 0};
static PyObject *__pyx_pw_7pyorama_5event_12EventManager_17listener_free(PyObject *__pyx_v_self, PyObject *__pyx_arg_listener) {
  __pyx_t_7pyorama_4core_6handle_Handle __pyx_v_listener;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("listener_free (wrapper)", 0);
  assert(__pyx_arg_listener); {
    __pyx_v_listener = __Pyx_PyInt_As_uint64_t(__pyx_arg_listener); if (unlikely((__pyx_v_listener == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 81, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.event.EventManager.listener_free", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pyorama_5event_12EventManager_16listener_free(((struct __pyx_obj_7pyorama_5event_EventManager *)__pyx_v_self), ((__pyx_t_7pyorama_4core_6handle_Handle)__pyx_v_listener));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_5event_12EventManager_16listener_free(struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self, __pyx_t_7pyorama_4core_6handle_Handle __pyx_v_listener) {
  __pyx_t_7pyorama_5event_ListenerC *__pyx_v_listener_ptr;
  size_t __pyx_v_index;
  struct __pyx_obj_7pyorama_4core_11item_vector_ItemVector *__pyx_v_listeners = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_7pyorama_5event_ListenerC *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  __Pyx_RefNannySetupContext("listener_free", 0);

  /* "pyorama/event.pyx":87
 *             ItemVector listeners
 * 
 *         listener_ptr = self.c_listener_get_ptr(listener)             # <<<<<<<<<<<<<<
 *         listeners = <ItemVector>(self.listener_map[listener_ptr.event_type])
 *         listener_ptr.event_type = EVENT_TYPE_NONE
 */
  __pyx_t_1 = __pyx_f_7pyorama_5event_12EventManager_c_listener_get_ptr(__pyx_v_self, __pyx_v_listener); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 87, __pyx_L1_error)
  __pyx_v_listener_ptr = __pyx_t_1;

  /* "pyorama/event.pyx":88
 * 
 *         listener_ptr = self.c_listener_get_ptr(listener)
 *         listeners = <ItemVector>(self.listener_map[listener_ptr.event_type])             # <<<<<<<<<<<<<<
 *         listener_ptr.event_type = EVENT_TYPE_NONE
 *         index = listener_ptr.index
 */
  if (unlikely(__pyx_v_self->listener_map == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 88, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_v_listener_ptr->event_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_self->listener_map, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_t_3;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_listeners = ((struct __pyx_obj_7pyorama_4core_11item_vector_ItemVector *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyorama/event.pyx":89
 *         listener_ptr = self.c_listener_get_ptr(listener)
 *         listeners = <ItemVector>(self.listener_map[listener_ptr.event_type])
 *         listener_ptr.event_type = EVENT_TYPE_NONE             # <<<<<<<<<<<<<<
 *         index = listener_ptr.index
 *         listener_ptr.index = 0
 */
  __pyx_v_listener_ptr->event_type = __pyx_e_7pyorama_5event_EVENT_TYPE_NONE;

  /* "pyorama/event.pyx":90
 *         listeners = <ItemVector>(self.listener_map[listener_ptr.event_type])
 *         listener_ptr.event_type = EVENT_TYPE_NONE
 *         index = listener_ptr.index             # <<<<<<<<<<<<<<
 *         listener_ptr.index = 0
 *         Py_XDECREF(listener_ptr.callback)
 */
  __pyx_t_4 = __pyx_v_listener_ptr->index;
  __pyx_v_index = __pyx_t_4;

  /* "pyorama/event.pyx":91
 *         listener_ptr.event_type = EVENT_TYPE_NONE
 *         index = listener_ptr.index
 *         listener_ptr.index = 0             # <<<<<<<<<<<<<<
 *         Py_XDECREF(listener_ptr.callback)
 *         Py_XDECREF(listener_ptr.user_data)
 */
  __pyx_v_listener_ptr->index = 0;

  /* "pyorama/event.pyx":92
 *         index = listener_ptr.index
 *         listener_ptr.index = 0
 *         Py_XDECREF(listener_ptr.callback)             # <<<<<<<<<<<<<<
 *         Py_XDECREF(listener_ptr.user_data)
 *         listener_ptr.callback = NULL
 */
  Py_XDECREF(__pyx_v_listener_ptr->callback);

  /* "pyorama/event.pyx":93
 *         listener_ptr.index = 0
 *         Py_XDECREF(listener_ptr.callback)
 *         Py_XDECREF(listener_ptr.user_data)             # <<<<<<<<<<<<<<
 *         listener_ptr.callback = NULL
 *         listener_ptr.user_data = NULL
 */
  Py_XDECREF(__pyx_v_listener_ptr->user_data);

  /* "pyorama/event.pyx":94
 *         Py_XDECREF(listener_ptr.callback)
 *         Py_XDECREF(listener_ptr.user_data)
 *         listener_ptr.callback = NULL             # <<<<<<<<<<<<<<
 *         listener_ptr.user_data = NULL
 *         listeners.c_remove_empty(index)
 */
  __pyx_v_listener_ptr->callback = NULL;

  /* "pyorama/event.pyx":95
 *         Py_XDECREF(listener_ptr.user_data)
 *         listener_ptr.callback = NULL
 *         listener_ptr.user_data = NULL             # <<<<<<<<<<<<<<
 *         listeners.c_remove_empty(index)
 * 
 */
  __pyx_v_listener_ptr->user_data = NULL;

  /* "pyorama/event.pyx":96
 *         listener_ptr.callback = NULL
 *         listener_ptr.user_data = NULL
 *         listeners.c_remove_empty(index)             # <<<<<<<<<<<<<<
 * 
 *     cdef dict c_parse_window_event(self, SDL_WindowEvent *event, double time_stamp):
 */
  ((struct __pyx_vtabstruct_7pyorama_4core_11item_vector_ItemVector *)__pyx_v_listeners->__pyx_vtab)->c_remove_empty(__pyx_v_listeners, __pyx_v_index); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 96, __pyx_L1_error)

  /* "pyorama/event.pyx":81
 *         listeners.c_push(&listener)
 * 
 *     def listener_free(self, Handle listener):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ListenerC *listener_ptr
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyorama.event.EventManager.listener_free", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_listeners);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/event.pyx":98
 *         listeners.c_remove_empty(index)
 * 
 *     cdef dict c_parse_window_event(self, SDL_WindowEvent *event, double time_stamp):             # <<<<<<<<<<<<<<
 *         cdef dict event_data = {
 *             "type": EVENT_TYPE_WINDOW,
 */

static PyObject *__pyx_f_7pyorama_5event_12EventManager_c_parse_window_event(CYTHON_UNUSED struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self, SDL_WindowEvent *__pyx_v_event, double __pyx_v_time_stamp) {
  PyObject *__pyx_v_event_data = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("c_parse_window_event", 0);

  /* "pyorama/event.pyx":100
 *     cdef dict c_parse_window_event(self, SDL_WindowEvent *event, double time_stamp):
 *         cdef dict event_data = {
 *             "type": EVENT_TYPE_WINDOW,             # <<<<<<<<<<<<<<
 *             "sub_type": <WindowEventTypes>event.event,
 *             "timestamp": time_stamp,
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_e_7pyorama_5event_EVENT_TYPE_WINDOW); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_type, __pyx_t_2) < 0) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":101
 *         cdef dict event_data = {
 *             "type": EVENT_TYPE_WINDOW,
 *             "sub_type": <WindowEventTypes>event.event,             # <<<<<<<<<<<<<<
 *             "timestamp": time_stamp,
 *             "window_id": event.windowID,
 */
  __pyx_t_2 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(((enum __pyx_t_7pyorama_5event_WindowEventTypes)__pyx_v_event->event)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_sub_type, __pyx_t_2) < 0) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":102
 *             "type": EVENT_TYPE_WINDOW,
 *             "sub_type": <WindowEventTypes>event.event,
 *             "timestamp": time_stamp,             # <<<<<<<<<<<<<<
 *             "window_id": event.windowID,
 *         }
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_time_stamp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_timestamp, __pyx_t_2) < 0) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":103
 *             "sub_type": <WindowEventTypes>event.event,
 *             "timestamp": time_stamp,
 *             "window_id": event.windowID,             # <<<<<<<<<<<<<<
 *         }
 *         if event.event == SDL_WINDOWEVENT_MOVED:
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_event->windowID); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_window_id, __pyx_t_2) < 0) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_event_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyorama/event.pyx":105
 *             "window_id": event.windowID,
 *         }
 *         if event.event == SDL_WINDOWEVENT_MOVED:             # <<<<<<<<<<<<<<
 *             event_data["x"] = event.data1
 *             event_data["y"] = event.data2
 */
  switch (__pyx_v_event->event) {
    case SDL_WINDOWEVENT_MOVED:

    /* "pyorama/event.pyx":106
 *         }
 *         if event.event == SDL_WINDOWEVENT_MOVED:
 *             event_data["x"] = event.data1             # <<<<<<<<<<<<<<
 *             event_data["y"] = event.data2
 *         elif event.event == SDL_WINDOWEVENT_RESIZED or event.event == SDL_WINDOWEVENT_SIZE_CHANGED:
 */
    __pyx_t_1 = __Pyx_PyInt_From_int32_t(__pyx_v_event->data1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyDict_SetItem(__pyx_v_event_data, __pyx_n_u_x, __pyx_t_1) < 0)) __PYX_ERR(0, 106, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyorama/event.pyx":107
 *         if event.event == SDL_WINDOWEVENT_MOVED:
 *             event_data["x"] = event.data1
 *             event_data["y"] = event.data2             # <<<<<<<<<<<<<<
 *         elif event.event == SDL_WINDOWEVENT_RESIZED or event.event == SDL_WINDOWEVENT_SIZE_CHANGED:
 *             event_data["width"] = event.data1
 */
    __pyx_t_1 = __Pyx_PyInt_From_int32_t(__pyx_v_event->data2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyDict_SetItem(__pyx_v_event_data, __pyx_n_u_y, __pyx_t_1) < 0)) __PYX_ERR(0, 107, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyorama/event.pyx":105
 *             "window_id": event.windowID,
 *         }
 *         if event.event == SDL_WINDOWEVENT_MOVED:             # <<<<<<<<<<<<<<
 *             event_data["x"] = event.data1
 *             event_data["y"] = event.data2
 */
    break;
    case SDL_WINDOWEVENT_RESIZED:

    /* "pyorama/event.pyx":108
 *             event_data["x"] = event.data1
 *             event_data["y"] = event.data2
 *         elif event.event == SDL_WINDOWEVENT_RESIZED or event.event == SDL_WINDOWEVENT_SIZE_CHANGED:             # <<<<<<<<<<<<<<
 *             event_data["width"] = event.data1
 *             event_data["height"] = event.data2
 */
    case SDL_WINDOWEVENT_SIZE_CHANGED:

    /* "pyorama/event.pyx":109
 *             event_data["y"] = event.data2
 *         elif event.event == SDL_WINDOWEVENT_RESIZED or event.event == SDL_WINDOWEVENT_SIZE_CHANGED:
 *             event_data["width"] = event.data1             # <<<<<<<<<<<<<<
 *             event_data["height"] = event.data2
 *         return event_data
 */
    __pyx_t_1 = __Pyx_PyInt_From_int32_t(__pyx_v_event->data1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyDict_SetItem(__pyx_v_event_data, __pyx_n_u_width, __pyx_t_1) < 0)) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyorama/event.pyx":110
 *         elif event.event == SDL_WINDOWEVENT_RESIZED or event.event == SDL_WINDOWEVENT_SIZE_CHANGED:
 *             event_data["width"] = event.data1
 *             event_data["height"] = event.data2             # <<<<<<<<<<<<<<
 *         return event_data
 * 
 */
    __pyx_t_1 = __Pyx_PyInt_From_int32_t(__pyx_v_event->data2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 110, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyDict_SetItem(__pyx_v_event_data, __pyx_n_u_height, __pyx_t_1) < 0)) __PYX_ERR(0, 110, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyorama/event.pyx":108
 *             event_data["x"] = event.data1
 *             event_data["y"] = event.data2
 *         elif event.event == SDL_WINDOWEVENT_RESIZED or event.event == SDL_WINDOWEVENT_SIZE_CHANGED:             # <<<<<<<<<<<<<<
 *             event_data["width"] = event.data1
 *             event_data["height"] = event.data2
 */
    break;
    default: break;
  }

  /* "pyorama/event.pyx":111
 *             event_data["width"] = event.data1
 *             event_data["height"] = event.data2
 *         return event_data             # <<<<<<<<<<<<<<
 * 
 *     cdef dict c_parse_key_down_event(self, SDL_KeyboardEvent *event, double time_stamp):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_event_data);
  __pyx_r = __pyx_v_event_data;
  goto __pyx_L0;

  /* "pyorama/event.pyx":98
 *         listeners.c_remove_empty(index)
 * 
 *     cdef dict c_parse_window_event(self, SDL_WindowEvent *event, double time_stamp):             # <<<<<<<<<<<<<<
 *         cdef dict event_data = {
 *             "type": EVENT_TYPE_WINDOW,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyorama.event.EventManager.c_parse_window_event", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_event_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/event.pyx":113
 *         return event_data
 * 
 *     cdef dict c_parse_key_down_event(self, SDL_KeyboardEvent *event, double time_stamp):             # <<<<<<<<<<<<<<
 *         cdef dict event_data = {
 *             "type": EVENT_TYPE_KEY_DOWN,
 */

static PyObject *__pyx_f_7pyorama_5event_12EventManager_c_parse_key_down_event(CYTHON_UNUSED struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self, SDL_KeyboardEvent *__pyx_v_event, double __pyx_v_time_stamp) {
  PyObject *__pyx_v_event_data = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("c_parse_key_down_event", 0);

  /* "pyorama/event.pyx":115
 *     cdef dict c_parse_key_down_event(self, SDL_KeyboardEvent *event, double time_stamp):
 *         cdef dict event_data = {
 *             "type": EVENT_TYPE_KEY_DOWN,             # <<<<<<<<<<<<<<
 *             "time_stamp": time_stamp,
 *             "window_id": event.windowID,
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_e_7pyorama_5event_EVENT_TYPE_KEY_DOWN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_type, __pyx_t_2) < 0) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":116
 *         cdef dict event_data = {
 *             "type": EVENT_TYPE_KEY_DOWN,
 *             "time_stamp": time_stamp,             # <<<<<<<<<<<<<<
 *             "window_id": event.windowID,
 *             "state": event.state,
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_time_stamp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_time_stamp, __pyx_t_2) < 0) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":117
 *             "type": EVENT_TYPE_KEY_DOWN,
 *             "time_stamp": time_stamp,
 *             "window_id": event.windowID,             # <<<<<<<<<<<<<<
 *             "state": event.state,
 *             "repeat": event.repeat,
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_event->windowID); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_window_id, __pyx_t_2) < 0) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":118
 *             "time_stamp": time_stamp,
 *             "window_id": event.windowID,
 *             "state": event.state,             # <<<<<<<<<<<<<<
 *             "repeat": event.repeat,
 *             "scan_code": event.keysym.scancode,
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint8_t(__pyx_v_event->state); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_state, __pyx_t_2) < 0) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":119
 *             "window_id": event.windowID,
 *             "state": event.state,
 *             "repeat": event.repeat,             # <<<<<<<<<<<<<<
 *             "scan_code": event.keysym.scancode,
 *             "key_code": event.keysym.sym,
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint8_t(__pyx_v_event->repeat); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_repeat, __pyx_t_2) < 0) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":120
 *             "state": event.state,
 *             "repeat": event.repeat,
 *             "scan_code": event.keysym.scancode,             # <<<<<<<<<<<<<<
 *             "key_code": event.keysym.sym,
 *             "modifiers": event.keysym.mod,
 */
  __pyx_t_2 = __Pyx_PyInt_From_SDL_Scancode(__pyx_v_event->keysym.scancode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_scan_code, __pyx_t_2) < 0) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":121
 *             "repeat": event.repeat,
 *             "scan_code": event.keysym.scancode,
 *             "key_code": event.keysym.sym,             # <<<<<<<<<<<<<<
 *             "modifiers": event.keysym.mod,
 *         }
 */
  __pyx_t_2 = __Pyx_PyInt_From_int32_t(__pyx_v_event->keysym.sym); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_key_code, __pyx_t_2) < 0) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":122
 *             "scan_code": event.keysym.scancode,
 *             "key_code": event.keysym.sym,
 *             "modifiers": event.keysym.mod,             # <<<<<<<<<<<<<<
 *         }
 *         return event_data
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint16_t(__pyx_v_event->keysym.mod); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_modifiers, __pyx_t_2) < 0) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_event_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyorama/event.pyx":124
 *             "modifiers": event.keysym.mod,
 *         }
 *         return event_data             # <<<<<<<<<<<<<<
 * 
 *     cdef dict c_parse_key_up_event(self, SDL_KeyboardEvent *event, double time_stamp):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_event_data);
  __pyx_r = __pyx_v_event_data;
  goto __pyx_L0;

  /* "pyorama/event.pyx":113
 *         return event_data
 * 
 *     cdef dict c_parse_key_down_event(self, SDL_KeyboardEvent *event, double time_stamp):             # <<<<<<<<<<<<<<
 *         cdef dict event_data = {
 *             "type": EVENT_TYPE_KEY_DOWN,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyorama.event.EventManager.c_parse_key_down_event", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_event_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/event.pyx":126
 *         return event_data
 * 
 *     cdef dict c_parse_key_up_event(self, SDL_KeyboardEvent *event, double time_stamp):             # <<<<<<<<<<<<<<
 *         cdef dict event_data = {
 *             "type": EVENT_TYPE_KEY_UP,
 */

static PyObject *__pyx_f_7pyorama_5event_12EventManager_c_parse_key_up_event(CYTHON_UNUSED struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self, SDL_KeyboardEvent *__pyx_v_event, double __pyx_v_time_stamp) {
  PyObject *__pyx_v_event_data = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("c_parse_key_up_event", 0);

  /* "pyorama/event.pyx":128
 *     cdef dict c_parse_key_up_event(self, SDL_KeyboardEvent *event, double time_stamp):
 *         cdef dict event_data = {
 *             "type": EVENT_TYPE_KEY_UP,             # <<<<<<<<<<<<<<
 *             "time_stamp": time_stamp,
 *             "window_id": event.windowID,
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_e_7pyorama_5event_EVENT_TYPE_KEY_UP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_type, __pyx_t_2) < 0) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":129
 *         cdef dict event_data = {
 *             "type": EVENT_TYPE_KEY_UP,
 *             "time_stamp": time_stamp,             # <<<<<<<<<<<<<<
 *             "window_id": event.windowID,
 *             "state": event.state,
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_time_stamp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_time_stamp, __pyx_t_2) < 0) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":130
 *             "type": EVENT_TYPE_KEY_UP,
 *             "time_stamp": time_stamp,
 *             "window_id": event.windowID,             # <<<<<<<<<<<<<<
 *             "state": event.state,
 *             "repeat": event.repeat,
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_event->windowID); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_window_id, __pyx_t_2) < 0) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":131
 *             "time_stamp": time_stamp,
 *             "window_id": event.windowID,
 *             "state": event.state,             # <<<<<<<<<<<<<<
 *             "repeat": event.repeat,
 *             "scan_code": event.keysym.scancode,
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint8_t(__pyx_v_event->state); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_state, __pyx_t_2) < 0) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":132
 *             "window_id": event.windowID,
 *             "state": event.state,
 *             "repeat": event.repeat,             # <<<<<<<<<<<<<<
 *             "scan_code": event.keysym.scancode,
 *             "key_code": event.keysym.sym,
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint8_t(__pyx_v_event->repeat); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_repeat, __pyx_t_2) < 0) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":133
 *             "state": event.state,
 *             "repeat": event.repeat,
 *             "scan_code": event.keysym.scancode,             # <<<<<<<<<<<<<<
 *             "key_code": event.keysym.sym,
 *             "modifiers": event.keysym.mod,
 */
  __pyx_t_2 = __Pyx_PyInt_From_SDL_Scancode(__pyx_v_event->keysym.scancode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_scan_code, __pyx_t_2) < 0) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":134
 *             "repeat": event.repeat,
 *             "scan_code": event.keysym.scancode,
 *             "key_code": event.keysym.sym,             # <<<<<<<<<<<<<<
 *             "modifiers": event.keysym.mod,
 *         }
 */
  __pyx_t_2 = __Pyx_PyInt_From_int32_t(__pyx_v_event->keysym.sym); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_key_code, __pyx_t_2) < 0) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":135
 *             "scan_code": event.keysym.scancode,
 *             "key_code": event.keysym.sym,
 *             "modifiers": event.keysym.mod,             # <<<<<<<<<<<<<<
 *         }
 *         return event_data
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint16_t(__pyx_v_event->keysym.mod); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_modifiers, __pyx_t_2) < 0) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_event_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyorama/event.pyx":137
 *             "modifiers": event.keysym.mod,
 *         }
 *         return event_data             # <<<<<<<<<<<<<<
 * 
 *     cdef dict c_parse_mouse_button_down_event(self, SDL_MouseButtonEvent *event, double time_stamp):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_event_data);
  __pyx_r = __pyx_v_event_data;
  goto __pyx_L0;

  /* "pyorama/event.pyx":126
 *         return event_data
 * 
 *     cdef dict c_parse_key_up_event(self, SDL_KeyboardEvent *event, double time_stamp):             # <<<<<<<<<<<<<<
 *         cdef dict event_data = {
 *             "type": EVENT_TYPE_KEY_UP,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyorama.event.EventManager.c_parse_key_up_event", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_event_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/event.pyx":139
 *         return event_data
 * 
 *     cdef dict c_parse_mouse_button_down_event(self, SDL_MouseButtonEvent *event, double time_stamp):             # <<<<<<<<<<<<<<
 *         cdef dict event_data = {
 *             "type": EVENT_TYPE_MOUSE_BUTTON_DOWN,
 */

static PyObject *__pyx_f_7pyorama_5event_12EventManager_c_parse_mouse_button_down_event(CYTHON_UNUSED struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self, SDL_MouseButtonEvent *__pyx_v_event, double __pyx_v_time_stamp) {
  PyObject *__pyx_v_event_data = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("c_parse_mouse_button_down_event", 0);

  /* "pyorama/event.pyx":141
 *     cdef dict c_parse_mouse_button_down_event(self, SDL_MouseButtonEvent *event, double time_stamp):
 *         cdef dict event_data = {
 *             "type": EVENT_TYPE_MOUSE_BUTTON_DOWN,             # <<<<<<<<<<<<<<
 *             "time_stamp": time_stamp,
 *             "window_id": event.windowID,
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_e_7pyorama_5event_EVENT_TYPE_MOUSE_BUTTON_DOWN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_type, __pyx_t_2) < 0) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":142
 *         cdef dict event_data = {
 *             "type": EVENT_TYPE_MOUSE_BUTTON_DOWN,
 *             "time_stamp": time_stamp,             # <<<<<<<<<<<<<<
 *             "window_id": event.windowID,
 *             "which": event.which,
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_time_stamp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_time_stamp, __pyx_t_2) < 0) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":143
 *             "type": EVENT_TYPE_MOUSE_BUTTON_DOWN,
 *             "time_stamp": time_stamp,
 *             "window_id": event.windowID,             # <<<<<<<<<<<<<<
 *             "which": event.which,
 *             "button": event.button,
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_event->windowID); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_window_id, __pyx_t_2) < 0) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":144
 *             "time_stamp": time_stamp,
 *             "window_id": event.windowID,
 *             "which": event.which,             # <<<<<<<<<<<<<<
 *             "button": event.button,
 *             "state": event.state,
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_event->which); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_which, __pyx_t_2) < 0) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":145
 *             "window_id": event.windowID,
 *             "which": event.which,
 *             "button": event.button,             # <<<<<<<<<<<<<<
 *             "state": event.state,
 *             "clicks": event.clicks,
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint8_t(__pyx_v_event->button); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_button, __pyx_t_2) < 0) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":146
 *             "which": event.which,
 *             "button": event.button,
 *             "state": event.state,             # <<<<<<<<<<<<<<
 *             "clicks": event.clicks,
 *             "x": event.x,
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint8_t(__pyx_v_event->state); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_state, __pyx_t_2) < 0) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":147
 *             "button": event.button,
 *             "state": event.state,
 *             "clicks": event.clicks,             # <<<<<<<<<<<<<<
 *             "x": event.x,
 *             "y": event.y,
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint8_t(__pyx_v_event->clicks); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_clicks, __pyx_t_2) < 0) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":148
 *             "state": event.state,
 *             "clicks": event.clicks,
 *             "x": event.x,             # <<<<<<<<<<<<<<
 *             "y": event.y,
 *         }
 */
  __pyx_t_2 = __Pyx_PyInt_From_int32_t(__pyx_v_event->x); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_x, __pyx_t_2) < 0) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":149
 *             "clicks": event.clicks,
 *             "x": event.x,
 *             "y": event.y,             # <<<<<<<<<<<<<<
 *         }
 *         return event_data
 */
  __pyx_t_2 = __Pyx_PyInt_From_int32_t(__pyx_v_event->y); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_y, __pyx_t_2) < 0) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_event_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyorama/event.pyx":151
 *             "y": event.y,
 *         }
 *         return event_data             # <<<<<<<<<<<<<<
 * 
 *     cdef dict c_parse_mouse_button_up_event(self, SDL_MouseButtonEvent *event, double time_stamp):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_event_data);
  __pyx_r = __pyx_v_event_data;
  goto __pyx_L0;

  /* "pyorama/event.pyx":139
 *         return event_data
 * 
 *     cdef dict c_parse_mouse_button_down_event(self, SDL_MouseButtonEvent *event, double time_stamp):             # <<<<<<<<<<<<<<
 *         cdef dict event_data = {
 *             "type": EVENT_TYPE_MOUSE_BUTTON_DOWN,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyorama.event.EventManager.c_parse_mouse_button_down_event", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_event_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/event.pyx":153
 *         return event_data
 * 
 *     cdef dict c_parse_mouse_button_up_event(self, SDL_MouseButtonEvent *event, double time_stamp):             # <<<<<<<<<<<<<<
 *         cdef dict event_data = {
 *             "type": EVENT_TYPE_MOUSE_BUTTON_UP,
 */

static PyObject *__pyx_f_7pyorama_5event_12EventManager_c_parse_mouse_button_up_event(CYTHON_UNUSED struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self, SDL_MouseButtonEvent *__pyx_v_event, double __pyx_v_time_stamp) {
  PyObject *__pyx_v_event_data = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("c_parse_mouse_button_up_event", 0);

  /* "pyorama/event.pyx":155
 *     cdef dict c_parse_mouse_button_up_event(self, SDL_MouseButtonEvent *event, double time_stamp):
 *         cdef dict event_data = {
 *             "type": EVENT_TYPE_MOUSE_BUTTON_UP,             # <<<<<<<<<<<<<<
 *             "time_stamp": time_stamp,
 *             "window_id": event.windowID,
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_e_7pyorama_5event_EVENT_TYPE_MOUSE_BUTTON_UP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_type, __pyx_t_2) < 0) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":156
 *         cdef dict event_data = {
 *             "type": EVENT_TYPE_MOUSE_BUTTON_UP,
 *             "time_stamp": time_stamp,             # <<<<<<<<<<<<<<
 *             "window_id": event.windowID,
 *             "which": event.which,
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_time_stamp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_time_stamp, __pyx_t_2) < 0) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":157
 *             "type": EVENT_TYPE_MOUSE_BUTTON_UP,
 *             "time_stamp": time_stamp,
 *             "window_id": event.windowID,             # <<<<<<<<<<<<<<
 *             "which": event.which,
 *             "button": event.button,
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_event->windowID); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_window_id, __pyx_t_2) < 0) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":158
 *             "time_stamp": time_stamp,
 *             "window_id": event.windowID,
 *             "which": event.which,             # <<<<<<<<<<<<<<
 *             "button": event.button,
 *             "state": event.state,
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_event->which); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_which, __pyx_t_2) < 0) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":159
 *             "window_id": event.windowID,
 *             "which": event.which,
 *             "button": event.button,             # <<<<<<<<<<<<<<
 *             "state": event.state,
 *             "clicks": event.clicks,
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint8_t(__pyx_v_event->button); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_button, __pyx_t_2) < 0) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":160
 *             "which": event.which,
 *             "button": event.button,
 *             "state": event.state,             # <<<<<<<<<<<<<<
 *             "clicks": event.clicks,
 *             "x": event.x,
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint8_t(__pyx_v_event->state); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_state, __pyx_t_2) < 0) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":161
 *             "button": event.button,
 *             "state": event.state,
 *             "clicks": event.clicks,             # <<<<<<<<<<<<<<
 *             "x": event.x,
 *             "y": event.y,
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint8_t(__pyx_v_event->clicks); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_clicks, __pyx_t_2) < 0) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":162
 *             "state": event.state,
 *             "clicks": event.clicks,
 *             "x": event.x,             # <<<<<<<<<<<<<<
 *             "y": event.y,
 *         }
 */
  __pyx_t_2 = __Pyx_PyInt_From_int32_t(__pyx_v_event->x); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_x, __pyx_t_2) < 0) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":163
 *             "clicks": event.clicks,
 *             "x": event.x,
 *             "y": event.y,             # <<<<<<<<<<<<<<
 *         }
 *         return event_data
 */
  __pyx_t_2 = __Pyx_PyInt_From_int32_t(__pyx_v_event->y); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_y, __pyx_t_2) < 0) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_event_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyorama/event.pyx":165
 *             "y": event.y,
 *         }
 *         return event_data             # <<<<<<<<<<<<<<
 * 
 *     cdef dict c_parse_mouse_motion_event(self, SDL_MouseMotionEvent *event, double time_stamp):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_event_data);
  __pyx_r = __pyx_v_event_data;
  goto __pyx_L0;

  /* "pyorama/event.pyx":153
 *         return event_data
 * 
 *     cdef dict c_parse_mouse_button_up_event(self, SDL_MouseButtonEvent *event, double time_stamp):             # <<<<<<<<<<<<<<
 *         cdef dict event_data = {
 *             "type": EVENT_TYPE_MOUSE_BUTTON_UP,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyorama.event.EventManager.c_parse_mouse_button_up_event", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_event_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/event.pyx":167
 *         return event_data
 * 
 *     cdef dict c_parse_mouse_motion_event(self, SDL_MouseMotionEvent *event, double time_stamp):             # <<<<<<<<<<<<<<
 *         cdef dict event_data = {
 *             "type": EVENT_TYPE_MOUSE_MOTION,
 */

static PyObject *__pyx_f_7pyorama_5event_12EventManager_c_parse_mouse_motion_event(CYTHON_UNUSED struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self, SDL_MouseMotionEvent *__pyx_v_event, double __pyx_v_time_stamp) {
  PyObject *__pyx_v_event_data = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("c_parse_mouse_motion_event", 0);

  /* "pyorama/event.pyx":169
 *     cdef dict c_parse_mouse_motion_event(self, SDL_MouseMotionEvent *event, double time_stamp):
 *         cdef dict event_data = {
 *             "type": EVENT_TYPE_MOUSE_MOTION,             # <<<<<<<<<<<<<<
 *             "time_stamp": time_stamp,
 *             "window_id": event.windowID,
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_e_7pyorama_5event_EVENT_TYPE_MOUSE_MOTION); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_type, __pyx_t_2) < 0) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":170
 *         cdef dict event_data = {
 *             "type": EVENT_TYPE_MOUSE_MOTION,
 *             "time_stamp": time_stamp,             # <<<<<<<<<<<<<<
 *             "window_id": event.windowID,
 *             "which": event.which,
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_time_stamp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_time_stamp, __pyx_t_2) < 0) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":171
 *             "type": EVENT_TYPE_MOUSE_MOTION,
 *             "time_stamp": time_stamp,
 *             "window_id": event.windowID,             # <<<<<<<<<<<<<<
 *             "which": event.which,
 *             "state": event.state,
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_event->windowID); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_window_id, __pyx_t_2) < 0) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":172
 *             "time_stamp": time_stamp,
 *             "window_id": event.windowID,
 *             "which": event.which,             # <<<<<<<<<<<<<<
 *             "state": event.state,
 *             "x": event.x,
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_event->which); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_which, __pyx_t_2) < 0) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":173
 *             "window_id": event.windowID,
 *             "which": event.which,
 *             "state": event.state,             # <<<<<<<<<<<<<<
 *             "x": event.x,
 *             "y": event.y,
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_event->state); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_state, __pyx_t_2) < 0) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":174
 *             "which": event.which,
 *             "state": event.state,
 *             "x": event.x,             # <<<<<<<<<<<<<<
 *             "y": event.y,
 *             "relative_x": event.xrel,
 */
  __pyx_t_2 = __Pyx_PyInt_From_int32_t(__pyx_v_event->x); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_x, __pyx_t_2) < 0) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":175
 *             "state": event.state,
 *             "x": event.x,
 *             "y": event.y,             # <<<<<<<<<<<<<<
 *             "relative_x": event.xrel,
 *             "relative_y": event.yrel,
 */
  __pyx_t_2 = __Pyx_PyInt_From_int32_t(__pyx_v_event->y); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_y, __pyx_t_2) < 0) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":176
 *             "x": event.x,
 *             "y": event.y,
 *             "relative_x": event.xrel,             # <<<<<<<<<<<<<<
 *             "relative_y": event.yrel,
 *         }
 */
  __pyx_t_2 = __Pyx_PyInt_From_int32_t(__pyx_v_event->xrel); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_relative_x, __pyx_t_2) < 0) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":177
 *             "y": event.y,
 *             "relative_x": event.xrel,
 *             "relative_y": event.yrel,             # <<<<<<<<<<<<<<
 *         }
 *         return event_data
 */
  __pyx_t_2 = __Pyx_PyInt_From_int32_t(__pyx_v_event->yrel); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_relative_y, __pyx_t_2) < 0) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_event_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyorama/event.pyx":179
 *             "relative_y": event.yrel,
 *         }
 *         return event_data             # <<<<<<<<<<<<<<
 * 
 *     cdef dict c_parse_mouse_wheel_event(self, SDL_MouseWheelEvent *event, double time_stamp):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_event_data);
  __pyx_r = __pyx_v_event_data;
  goto __pyx_L0;

  /* "pyorama/event.pyx":167
 *         return event_data
 * 
 *     cdef dict c_parse_mouse_motion_event(self, SDL_MouseMotionEvent *event, double time_stamp):             # <<<<<<<<<<<<<<
 *         cdef dict event_data = {
 *             "type": EVENT_TYPE_MOUSE_MOTION,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyorama.event.EventManager.c_parse_mouse_motion_event", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_event_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/event.pyx":181
 *         return event_data
 * 
 *     cdef dict c_parse_mouse_wheel_event(self, SDL_MouseWheelEvent *event, double time_stamp):             # <<<<<<<<<<<<<<
 *         cdef dict event_data = {
 *             "type": EVENT_TYPE_MOUSE_WHEEL,
 */

static PyObject *__pyx_f_7pyorama_5event_12EventManager_c_parse_mouse_wheel_event(CYTHON_UNUSED struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self, SDL_MouseWheelEvent *__pyx_v_event, double __pyx_v_time_stamp) {
  PyObject *__pyx_v_event_data = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("c_parse_mouse_wheel_event", 0);

  /* "pyorama/event.pyx":183
 *     cdef dict c_parse_mouse_wheel_event(self, SDL_MouseWheelEvent *event, double time_stamp):
 *         cdef dict event_data = {
 *             "type": EVENT_TYPE_MOUSE_WHEEL,             # <<<<<<<<<<<<<<
 *             "time_stamp": time_stamp,
 *             "window_id": event.windowID,
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_e_7pyorama_5event_EVENT_TYPE_MOUSE_WHEEL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_type, __pyx_t_2) < 0) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":184
 *         cdef dict event_data = {
 *             "type": EVENT_TYPE_MOUSE_WHEEL,
 *             "time_stamp": time_stamp,             # <<<<<<<<<<<<<<
 *             "window_id": event.windowID,
 *             "which": event.which,
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_time_stamp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_time_stamp, __pyx_t_2) < 0) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":185
 *             "type": EVENT_TYPE_MOUSE_WHEEL,
 *             "time_stamp": time_stamp,
 *             "window_id": event.windowID,             # <<<<<<<<<<<<<<
 *             "which": event.which,
 *             "x": event.x,
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_event->windowID); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_window_id, __pyx_t_2) < 0) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":186
 *             "time_stamp": time_stamp,
 *             "window_id": event.windowID,
 *             "which": event.which,             # <<<<<<<<<<<<<<
 *             "x": event.x,
 *             "y": event.y,
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_event->which); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_which, __pyx_t_2) < 0) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":187
 *             "window_id": event.windowID,
 *             "which": event.which,
 *             "x": event.x,             # <<<<<<<<<<<<<<
 *             "y": event.y,
 *             "direction": event.direction,
 */
  __pyx_t_2 = __Pyx_PyInt_From_int32_t(__pyx_v_event->x); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_x, __pyx_t_2) < 0) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":188
 *             "which": event.which,
 *             "x": event.x,
 *             "y": event.y,             # <<<<<<<<<<<<<<
 *             "direction": event.direction,
 *         }
 */
  __pyx_t_2 = __Pyx_PyInt_From_int32_t(__pyx_v_event->y); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_y, __pyx_t_2) < 0) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":189
 *             "x": event.x,
 *             "y": event.y,
 *             "direction": event.direction,             # <<<<<<<<<<<<<<
 *         }
 *         return event_data
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_event->direction); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_direction, __pyx_t_2) < 0) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_event_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyorama/event.pyx":191
 *             "direction": event.direction,
 *         }
 *         return event_data             # <<<<<<<<<<<<<<
 * 
 *     cdef dict c_parse_user_event(self, SDL_UserEvent *event, double time_stamp):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_event_data);
  __pyx_r = __pyx_v_event_data;
  goto __pyx_L0;

  /* "pyorama/event.pyx":181
 *         return event_data
 * 
 *     cdef dict c_parse_mouse_wheel_event(self, SDL_MouseWheelEvent *event, double time_stamp):             # <<<<<<<<<<<<<<
 *         cdef dict event_data = {
 *             "type": EVENT_TYPE_MOUSE_WHEEL,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyorama.event.EventManager.c_parse_mouse_wheel_event", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_event_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/event.pyx":193
 *         return event_data
 * 
 *     cdef dict c_parse_user_event(self, SDL_UserEvent *event, double time_stamp):             # <<<<<<<<<<<<<<
 *         cdef dict event_data = {
 *             "type": event.type,
 */

static PyObject *__pyx_f_7pyorama_5event_12EventManager_c_parse_user_event(CYTHON_UNUSED struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self, SDL_UserEvent *__pyx_v_event, double __pyx_v_time_stamp) {
  PyObject *__pyx_v_event_data = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("c_parse_user_event", 0);

  /* "pyorama/event.pyx":195
 *     cdef dict c_parse_user_event(self, SDL_UserEvent *event, double time_stamp):
 *         cdef dict event_data = {
 *             "type": event.type,             # <<<<<<<<<<<<<<
 *             "timestamp": time_stamp,
 *             "data": <dict>event.data1,
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_event->type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_type, __pyx_t_2) < 0) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":196
 *         cdef dict event_data = {
 *             "type": event.type,
 *             "timestamp": time_stamp,             # <<<<<<<<<<<<<<
 *             "data": <dict>event.data1,
 *         }
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_time_stamp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_timestamp, __pyx_t_2) < 0) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyorama/event.pyx":197
 *             "type": event.type,
 *             "timestamp": time_stamp,
 *             "data": <dict>event.data1,             # <<<<<<<<<<<<<<
 *         }
 *         Py_XDECREF(<PyObject *>event.data1)
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_data, ((PyObject *)__pyx_v_event->data1)) < 0) __PYX_ERR(0, 195, __pyx_L1_error)
  __pyx_v_event_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyorama/event.pyx":199
 *             "data": <dict>event.data1,
 *         }
 *         Py_XDECREF(<PyObject *>event.data1)             # <<<<<<<<<<<<<<
 *         return event_data
 * 
 */
  Py_XDECREF(((PyObject *)__pyx_v_event->data1));

  /* "pyorama/event.pyx":200
 *         }
 *         Py_XDECREF(<PyObject *>event.data1)
 *         return event_data             # <<<<<<<<<<<<<<
 * 
 *     def update(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_event_data);
  __pyx_r = __pyx_v_event_data;
  goto __pyx_L0;

  /* "pyorama/event.pyx":193
 *         return event_data
 * 
 *     cdef dict c_parse_user_event(self, SDL_UserEvent *event, double time_stamp):             # <<<<<<<<<<<<<<
 *         cdef dict event_data = {
 *             "type": event.type,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyorama.event.EventManager.c_parse_user_event", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_event_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/event.pyx":202
 *         return event_data
 * 
 *     def update(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double time_stamp
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_5event_12EventManager_19update(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_5event_12EventManager_19update = {"update", (PyCFunction)__pyx_pw_7pyorama_5event_12EventManager_19update, METH_NOARGS, 0};
static PyObject *__pyx_pw_7pyorama_5event_12EventManager_19update(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update (wrapper)", 0);
  __pyx_r = __pyx_pf_7pyorama_5event_12EventManager_18update(((struct __pyx_obj_7pyorama_5event_EventManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_5event_12EventManager_18update(struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self) {
  double __pyx_v_time_stamp;
  SDL_Event __pyx_v_event;
  enum __pyx_t_7pyorama_5event_EventTypes __pyx_v_event_type;
  struct __pyx_obj_7pyorama_4core_11item_vector_ItemVector *__pyx_v_listeners = 0;
  __pyx_t_7pyorama_4core_6handle_Handle __pyx_v_listener;
  __pyx_t_7pyorama_5event_ListenerC *__pyx_v_listener_ptr;
  size_t __pyx_v_i;
  PyObject *__pyx_v_callback = 0;
  PyObject *__pyx_v_event_data = 0;
  PyObject *__pyx_v_user_data = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  size_t __pyx_t_7;
  size_t __pyx_t_8;
  size_t __pyx_t_9;
  __pyx_t_7pyorama_5event_ListenerC *__pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  __Pyx_RefNannySetupContext("update", 0);

  /* "pyorama/event.pyx":216
 *             dict user_data
 * 
 *         time_stamp = time.time()             # <<<<<<<<<<<<<<
 * 
 *         while SDL_PollEvent(&event) != 0:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_time_stamp = __pyx_t_4;

  /* "pyorama/event.pyx":218
 *         time_stamp = time.time()
 * 
 *         while SDL_PollEvent(&event) != 0:             # <<<<<<<<<<<<<<
 *             if event.type == SDL_WINDOWEVENT:
 *                 event_data = self.c_parse_window_event(&event.window, time_stamp)
 */
  while (1) {
    __pyx_t_5 = ((SDL_PollEvent((&__pyx_v_event)) != 0) != 0);
    if (!__pyx_t_5) break;

    /* "pyorama/event.pyx":219
 * 
 *         while SDL_PollEvent(&event) != 0:
 *             if event.type == SDL_WINDOWEVENT:             # <<<<<<<<<<<<<<
 *                 event_data = self.c_parse_window_event(&event.window, time_stamp)
 *             elif event.type == SDL_KEYDOWN:
 */
    __pyx_t_5 = ((__pyx_v_event.type == SDL_WINDOWEVENT) != 0);
    if (__pyx_t_5) {

      /* "pyorama/event.pyx":220
 *         while SDL_PollEvent(&event) != 0:
 *             if event.type == SDL_WINDOWEVENT:
 *                 event_data = self.c_parse_window_event(&event.window, time_stamp)             # <<<<<<<<<<<<<<
 *             elif event.type == SDL_KEYDOWN:
 *                 event_data = self.c_parse_key_down_event(&event.key, time_stamp)
 */
      __pyx_t_1 = __pyx_f_7pyorama_5event_12EventManager_c_parse_window_event(__pyx_v_self, (&__pyx_v_event.window), __pyx_v_time_stamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 220, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_event_data, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "pyorama/event.pyx":219
 * 
 *         while SDL_PollEvent(&event) != 0:
 *             if event.type == SDL_WINDOWEVENT:             # <<<<<<<<<<<<<<
 *                 event_data = self.c_parse_window_event(&event.window, time_stamp)
 *             elif event.type == SDL_KEYDOWN:
 */
      goto __pyx_L5;
    }

    /* "pyorama/event.pyx":221
 *             if event.type == SDL_WINDOWEVENT:
 *                 event_data = self.c_parse_window_event(&event.window, time_stamp)
 *             elif event.type == SDL_KEYDOWN:             # <<<<<<<<<<<<<<
 *                 event_data = self.c_parse_key_down_event(&event.key, time_stamp)
 *             elif event.type == SDL_KEYUP:
 */
    __pyx_t_5 = ((__pyx_v_event.type == SDL_KEYDOWN) != 0);
    if (__pyx_t_5) {

      /* "pyorama/event.pyx":222
 *                 event_data = self.c_parse_window_event(&event.window, time_stamp)
 *             elif event.type == SDL_KEYDOWN:
 *                 event_data = self.c_parse_key_down_event(&event.key, time_stamp)             # <<<<<<<<<<<<<<
 *             elif event.type == SDL_KEYUP:
 *                 event_data = self.c_parse_key_up_event(&event.key, time_stamp)
 */
      __pyx_t_1 = __pyx_f_7pyorama_5event_12EventManager_c_parse_key_down_event(__pyx_v_self, (&__pyx_v_event.key), __pyx_v_time_stamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 222, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_event_data, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "pyorama/event.pyx":221
 *             if event.type == SDL_WINDOWEVENT:
 *                 event_data = self.c_parse_window_event(&event.window, time_stamp)
 *             elif event.type == SDL_KEYDOWN:             # <<<<<<<<<<<<<<
 *                 event_data = self.c_parse_key_down_event(&event.key, time_stamp)
 *             elif event.type == SDL_KEYUP:
 */
      goto __pyx_L5;
    }

    /* "pyorama/event.pyx":223
 *             elif event.type == SDL_KEYDOWN:
 *                 event_data = self.c_parse_key_down_event(&event.key, time_stamp)
 *             elif event.type == SDL_KEYUP:             # <<<<<<<<<<<<<<
 *                 event_data = self.c_parse_key_up_event(&event.key, time_stamp)
 *             elif event.type == SDL_MOUSEBUTTONDOWN:
 */
    __pyx_t_5 = ((__pyx_v_event.type == SDL_KEYUP) != 0);
    if (__pyx_t_5) {

      /* "pyorama/event.pyx":224
 *                 event_data = self.c_parse_key_down_event(&event.key, time_stamp)
 *             elif event.type == SDL_KEYUP:
 *                 event_data = self.c_parse_key_up_event(&event.key, time_stamp)             # <<<<<<<<<<<<<<
 *             elif event.type == SDL_MOUSEBUTTONDOWN:
 *                 event_data = self.c_parse_mouse_button_down_event(&event.button, time_stamp)
 */
      __pyx_t_1 = __pyx_f_7pyorama_5event_12EventManager_c_parse_key_up_event(__pyx_v_self, (&__pyx_v_event.key), __pyx_v_time_stamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_event_data, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "pyorama/event.pyx":223
 *             elif event.type == SDL_KEYDOWN:
 *                 event_data = self.c_parse_key_down_event(&event.key, time_stamp)
 *             elif event.type == SDL_KEYUP:             # <<<<<<<<<<<<<<
 *                 event_data = self.c_parse_key_up_event(&event.key, time_stamp)
 *             elif event.type == SDL_MOUSEBUTTONDOWN:
 */
      goto __pyx_L5;
    }

    /* "pyorama/event.pyx":225
 *             elif event.type == SDL_KEYUP:
 *                 event_data = self.c_parse_key_up_event(&event.key, time_stamp)
 *             elif event.type == SDL_MOUSEBUTTONDOWN:             # <<<<<<<<<<<<<<
 *                 event_data = self.c_parse_mouse_button_down_event(&event.button, time_stamp)
 *             elif event.type == SDL_MOUSEBUTTONUP:
 */
    __pyx_t_5 = ((__pyx_v_event.type == SDL_MOUSEBUTTONDOWN) != 0);
    if (__pyx_t_5) {

      /* "pyorama/event.pyx":226
 *                 event_data = self.c_parse_key_up_event(&event.key, time_stamp)
 *             elif event.type == SDL_MOUSEBUTTONDOWN:
 *                 event_data = self.c_parse_mouse_button_down_event(&event.button, time_stamp)             # <<<<<<<<<<<<<<
 *             elif event.type == SDL_MOUSEBUTTONUP:
 *                 event_data = self.c_parse_mouse_button_up_event(&event.button, time_stamp)
 */
      __pyx_t_1 = __pyx_f_7pyorama_5event_12EventManager_c_parse_mouse_button_down_event(__pyx_v_self, (&__pyx_v_event.button), __pyx_v_time_stamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_event_data, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "pyorama/event.pyx":225
 *             elif event.type == SDL_KEYUP:
 *                 event_data = self.c_parse_key_up_event(&event.key, time_stamp)
 *             elif event.type == SDL_MOUSEBUTTONDOWN:             # <<<<<<<<<<<<<<
 *                 event_data = self.c_parse_mouse_button_down_event(&event.button, time_stamp)
 *             elif event.type == SDL_MOUSEBUTTONUP:
 */
      goto __pyx_L5;
    }

    /* "pyorama/event.pyx":227
 *             elif event.type == SDL_MOUSEBUTTONDOWN:
 *                 event_data = self.c_parse_mouse_button_down_event(&event.button, time_stamp)
 *             elif event.type == SDL_MOUSEBUTTONUP:             # <<<<<<<<<<<<<<
 *                 event_data = self.c_parse_mouse_button_up_event(&event.button, time_stamp)
 *             elif event.type == SDL_MOUSEMOTION:
 */
    __pyx_t_5 = ((__pyx_v_event.type == SDL_MOUSEBUTTONUP) != 0);
    if (__pyx_t_5) {

      /* "pyorama/event.pyx":228
 *                 event_data = self.c_parse_mouse_button_down_event(&event.button, time_stamp)
 *             elif event.type == SDL_MOUSEBUTTONUP:
 *                 event_data = self.c_parse_mouse_button_up_event(&event.button, time_stamp)             # <<<<<<<<<<<<<<
 *             elif event.type == SDL_MOUSEMOTION:
 *                 event_data = self.c_parse_mouse_motion_event(&event.motion, time_stamp)
 */
      __pyx_t_1 = __pyx_f_7pyorama_5event_12EventManager_c_parse_mouse_button_up_event(__pyx_v_self, (&__pyx_v_event.button), __pyx_v_time_stamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 228, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_event_data, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "pyorama/event.pyx":227
 *             elif event.type == SDL_MOUSEBUTTONDOWN:
 *                 event_data = self.c_parse_mouse_button_down_event(&event.button, time_stamp)
 *             elif event.type == SDL_MOUSEBUTTONUP:             # <<<<<<<<<<<<<<
 *                 event_data = self.c_parse_mouse_button_up_event(&event.button, time_stamp)
 *             elif event.type == SDL_MOUSEMOTION:
 */
      goto __pyx_L5;
    }

    /* "pyorama/event.pyx":229
 *             elif event.type == SDL_MOUSEBUTTONUP:
 *                 event_data = self.c_parse_mouse_button_up_event(&event.button, time_stamp)
 *             elif event.type == SDL_MOUSEMOTION:             # <<<<<<<<<<<<<<
 *                 event_data = self.c_parse_mouse_motion_event(&event.motion, time_stamp)
 *             elif event.type == SDL_MOUSEWHEEL:
 */
    __pyx_t_5 = ((__pyx_v_event.type == SDL_MOUSEMOTION) != 0);
    if (__pyx_t_5) {

      /* "pyorama/event.pyx":230
 *                 event_data = self.c_parse_mouse_button_up_event(&event.button, time_stamp)
 *             elif event.type == SDL_MOUSEMOTION:
 *                 event_data = self.c_parse_mouse_motion_event(&event.motion, time_stamp)             # <<<<<<<<<<<<<<
 *             elif event.type == SDL_MOUSEWHEEL:
 *                 event_data = self.c_parse_mouse_wheel_event(&event.wheel, time_stamp)
 */
      __pyx_t_1 = __pyx_f_7pyorama_5event_12EventManager_c_parse_mouse_motion_event(__pyx_v_self, (&__pyx_v_event.motion), __pyx_v_time_stamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 230, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_event_data, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "pyorama/event.pyx":229
 *             elif event.type == SDL_MOUSEBUTTONUP:
 *                 event_data = self.c_parse_mouse_button_up_event(&event.button, time_stamp)
 *             elif event.type == SDL_MOUSEMOTION:             # <<<<<<<<<<<<<<
 *                 event_data = self.c_parse_mouse_motion_event(&event.motion, time_stamp)
 *             elif event.type == SDL_MOUSEWHEEL:
 */
      goto __pyx_L5;
    }

    /* "pyorama/event.pyx":231
 *             elif event.type == SDL_MOUSEMOTION:
 *                 event_data = self.c_parse_mouse_motion_event(&event.motion, time_stamp)
 *             elif event.type == SDL_MOUSEWHEEL:             # <<<<<<<<<<<<<<
 *                 event_data = self.c_parse_mouse_wheel_event(&event.wheel, time_stamp)
 *             elif event.type >= SDL_USEREVENT:
 */
    __pyx_t_5 = ((__pyx_v_event.type == SDL_MOUSEWHEEL) != 0);
    if (__pyx_t_5) {

      /* "pyorama/event.pyx":232
 *                 event_data = self.c_parse_mouse_motion_event(&event.motion, time_stamp)
 *             elif event.type == SDL_MOUSEWHEEL:
 *                 event_data = self.c_parse_mouse_wheel_event(&event.wheel, time_stamp)             # <<<<<<<<<<<<<<
 *             elif event.type >= SDL_USEREVENT:
 *                 event_data = self.c_parse_user_event(&event.user, time_stamp)
 */
      __pyx_t_1 = __pyx_f_7pyorama_5event_12EventManager_c_parse_mouse_wheel_event(__pyx_v_self, (&__pyx_v_event.wheel), __pyx_v_time_stamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 232, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_event_data, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "pyorama/event.pyx":231
 *             elif event.type == SDL_MOUSEMOTION:
 *                 event_data = self.c_parse_mouse_motion_event(&event.motion, time_stamp)
 *             elif event.type == SDL_MOUSEWHEEL:             # <<<<<<<<<<<<<<
 *                 event_data = self.c_parse_mouse_wheel_event(&event.wheel, time_stamp)
 *             elif event.type >= SDL_USEREVENT:
 */
      goto __pyx_L5;
    }

    /* "pyorama/event.pyx":233
 *             elif event.type == SDL_MOUSEWHEEL:
 *                 event_data = self.c_parse_mouse_wheel_event(&event.wheel, time_stamp)
 *             elif event.type >= SDL_USEREVENT:             # <<<<<<<<<<<<<<
 *                 event_data = self.c_parse_user_event(&event.user, time_stamp)
 *             else: pass
 */
    __pyx_t_5 = ((__pyx_v_event.type >= SDL_USEREVENT) != 0);
    if (__pyx_t_5) {

      /* "pyorama/event.pyx":234
 *                 event_data = self.c_parse_mouse_wheel_event(&event.wheel, time_stamp)
 *             elif event.type >= SDL_USEREVENT:
 *                 event_data = self.c_parse_user_event(&event.user, time_stamp)             # <<<<<<<<<<<<<<
 *             else: pass
 * 
 */
      __pyx_t_1 = __pyx_f_7pyorama_5event_12EventManager_c_parse_user_event(__pyx_v_self, (&__pyx_v_event.user), __pyx_v_time_stamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_event_data, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "pyorama/event.pyx":233
 *             elif event.type == SDL_MOUSEWHEEL:
 *                 event_data = self.c_parse_mouse_wheel_event(&event.wheel, time_stamp)
 *             elif event.type >= SDL_USEREVENT:             # <<<<<<<<<<<<<<
 *                 event_data = self.c_parse_user_event(&event.user, time_stamp)
 *             else: pass
 */
      goto __pyx_L5;
    }

    /* "pyorama/event.pyx":235
 *             elif event.type >= SDL_USEREVENT:
 *                 event_data = self.c_parse_user_event(&event.user, time_stamp)
 *             else: pass             # <<<<<<<<<<<<<<
 * 
 *             event_type = <EventTypes>event.type
 */
    /*else*/ {
    }
    __pyx_L5:;

    /* "pyorama/event.pyx":237
 *             else: pass
 * 
 *             event_type = <EventTypes>event.type             # <<<<<<<<<<<<<<
 *             if event_type in self.listener_map:
 *                 listeners = <ItemVector>self.listener_map[event_type]
 */
    __pyx_v_event_type = ((enum __pyx_t_7pyorama_5event_EventTypes)__pyx_v_event.type);

    /* "pyorama/event.pyx":238
 * 
 *             event_type = <EventTypes>event.type
 *             if event_type in self.listener_map:             # <<<<<<<<<<<<<<
 *                 listeners = <ItemVector>self.listener_map[event_type]
 *                 for i in range(listeners.num_items):
 */
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_v_event_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_self->listener_map == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 238, __pyx_L1_error)
    }
    __pyx_t_5 = (__Pyx_PyDict_ContainsTF(__pyx_t_1, __pyx_v_self->listener_map, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 238, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "pyorama/event.pyx":239
 *             event_type = <EventTypes>event.type
 *             if event_type in self.listener_map:
 *                 listeners = <ItemVector>self.listener_map[event_type]             # <<<<<<<<<<<<<<
 *                 for i in range(listeners.num_items):
 *                     listeners.c_get(i, &listener)
 */
      if (unlikely(__pyx_v_self->listener_map == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 239, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_v_event_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 239, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_self->listener_map, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 239, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __pyx_t_3;
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF_SET(__pyx_v_listeners, ((struct __pyx_obj_7pyorama_4core_11item_vector_ItemVector *)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "pyorama/event.pyx":240
 *             if event_type in self.listener_map:
 *                 listeners = <ItemVector>self.listener_map[event_type]
 *                 for i in range(listeners.num_items):             # <<<<<<<<<<<<<<
 *                     listeners.c_get(i, &listener)
 *                     listener_ptr = self.c_listener_get_ptr(listener)
 */
      __pyx_t_7 = __pyx_v_listeners->num_items;
      __pyx_t_8 = __pyx_t_7;
      for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
        __pyx_v_i = __pyx_t_9;

        /* "pyorama/event.pyx":241
 *                 listeners = <ItemVector>self.listener_map[event_type]
 *                 for i in range(listeners.num_items):
 *                     listeners.c_get(i, &listener)             # <<<<<<<<<<<<<<
 *                     listener_ptr = self.c_listener_get_ptr(listener)
 *                     callback = <object>listener_ptr.callback
 */
        ((struct __pyx_vtabstruct_7pyorama_4core_11item_vector_ItemVector *)__pyx_v_listeners->__pyx_vtab)->c_get(__pyx_v_listeners, __pyx_v_i, (&__pyx_v_listener)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 241, __pyx_L1_error)

        /* "pyorama/event.pyx":242
 *                 for i in range(listeners.num_items):
 *                     listeners.c_get(i, &listener)
 *                     listener_ptr = self.c_listener_get_ptr(listener)             # <<<<<<<<<<<<<<
 *                     callback = <object>listener_ptr.callback
 *                     user_data = <object>listener_ptr.user_data
 */
        __pyx_t_10 = __pyx_f_7pyorama_5event_12EventManager_c_listener_get_ptr(__pyx_v_self, __pyx_v_listener); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 242, __pyx_L1_error)
        __pyx_v_listener_ptr = __pyx_t_10;

        /* "pyorama/event.pyx":243
 *                     listeners.c_get(i, &listener)
 *                     listener_ptr = self.c_listener_get_ptr(listener)
 *                     callback = <object>listener_ptr.callback             # <<<<<<<<<<<<<<
 *                     user_data = <object>listener_ptr.user_data
 *                     callback(event_data, user_data)
 */
        __pyx_t_1 = ((PyObject *)__pyx_v_listener_ptr->callback);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_XDECREF_SET(__pyx_v_callback, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "pyorama/event.pyx":244
 *                     listener_ptr = self.c_listener_get_ptr(listener)
 *                     callback = <object>listener_ptr.callback
 *                     user_data = <object>listener_ptr.user_data             # <<<<<<<<<<<<<<
 *                     callback(event_data, user_data)
 */
        if (!(likely(PyDict_CheckExact(((PyObject *)__pyx_v_listener_ptr->user_data)))||((((PyObject *)__pyx_v_listener_ptr->user_data)) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(((PyObject *)__pyx_v_listener_ptr->user_data))->tp_name), 0))) __PYX_ERR(0, 244, __pyx_L1_error)
        __pyx_t_1 = ((PyObject *)__pyx_v_listener_ptr->user_data);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_XDECREF_SET(__pyx_v_user_data, ((PyObject*)__pyx_t_1));
        __pyx_t_1 = 0;

        /* "pyorama/event.pyx":245
 *                     callback = <object>listener_ptr.callback
 *                     user_data = <object>listener_ptr.user_data
 *                     callback(event_data, user_data)             # <<<<<<<<<<<<<<
 */
        if (unlikely(!__pyx_v_event_data)) { __Pyx_RaiseUnboundLocalError("event_data"); __PYX_ERR(0, 245, __pyx_L1_error) }
        __Pyx_INCREF(__pyx_v_callback);
        __pyx_t_3 = __pyx_v_callback; __pyx_t_2 = NULL;
        __pyx_t_11 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_11 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_event_data, __pyx_v_user_data};
          __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 245, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_GOTREF(__pyx_t_1);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_event_data, __pyx_v_user_data};
          __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 245, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_GOTREF(__pyx_t_1);
        } else
        #endif
        {
          __pyx_t_12 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 245, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          if (__pyx_t_2) {
            __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_2); __pyx_t_2 = NULL;
          }
          __Pyx_INCREF(__pyx_v_event_data);
          __Pyx_GIVEREF(__pyx_v_event_data);
          PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_11, __pyx_v_event_data);
          __Pyx_INCREF(__pyx_v_user_data);
          __Pyx_GIVEREF(__pyx_v_user_data);
          PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_11, __pyx_v_user_data);
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 245, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }

      /* "pyorama/event.pyx":238
 * 
 *             event_type = <EventTypes>event.type
 *             if event_type in self.listener_map:             # <<<<<<<<<<<<<<
 *                 listeners = <ItemVector>self.listener_map[event_type]
 *                 for i in range(listeners.num_items):
 */
    }
  }

  /* "pyorama/event.pyx":202
 *         return event_data
 * 
 *     def update(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double time_stamp
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("pyorama.event.EventManager.update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_listeners);
  __Pyx_XDECREF(__pyx_v_callback);
  __Pyx_XDECREF(__pyx_v_event_data);
  __Pyx_XDECREF(__pyx_v_user_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_5event_12EventManager_21__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_5event_12EventManager_21__reduce_cython__ = {"__reduce_cython__", (PyCFunction)__pyx_pw_7pyorama_5event_12EventManager_21__reduce_cython__, METH_NOARGS, 0};
static PyObject *__pyx_pw_7pyorama_5event_12EventManager_21__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pyorama_5event_12EventManager_20__reduce_cython__(((struct __pyx_obj_7pyorama_5event_EventManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_5event_12EventManager_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyorama.event.EventManager.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_5event_12EventManager_23__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_5event_12EventManager_23__setstate_cython__ = {"__setstate_cython__", (PyCFunction)__pyx_pw_7pyorama_5event_12EventManager_23__setstate_cython__, METH_O, 0};
static PyObject *__pyx_pw_7pyorama_5event_12EventManager_23__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pyorama_5event_12EventManager_22__setstate_cython__(((struct __pyx_obj_7pyorama_5event_EventManager *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_5event_12EventManager_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7pyorama_5event_EventManager *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyorama.event.EventManager.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EnumBase":16
 * @cython.internal
 * cdef class __Pyx_EnumMeta(type):
 *     def __init__(cls, name, parents, dct):             # <<<<<<<<<<<<<<
 *         type.__init__(cls, name, parents, dct)
 *         cls.__members__ = __Pyx_OrderedDict()
 */

/* Python wrapper */
static int __pyx_pw_8EnumBase_14__Pyx_EnumMeta_1__init__(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8EnumBase_14__Pyx_EnumMeta_1__init__(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_parents = 0;
  PyObject *__pyx_v_dct = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_parents,&__pyx_n_s_dct,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parents)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); __PYX_ERR(1, 16, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dct)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); __PYX_ERR(1, 16, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_name = values[0];
    __pyx_v_parents = values[1];
    __pyx_v_dct = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 16, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("EnumBase.__Pyx_EnumMeta.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8EnumBase_14__Pyx_EnumMeta___init__(((struct __pyx_obj___Pyx_EnumMeta *)__pyx_v_cls), __pyx_v_name, __pyx_v_parents, __pyx_v_dct);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8EnumBase_14__Pyx_EnumMeta___init__(struct __pyx_obj___Pyx_EnumMeta *__pyx_v_cls, PyObject *__pyx_v_name, PyObject *__pyx_v_parents, PyObject *__pyx_v_dct) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "EnumBase":17
 * cdef class __Pyx_EnumMeta(type):
 *     def __init__(cls, name, parents, dct):
 *         type.__init__(cls, name, parents, dct)             # <<<<<<<<<<<<<<
 *         cls.__members__ = __Pyx_OrderedDict()
 *     def __iter__(cls):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyType_Type)), __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_3, ((PyObject *)__pyx_v_cls), __pyx_v_name, __pyx_v_parents, __pyx_v_dct};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_3, ((PyObject *)__pyx_v_cls), __pyx_v_name, __pyx_v_parents, __pyx_v_dct};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 17, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_cls));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_cls));
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, ((PyObject *)__pyx_v_cls));
    __Pyx_INCREF(__pyx_v_name);
    __Pyx_GIVEREF(__pyx_v_name);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_name);
    __Pyx_INCREF(__pyx_v_parents);
    __Pyx_GIVEREF(__pyx_v_parents);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_parents);
    __Pyx_INCREF(__pyx_v_dct);
    __Pyx_GIVEREF(__pyx_v_dct);
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_4, __pyx_v_dct);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "EnumBase":18
 *     def __init__(cls, name, parents, dct):
 *         type.__init__(cls, name, parents, dct)
 *         cls.__members__ = __Pyx_OrderedDict()             # <<<<<<<<<<<<<<
 *     def __iter__(cls):
 *         return iter(cls.__members__.values())
 */
  __Pyx_INCREF(__Pyx_OrderedDict);
  __pyx_t_2 = __Pyx_OrderedDict; __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_cls), __pyx_n_s_members, __pyx_t_1) < 0) __PYX_ERR(1, 18, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "EnumBase":16
 * @cython.internal
 * cdef class __Pyx_EnumMeta(type):
 *     def __init__(cls, name, parents, dct):             # <<<<<<<<<<<<<<
 *         type.__init__(cls, name, parents, dct)
 *         cls.__members__ = __Pyx_OrderedDict()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("EnumBase.__Pyx_EnumMeta.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EnumBase":19
 *         type.__init__(cls, name, parents, dct)
 *         cls.__members__ = __Pyx_OrderedDict()
 *     def __iter__(cls):             # <<<<<<<<<<<<<<
 *         return iter(cls.__members__.values())
 *     def __getitem__(cls, name):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumMeta_3__iter__(PyObject *__pyx_v_cls); /*proto*/
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumMeta_3__iter__(PyObject *__pyx_v_cls) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8EnumBase_14__Pyx_EnumMeta_2__iter__(((struct __pyx_obj___Pyx_EnumMeta *)__pyx_v_cls));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumMeta_2__iter__(struct __pyx_obj___Pyx_EnumMeta *__pyx_v_cls) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "EnumBase":20
 *         cls.__members__ = __Pyx_OrderedDict()
 *     def __iter__(cls):
 *         return iter(cls.__members__.values())             # <<<<<<<<<<<<<<
 *     def __getitem__(cls, name):
 *         return cls.__members__[name]
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_cls), __pyx_n_s_members); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_values); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "EnumBase":19
 *         type.__init__(cls, name, parents, dct)
 *         cls.__members__ = __Pyx_OrderedDict()
 *     def __iter__(cls):             # <<<<<<<<<<<<<<
 *         return iter(cls.__members__.values())
 *     def __getitem__(cls, name):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("EnumBase.__Pyx_EnumMeta.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EnumBase":21
 *     def __iter__(cls):
 *         return iter(cls.__members__.values())
 *     def __getitem__(cls, name):             # <<<<<<<<<<<<<<
 *         return cls.__members__[name]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumMeta_5__getitem__(PyObject *__pyx_v_cls, PyObject *__pyx_v_name); /*proto*/
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumMeta_5__getitem__(PyObject *__pyx_v_cls, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8EnumBase_14__Pyx_EnumMeta_4__getitem__(((struct __pyx_obj___Pyx_EnumMeta *)__pyx_v_cls), ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumMeta_4__getitem__(struct __pyx_obj___Pyx_EnumMeta *__pyx_v_cls, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "EnumBase":22
 *         return iter(cls.__members__.values())
 *     def __getitem__(cls, name):
 *         return cls.__members__[name]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_cls), __pyx_n_s_members); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "EnumBase":21
 *     def __iter__(cls):
 *         return iter(cls.__members__.values())
 *     def __getitem__(cls, name):             # <<<<<<<<<<<<<<
 *         return cls.__members__[name]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("EnumBase.__Pyx_EnumMeta.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumMeta_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumMeta_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8EnumBase_14__Pyx_EnumMeta_6__reduce_cython__(((struct __pyx_obj___Pyx_EnumMeta *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumMeta_6__reduce_cython__(struct __pyx_obj___Pyx_EnumMeta *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle___Pyx_EnumMeta, (type(self), 0xd41d8cd, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle___Pyx_EnumMeta, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle___Pyx_EnumMeta, (type(self), 0xd41d8cd, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle___Pyx_EnumMeta, (type(self), 0xd41d8cd, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle___Pyx_EnumMeta); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle___Pyx_EnumMeta, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle___Pyx_EnumMeta, (type(self), 0xd41d8cd, None), state
 *     else:
 *         return __pyx_unpickle___Pyx_EnumMeta, (type(self), 0xd41d8cd, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle___Pyx_EnumMeta__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle___Pyx_EnumMeta); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("EnumBase.__Pyx_EnumMeta.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle___Pyx_EnumMeta, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle___Pyx_EnumMeta__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumMeta_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumMeta_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8EnumBase_14__Pyx_EnumMeta_8__setstate_cython__(((struct __pyx_obj___Pyx_EnumMeta *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumMeta_8__setstate_cython__(struct __pyx_obj___Pyx_EnumMeta *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle___Pyx_EnumMeta, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle___Pyx_EnumMeta__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_unpickle___Pyx_EnumMeta__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle___Pyx_EnumMeta, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle___Pyx_EnumMeta__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EnumBase.__Pyx_EnumMeta.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EnumBase":28
 * class __Pyx_EnumBase(int):
 *     __metaclass__ = __Pyx_EnumMeta
 *     def __new__(cls, value, name=None):             # <<<<<<<<<<<<<<
 *         for v in cls:
 *             if v == value:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumBase_1__new__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8EnumBase_14__Pyx_EnumBase_1__new__ = {"__new__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8EnumBase_14__Pyx_EnumBase_1__new__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumBase_1__new__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_cls = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__new__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cls,&__pyx_n_s_value,&__pyx_n_s_name,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cls)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__new__", 0, 2, 3, 1); __PYX_ERR(1, 28, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__new__") < 0)) __PYX_ERR(1, 28, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_cls = values[0];
    __pyx_v_value = values[1];
    __pyx_v_name = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__new__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 28, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("EnumBase.__Pyx_EnumBase.__new__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8EnumBase_14__Pyx_EnumBase___new__(__pyx_self, __pyx_v_cls, __pyx_v_value, __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumBase___new__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cls, PyObject *__pyx_v_value, PyObject *__pyx_v_name) {
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_v_res = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("__new__", 0);

  /* "EnumBase":29
 *     __metaclass__ = __Pyx_EnumMeta
 *     def __new__(cls, value, name=None):
 *         for v in cls:             # <<<<<<<<<<<<<<
 *             if v == value:
 *                 return v
 */
  if (likely(PyList_CheckExact(__pyx_v_cls)) || PyTuple_CheckExact(__pyx_v_cls)) {
    __pyx_t_1 = __pyx_v_cls; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_cls); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 29, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 29, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 29, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 29, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 29, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 29, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 29, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "EnumBase":30
 *     def __new__(cls, value, name=None):
 *         for v in cls:
 *             if v == value:             # <<<<<<<<<<<<<<
 *                 return v
 *         if name is None:
 */
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_v, __pyx_v_value, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 30, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(1, 30, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_5) {

      /* "EnumBase":31
 *         for v in cls:
 *             if v == value:
 *                 return v             # <<<<<<<<<<<<<<
 *         if name is None:
 *             raise ValueError("Unknown enum value: '%s'" % value)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_v);
      __pyx_r = __pyx_v_v;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "EnumBase":30
 *     def __new__(cls, value, name=None):
 *         for v in cls:
 *             if v == value:             # <<<<<<<<<<<<<<
 *                 return v
 *         if name is None:
 */
    }

    /* "EnumBase":29
 *     __metaclass__ = __Pyx_EnumMeta
 *     def __new__(cls, value, name=None):
 *         for v in cls:             # <<<<<<<<<<<<<<
 *             if v == value:
 *                 return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "EnumBase":32
 *             if v == value:
 *                 return v
 *         if name is None:             # <<<<<<<<<<<<<<
 *             raise ValueError("Unknown enum value: '%s'" % value)
 *         res = int.__new__(cls, value)
 */
  __pyx_t_5 = (__pyx_v_name == Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (unlikely(__pyx_t_6)) {

    /* "EnumBase":33
 *                 return v
 *         if name is None:
 *             raise ValueError("Unknown enum value: '%s'" % value)             # <<<<<<<<<<<<<<
 *         res = int.__new__(cls, value)
 *         res.name = name
 */
    __pyx_t_1 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Unknown_enum_value_s, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 33, __pyx_L1_error)

    /* "EnumBase":32
 *             if v == value:
 *                 return v
 *         if name is None:             # <<<<<<<<<<<<<<
 *             raise ValueError("Unknown enum value: '%s'" % value)
 *         res = int.__new__(cls, value)
 */
  }

  /* "EnumBase":34
 *         if name is None:
 *             raise ValueError("Unknown enum value: '%s'" % value)
 *         res = int.__new__(cls, value)             # <<<<<<<<<<<<<<
 *         res.name = name
 *         setattr(cls, name, res)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyInt_Type)), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_cls, __pyx_v_value};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 34, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_cls, __pyx_v_value};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 34, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 34, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_v_cls);
    __Pyx_GIVEREF(__pyx_v_cls);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_v_cls);
    __Pyx_INCREF(__pyx_v_value);
    __Pyx_GIVEREF(__pyx_v_value);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_value);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_9, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 34, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_res = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "EnumBase":35
 *             raise ValueError("Unknown enum value: '%s'" % value)
 *         res = int.__new__(cls, value)
 *         res.name = name             # <<<<<<<<<<<<<<
 *         setattr(cls, name, res)
 *         cls.__members__[name] = res
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_res, __pyx_n_s_name, __pyx_v_name) < 0) __PYX_ERR(1, 35, __pyx_L1_error)

  /* "EnumBase":36
 *         res = int.__new__(cls, value)
 *         res.name = name
 *         setattr(cls, name, res)             # <<<<<<<<<<<<<<
 *         cls.__members__[name] = res
 *         return res
 */
  __pyx_t_10 = PyObject_SetAttr(__pyx_v_cls, __pyx_v_name, __pyx_v_res); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(1, 36, __pyx_L1_error)

  /* "EnumBase":37
 *         res.name = name
 *         setattr(cls, name, res)
 *         cls.__members__[name] = res             # <<<<<<<<<<<<<<
 *         return res
 *     def __repr__(self):
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_cls, __pyx_n_s_members); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(PyObject_SetItem(__pyx_t_4, __pyx_v_name, __pyx_v_res) < 0)) __PYX_ERR(1, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "EnumBase":38
 *         setattr(cls, name, res)
 *         cls.__members__[name] = res
 *         return res             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "EnumBase":28
 * class __Pyx_EnumBase(int):
 *     __metaclass__ = __Pyx_EnumMeta
 *     def __new__(cls, value, name=None):             # <<<<<<<<<<<<<<
 *         for v in cls:
 *             if v == value:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("EnumBase.__Pyx_EnumBase.__new__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EnumBase":39
 *         cls.__members__[name] = res
 *         return res
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumBase_3__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_8EnumBase_14__Pyx_EnumBase_3__repr__ = {"__repr__", (PyCFunction)__pyx_pw_8EnumBase_14__Pyx_EnumBase_3__repr__, METH_O, 0};
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumBase_3__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8EnumBase_14__Pyx_EnumBase_2__repr__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumBase_2__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "EnumBase":40
 *         return res
 *     def __repr__(self):
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)             # <<<<<<<<<<<<<<
 *     def __str__(self):
 *         return "%s.%s" % (self.__class__.__name__, self.name)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_class); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_name_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_self);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_s_s_d, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EnumBase":39
 *         cls.__members__[name] = res
 *         return res
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("EnumBase.__Pyx_EnumBase.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EnumBase":41
 *     def __repr__(self):
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "%s.%s" % (self.__class__.__name__, self.name)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumBase_5__str__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_8EnumBase_14__Pyx_EnumBase_5__str__ = {"__str__", (PyCFunction)__pyx_pw_8EnumBase_14__Pyx_EnumBase_5__str__, METH_O, 0};
static PyObject *__pyx_pw_8EnumBase_14__Pyx_EnumBase_5__str__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8EnumBase_14__Pyx_EnumBase_4__str__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8EnumBase_14__Pyx_EnumBase_4__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "EnumBase":42
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):
 *         return "%s.%s" % (self.__class__.__name__, self.name)             # <<<<<<<<<<<<<<
 * 
 * if PY_VERSION_HEX >= 0x03040000:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_class); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_name_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_s_s, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EnumBase":41
 *     def __repr__(self):
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "%s.%s" % (self.__class__.__name__, self.name)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("EnumBase.__Pyx_EnumBase.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle___Pyx_EnumMeta(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_8EnumBase_1__pyx_unpickle___Pyx_EnumMeta(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8EnumBase_1__pyx_unpickle___Pyx_EnumMeta = {"__pyx_unpickle___Pyx_EnumMeta", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8EnumBase_1__pyx_unpickle___Pyx_EnumMeta, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8EnumBase_1__pyx_unpickle___Pyx_EnumMeta(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle___Pyx_EnumMeta (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle___Pyx_EnumMeta", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle___Pyx_EnumMeta", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle___Pyx_EnumMeta") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle___Pyx_EnumMeta", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("EnumBase.__pyx_unpickle___Pyx_EnumMeta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8EnumBase___pyx_unpickle___Pyx_EnumMeta(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8EnumBase___pyx_unpickle___Pyx_EnumMeta(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle___Pyx_EnumMeta", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xd41d8cd) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = __Pyx_EnumMeta.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = __Pyx_EnumMeta.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = __Pyx_EnumMeta.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle___Pyx_EnumMeta__set_state(<__Pyx_EnumMeta> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype___Pyx_EnumMeta), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = __Pyx_EnumMeta.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle___Pyx_EnumMeta__set_state(<__Pyx_EnumMeta> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = __Pyx_EnumMeta.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle___Pyx_EnumMeta__set_state(<__Pyx_EnumMeta> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle___Pyx_EnumMeta__set_state(__Pyx_EnumMeta __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_unpickle___Pyx_EnumMeta__set_state(((struct __pyx_obj___Pyx_EnumMeta *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = __Pyx_EnumMeta.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle___Pyx_EnumMeta__set_state(<__Pyx_EnumMeta> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle___Pyx_EnumMeta__set_state(<__Pyx_EnumMeta> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle___Pyx_EnumMeta__set_state(__Pyx_EnumMeta __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle___Pyx_EnumMeta(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("EnumBase.__pyx_unpickle___Pyx_EnumMeta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle___Pyx_EnumMeta__set_state(<__Pyx_EnumMeta> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle___Pyx_EnumMeta__set_state(__Pyx_EnumMeta __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_unpickle___Pyx_EnumMeta__set_state(struct __pyx_obj___Pyx_EnumMeta *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle___Pyx_EnumMeta__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle___Pyx_EnumMeta__set_state(__Pyx_EnumMeta __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle___Pyx_EnumMeta__set_state(__Pyx_EnumMeta __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 13, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle___Pyx_EnumMeta__set_state(__Pyx_EnumMeta __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle___Pyx_EnumMeta__set_state(<__Pyx_EnumMeta> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle___Pyx_EnumMeta__set_state(__Pyx_EnumMeta __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("EnumBase.__pyx_unpickle___Pyx_EnumMeta__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_7pyorama_5event_EventManager __pyx_vtable_7pyorama_5event_EventManager;

static PyObject *__pyx_tp_new_7pyorama_5event_EventManager(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7pyorama_5event_EventManager *p;
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7pyorama_5event_EventManager *)o);
  p->__pyx_vtab = __pyx_vtabptr_7pyorama_5event_EventManager;
  p->listener_map = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->listeners = ((struct __pyx_obj_7pyorama_4core_13item_slot_map_ItemSlotMap *)Py_None); Py_INCREF(Py_None);
  p->free_user_event_types = ((struct __pyx_obj_7pyorama_4core_11item_vector_ItemVector *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7pyorama_5event_12EventManager_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7pyorama_5event_EventManager(PyObject *o) {
  struct __pyx_obj_7pyorama_5event_EventManager *p = (struct __pyx_obj_7pyorama_5event_EventManager *)o;
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7pyorama_5event_12EventManager_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->listener_map);
  Py_CLEAR(p->listeners);
  Py_CLEAR(p->free_user_event_types);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7pyorama_5event_EventManager(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7pyorama_5event_EventManager *p = (struct __pyx_obj_7pyorama_5event_EventManager *)o;
  if (p->listener_map) {
    e = (*v)(p->listener_map, a); if (e) return e;
  }
  if (p->listeners) {
    e = (*v)(((PyObject *)p->listeners), a); if (e) return e;
  }
  if (p->free_user_event_types) {
    e = (*v)(((PyObject *)p->free_user_event_types), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7pyorama_5event_EventManager(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7pyorama_5event_EventManager *p = (struct __pyx_obj_7pyorama_5event_EventManager *)o;
  tmp = ((PyObject*)p->listener_map);
  p->listener_map = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->listeners);
  p->listeners = ((struct __pyx_obj_7pyorama_4core_13item_slot_map_ItemSlotMap *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->free_user_event_types);
  p->free_user_event_types = ((struct __pyx_obj_7pyorama_4core_11item_vector_ItemVector *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_7pyorama_5event_EventManager[] = {
  {"user_event_type_create", (PyCFunction)__pyx_pw_7pyorama_5event_12EventManager_5user_event_type_create, METH_NOARGS, 0},
  {"user_event_type_delete", (PyCFunction)__pyx_pw_7pyorama_5event_12EventManager_7user_event_type_delete, METH_O, 0},
  {"user_event_type_emit", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_5event_12EventManager_9user_event_type_emit, METH_VARARGS|METH_KEYWORDS, 0},
  {"listener_create", (PyCFunction)__pyx_pw_7pyorama_5event_12EventManager_11listener_create, METH_NOARGS, 0},
  {"listener_delete", (PyCFunction)__pyx_pw_7pyorama_5event_12EventManager_13listener_delete, METH_O, 0},
  {"listener_init", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_5event_12EventManager_15listener_init, METH_VARARGS|METH_KEYWORDS, 0},
  {"listener_free", (PyCFunction)__pyx_pw_7pyorama_5event_12EventManager_17listener_free, METH_O, 0},
  {"update", (PyCFunction)__pyx_pw_7pyorama_5event_12EventManager_19update, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7pyorama_5event_12EventManager_21__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7pyorama_5event_12EventManager_23__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7pyorama_5event_EventManager = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyorama.event.EventManager", /*tp_name*/
  sizeof(struct __pyx_obj_7pyorama_5event_EventManager), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7pyorama_5event_EventManager, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7pyorama_5event_EventManager, /*tp_traverse*/
  __pyx_tp_clear_7pyorama_5event_EventManager, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7pyorama_5event_EventManager, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7pyorama_5event_EventManager, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyObject *__pyx_tp_new___Pyx_EnumMeta(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (&PyType_Type)->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc___Pyx_EnumMeta(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  PyObject_GC_Track(o);
  (&PyType_Type)->tp_dealloc(o);
}

static int __pyx_tp_traverse___Pyx_EnumMeta(PyObject *o, visitproc v, void *a) {
  int e;
  if (!(&PyType_Type)->tp_traverse); else { e = (&PyType_Type)->tp_traverse(o,v,a); if (e) return e; }
  return 0;
}

static int __pyx_tp_clear___Pyx_EnumMeta(PyObject *o) {
  if (!(&PyType_Type)->tp_clear); else (&PyType_Type)->tp_clear(o);
  return 0;
}
static PyObject *__pyx_sq_item___Pyx_EnumMeta(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods___Pyx_EnumMeta[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8EnumBase_14__Pyx_EnumMeta_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8EnumBase_14__Pyx_EnumMeta_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence___Pyx_EnumMeta = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item___Pyx_EnumMeta, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping___Pyx_EnumMeta = {
  0, /*mp_length*/
  __pyx_pw_8EnumBase_14__Pyx_EnumMeta_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __Pyx_EnumMeta = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyorama.event.__Pyx_EnumMeta", /*tp_name*/
  sizeof(struct __pyx_obj___Pyx_EnumMeta), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc___Pyx_EnumMeta, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence___Pyx_EnumMeta, /*tp_as_sequence*/
  &__pyx_tp_as_mapping___Pyx_EnumMeta, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse___Pyx_EnumMeta, /*tp_traverse*/
  __pyx_tp_clear___Pyx_EnumMeta, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_8EnumBase_14__Pyx_EnumMeta_3__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods___Pyx_EnumMeta, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8EnumBase_14__Pyx_EnumMeta_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new___Pyx_EnumMeta, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_event(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_event},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "event",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_EVENT_TYPE_KEY_DOWN, __pyx_k_EVENT_TYPE_KEY_DOWN, sizeof(__pyx_k_EVENT_TYPE_KEY_DOWN), 0, 0, 1, 1},
  {&__pyx_n_s_EVENT_TYPE_KEY_UP, __pyx_k_EVENT_TYPE_KEY_UP, sizeof(__pyx_k_EVENT_TYPE_KEY_UP), 0, 0, 1, 1},
  {&__pyx_n_s_EVENT_TYPE_MOUSE_BUTTON_DOWN, __pyx_k_EVENT_TYPE_MOUSE_BUTTON_DOWN, sizeof(__pyx_k_EVENT_TYPE_MOUSE_BUTTON_DOWN), 0, 0, 1, 1},
  {&__pyx_n_s_EVENT_TYPE_MOUSE_BUTTON_UP, __pyx_k_EVENT_TYPE_MOUSE_BUTTON_UP, sizeof(__pyx_k_EVENT_TYPE_MOUSE_BUTTON_UP), 0, 0, 1, 1},
  {&__pyx_n_s_EVENT_TYPE_MOUSE_MOTION, __pyx_k_EVENT_TYPE_MOUSE_MOTION, sizeof(__pyx_k_EVENT_TYPE_MOUSE_MOTION), 0, 0, 1, 1},
  {&__pyx_n_s_EVENT_TYPE_MOUSE_WHEEL, __pyx_k_EVENT_TYPE_MOUSE_WHEEL, sizeof(__pyx_k_EVENT_TYPE_MOUSE_WHEEL), 0, 0, 1, 1},
  {&__pyx_n_s_EVENT_TYPE_NONE, __pyx_k_EVENT_TYPE_NONE, sizeof(__pyx_k_EVENT_TYPE_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_EVENT_TYPE_USER, __pyx_k_EVENT_TYPE_USER, sizeof(__pyx_k_EVENT_TYPE_USER), 0, 0, 1, 1},
  {&__pyx_n_s_EVENT_TYPE_WINDOW, __pyx_k_EVENT_TYPE_WINDOW, sizeof(__pyx_k_EVENT_TYPE_WINDOW), 0, 0, 1, 1},
  {&__pyx_n_s_EnumBase, __pyx_k_EnumBase, sizeof(__pyx_k_EnumBase), 0, 0, 1, 1},
  {&__pyx_n_s_EnumType, __pyx_k_EnumType, sizeof(__pyx_k_EnumType), 0, 0, 1, 1},
  {&__pyx_n_s_EventManager, __pyx_k_EventManager, sizeof(__pyx_k_EventManager), 0, 0, 1, 1},
  {&__pyx_n_s_EventManager___reduce_cython, __pyx_k_EventManager___reduce_cython, sizeof(__pyx_k_EventManager___reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_EventManager___setstate_cython, __pyx_k_EventManager___setstate_cython, sizeof(__pyx_k_EventManager___setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_EventManager_listener_create, __pyx_k_EventManager_listener_create, sizeof(__pyx_k_EventManager_listener_create), 0, 0, 1, 1},
  {&__pyx_n_s_EventManager_listener_delete, __pyx_k_EventManager_listener_delete, sizeof(__pyx_k_EventManager_listener_delete), 0, 0, 1, 1},
  {&__pyx_n_s_EventManager_listener_free, __pyx_k_EventManager_listener_free, sizeof(__pyx_k_EventManager_listener_free), 0, 0, 1, 1},
  {&__pyx_n_s_EventManager_listener_init, __pyx_k_EventManager_listener_init, sizeof(__pyx_k_EventManager_listener_init), 0, 0, 1, 1},
  {&__pyx_n_s_EventManager_update, __pyx_k_EventManager_update, sizeof(__pyx_k_EventManager_update), 0, 0, 1, 1},
  {&__pyx_n_s_EventManager_user_event_type_cre, __pyx_k_EventManager_user_event_type_cre, sizeof(__pyx_k_EventManager_user_event_type_cre), 0, 0, 1, 1},
  {&__pyx_n_s_EventManager_user_event_type_del, __pyx_k_EventManager_user_event_type_del, sizeof(__pyx_k_EventManager_user_event_type_del), 0, 0, 1, 1},
  {&__pyx_n_s_EventManager_user_event_type_emi, __pyx_k_EventManager_user_event_type_emi, sizeof(__pyx_k_EventManager_user_event_type_emi), 0, 0, 1, 1},
  {&__pyx_n_s_EventTypes, __pyx_k_EventTypes, sizeof(__pyx_k_EventTypes), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_k_Incompatible_checksums_s_vs_0xd4, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xd4), 0, 0, 1, 0},
  {&__pyx_n_s_IntEnum, __pyx_k_IntEnum, sizeof(__pyx_k_IntEnum), 0, 0, 1, 1},
  {&__pyx_n_s_OrderedDict, __pyx_k_OrderedDict, sizeof(__pyx_k_OrderedDict), 0, 0, 1, 1},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_Pyx_EnumBase, __pyx_k_Pyx_EnumBase, sizeof(__pyx_k_Pyx_EnumBase), 0, 0, 1, 1},
  {&__pyx_n_s_Pyx_EnumBase___new, __pyx_k_Pyx_EnumBase___new, sizeof(__pyx_k_Pyx_EnumBase___new), 0, 0, 1, 1},
  {&__pyx_n_s_Pyx_EnumBase___repr, __pyx_k_Pyx_EnumBase___repr, sizeof(__pyx_k_Pyx_EnumBase___repr), 0, 0, 1, 1},
  {&__pyx_n_s_Pyx_EnumBase___str, __pyx_k_Pyx_EnumBase___str, sizeof(__pyx_k_Pyx_EnumBase___str), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unknown_enum_value_s, __pyx_k_Unknown_enum_value_s, sizeof(__pyx_k_Unknown_enum_value_s), 0, 0, 1, 0},
  {&__pyx_kp_u_UserEventType_invalid_value, __pyx_k_UserEventType_invalid_value, sizeof(__pyx_k_UserEventType_invalid_value), 0, 1, 0, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_EVENT_TYPE_CHANGED, __pyx_k_WINDOW_EVENT_TYPE_CHANGED, sizeof(__pyx_k_WINDOW_EVENT_TYPE_CHANGED), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_EVENT_TYPE_CLOSE, __pyx_k_WINDOW_EVENT_TYPE_CLOSE, sizeof(__pyx_k_WINDOW_EVENT_TYPE_CLOSE), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_EVENT_TYPE_ENTER, __pyx_k_WINDOW_EVENT_TYPE_ENTER, sizeof(__pyx_k_WINDOW_EVENT_TYPE_ENTER), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_EVENT_TYPE_EXPOSED, __pyx_k_WINDOW_EVENT_TYPE_EXPOSED, sizeof(__pyx_k_WINDOW_EVENT_TYPE_EXPOSED), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_EVENT_TYPE_FOCUS_GAINED, __pyx_k_WINDOW_EVENT_TYPE_FOCUS_GAINED, sizeof(__pyx_k_WINDOW_EVENT_TYPE_FOCUS_GAINED), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_EVENT_TYPE_FOCUS_LOST, __pyx_k_WINDOW_EVENT_TYPE_FOCUS_LOST, sizeof(__pyx_k_WINDOW_EVENT_TYPE_FOCUS_LOST), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_EVENT_TYPE_HIDDEN, __pyx_k_WINDOW_EVENT_TYPE_HIDDEN, sizeof(__pyx_k_WINDOW_EVENT_TYPE_HIDDEN), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_EVENT_TYPE_HIT_TEST, __pyx_k_WINDOW_EVENT_TYPE_HIT_TEST, sizeof(__pyx_k_WINDOW_EVENT_TYPE_HIT_TEST), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_EVENT_TYPE_LEAVE, __pyx_k_WINDOW_EVENT_TYPE_LEAVE, sizeof(__pyx_k_WINDOW_EVENT_TYPE_LEAVE), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_EVENT_TYPE_MAXIMIZED, __pyx_k_WINDOW_EVENT_TYPE_MAXIMIZED, sizeof(__pyx_k_WINDOW_EVENT_TYPE_MAXIMIZED), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_EVENT_TYPE_MINIMIZED, __pyx_k_WINDOW_EVENT_TYPE_MINIMIZED, sizeof(__pyx_k_WINDOW_EVENT_TYPE_MINIMIZED), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_EVENT_TYPE_MOVED, __pyx_k_WINDOW_EVENT_TYPE_MOVED, sizeof(__pyx_k_WINDOW_EVENT_TYPE_MOVED), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_EVENT_TYPE_RESIZED, __pyx_k_WINDOW_EVENT_TYPE_RESIZED, sizeof(__pyx_k_WINDOW_EVENT_TYPE_RESIZED), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_EVENT_TYPE_RESTORED, __pyx_k_WINDOW_EVENT_TYPE_RESTORED, sizeof(__pyx_k_WINDOW_EVENT_TYPE_RESTORED), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_EVENT_TYPE_SHOWN, __pyx_k_WINDOW_EVENT_TYPE_SHOWN, sizeof(__pyx_k_WINDOW_EVENT_TYPE_SHOWN), 0, 0, 1, 1},
  {&__pyx_n_s_WINDOW_EVENT_TYPE_TAKE_FOCUS, __pyx_k_WINDOW_EVENT_TYPE_TAKE_FOCUS, sizeof(__pyx_k_WINDOW_EVENT_TYPE_TAKE_FOCUS), 0, 0, 1, 1},
  {&__pyx_n_s_WindowEventTypes, __pyx_k_WindowEventTypes, sizeof(__pyx_k_WindowEventTypes), 0, 0, 1, 1},
  {&__pyx_n_u_button, __pyx_k_button, sizeof(__pyx_k_button), 0, 1, 0, 1},
  {&__pyx_n_s_callback, __pyx_k_callback, sizeof(__pyx_k_callback), 0, 0, 1, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_u_clicks, __pyx_k_clicks, sizeof(__pyx_k_clicks), 0, 1, 0, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_cls, __pyx_k_cls, sizeof(__pyx_k_cls), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_n_u_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 1, 0, 1},
  {&__pyx_n_s_dct, __pyx_k_dct, sizeof(__pyx_k_dct), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_u_direction, __pyx_k_direction, sizeof(__pyx_k_direction), 0, 1, 0, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_enum, __pyx_k_enum, sizeof(__pyx_k_enum), 0, 0, 1, 1},
  {&__pyx_n_s_event, __pyx_k_event, sizeof(__pyx_k_event), 0, 0, 1, 1},
  {&__pyx_n_s_event_data, __pyx_k_event_data, sizeof(__pyx_k_event_data), 0, 0, 1, 1},
  {&__pyx_n_s_event_type, __pyx_k_event_type, sizeof(__pyx_k_event_type), 0, 0, 1, 1},
  {&__pyx_n_s_events, __pyx_k_events, sizeof(__pyx_k_events), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_u_height, __pyx_k_height, sizeof(__pyx_k_height), 0, 1, 0, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_u_key_code, __pyx_k_key_code, sizeof(__pyx_k_key_code), 0, 1, 0, 1},
  {&__pyx_n_s_listener, __pyx_k_listener, sizeof(__pyx_k_listener), 0, 0, 1, 1},
  {&__pyx_n_s_listener_create, __pyx_k_listener_create, sizeof(__pyx_k_listener_create), 0, 0, 1, 1},
  {&__pyx_n_s_listener_delete, __pyx_k_listener_delete, sizeof(__pyx_k_listener_delete), 0, 0, 1, 1},
  {&__pyx_n_s_listener_free, __pyx_k_listener_free, sizeof(__pyx_k_listener_free), 0, 0, 1, 1},
  {&__pyx_n_s_listener_init, __pyx_k_listener_init, sizeof(__pyx_k_listener_init), 0, 0, 1, 1},
  {&__pyx_n_s_listener_ptr, __pyx_k_listener_ptr, sizeof(__pyx_k_listener_ptr), 0, 0, 1, 1},
  {&__pyx_n_s_listeners, __pyx_k_listeners, sizeof(__pyx_k_listeners), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_members, __pyx_k_members, sizeof(__pyx_k_members), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_u_modifiers, __pyx_k_modifiers, sizeof(__pyx_k_modifiers), 0, 1, 0, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_parents, __pyx_k_parents, sizeof(__pyx_k_parents), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_pyorama_event, __pyx_k_pyorama_event, sizeof(__pyx_k_pyorama_event), 0, 0, 1, 1},
  {&__pyx_kp_s_pyorama_event_pyx, __pyx_k_pyorama_event_pyx, sizeof(__pyx_k_pyorama_event_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle___Pyx_EnumMeta, __pyx_k_pyx_unpickle___Pyx_EnumMeta, sizeof(__pyx_k_pyx_unpickle___Pyx_EnumMeta), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_u_relative_x, __pyx_k_relative_x, sizeof(__pyx_k_relative_x), 0, 1, 0, 1},
  {&__pyx_n_u_relative_y, __pyx_k_relative_y, sizeof(__pyx_k_relative_y), 0, 1, 0, 1},
  {&__pyx_n_u_repeat, __pyx_k_repeat, sizeof(__pyx_k_repeat), 0, 1, 0, 1},
  {&__pyx_n_s_repr, __pyx_k_repr, sizeof(__pyx_k_repr), 0, 0, 1, 1},
  {&__pyx_n_s_res, __pyx_k_res, sizeof(__pyx_k_res), 0, 0, 1, 1},
  {&__pyx_kp_s_s_s, __pyx_k_s_s, sizeof(__pyx_k_s_s), 0, 0, 1, 0},
  {&__pyx_kp_s_s_s_d, __pyx_k_s_s_d, sizeof(__pyx_k_s_s_d), 0, 0, 1, 0},
  {&__pyx_n_u_scan_code, __pyx_k_scan_code, sizeof(__pyx_k_scan_code), 0, 1, 0, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_u_state, __pyx_k_state, sizeof(__pyx_k_state), 0, 1, 0, 1},
  {&__pyx_n_s_str, __pyx_k_str, sizeof(__pyx_k_str), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_u_sub_type, __pyx_k_sub_type, sizeof(__pyx_k_sub_type), 0, 1, 0, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_n_s_time_stamp, __pyx_k_time_stamp, sizeof(__pyx_k_time_stamp), 0, 0, 1, 1},
  {&__pyx_n_u_time_stamp, __pyx_k_time_stamp, sizeof(__pyx_k_time_stamp), 0, 1, 0, 1},
  {&__pyx_n_u_timestamp, __pyx_k_timestamp, sizeof(__pyx_k_timestamp), 0, 1, 0, 1},
  {&__pyx_n_u_type, __pyx_k_type, sizeof(__pyx_k_type), 0, 1, 0, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_user_data, __pyx_k_user_data, sizeof(__pyx_k_user_data), 0, 0, 1, 1},
  {&__pyx_n_s_user_event_type_create, __pyx_k_user_event_type_create, sizeof(__pyx_k_user_event_type_create), 0, 0, 1, 1},
  {&__pyx_n_s_user_event_type_delete, __pyx_k_user_event_type_delete, sizeof(__pyx_k_user_event_type_delete), 0, 0, 1, 1},
  {&__pyx_n_s_user_event_type_emit, __pyx_k_user_event_type_emit, sizeof(__pyx_k_user_event_type_emit), 0, 0, 1, 1},
  {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {&__pyx_n_u_which, __pyx_k_which, sizeof(__pyx_k_which), 0, 1, 0, 1},
  {&__pyx_n_u_width, __pyx_k_width, sizeof(__pyx_k_width), 0, 1, 0, 1},
  {&__pyx_n_u_window_id, __pyx_k_window_id, sizeof(__pyx_k_window_id), 0, 1, 0, 1},
  {&__pyx_n_u_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 1, 0, 1},
  {&__pyx_n_u_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 1, 0, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 3, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 240, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "pyorama/event.pyx":3
 * import time
 * 
 * cdef object INVALID_USER_EVENT_TYPE_ERROR = ValueError("UserEventType: invalid value")             # <<<<<<<<<<<<<<
 * 
 * cdef class EventManager:
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_UserEventType_invalid_value); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "pyorama/event.pyx":25
 *         self.events = None
 * 
 *     def user_event_type_create(self):             # <<<<<<<<<<<<<<
 *         cdef EventType event_type
 *         if self.free_user_event_types.num_items > 0:
 */
  __pyx_tuple__4 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_event_type); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);
  __pyx_codeobj__5 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__4, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_event_pyx, __pyx_n_s_user_event_type_create, 25, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__5)) __PYX_ERR(0, 25, __pyx_L1_error)

  /* "pyorama/event.pyx":35
 *         return event_type
 * 
 *     def user_event_type_delete(self, EventType event_type):             # <<<<<<<<<<<<<<
 *         self.c_check_user_event_type(event_type)
 *         del self.listener_map[event_type]
 */
  __pyx_tuple__6 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_event_type, __pyx_n_s_event_type); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);
  __pyx_codeobj__7 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__6, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_event_pyx, __pyx_n_s_user_event_type_delete, 35, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__7)) __PYX_ERR(0, 35, __pyx_L1_error)

  /* "pyorama/event.pyx":47
 *             raise INVALID_USER_EVENT_TYPE_ERROR
 * 
 *     def user_event_type_emit(self, EventType event_type, dict event_data=None):             # <<<<<<<<<<<<<<
 *         cdef SDL_Event event
 *         self.c_check_user_event_type(event_type)
 */
  __pyx_tuple__8 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_event_type, __pyx_n_s_event_data, __pyx_n_s_event); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);
  __pyx_codeobj__9 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__8, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_event_pyx, __pyx_n_s_user_event_type_emit, 47, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__9)) __PYX_ERR(0, 47, __pyx_L1_error)

  /* "pyorama/event.pyx":56
 * 
 *     #Listener
 *     def listener_create(self):             # <<<<<<<<<<<<<<
 *         return self.listeners.c_create()
 * 
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);
  __pyx_codeobj__11 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__10, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_event_pyx, __pyx_n_s_listener_create, 56, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__11)) __PYX_ERR(0, 56, __pyx_L1_error)

  /* "pyorama/event.pyx":59
 *         return self.listeners.c_create()
 * 
 *     def listener_delete(self, Handle listener):             # <<<<<<<<<<<<<<
 *         return self.listeners.c_delete(listener)
 * 
 */
  __pyx_tuple__12 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_listener, __pyx_n_s_listener); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);
  __pyx_codeobj__13 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_event_pyx, __pyx_n_s_listener_delete, 59, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__13)) __PYX_ERR(0, 59, __pyx_L1_error)

  /* "pyorama/event.pyx":65
 *         return <ListenerC *>self.listeners.c_get_ptr(listener)
 * 
 *     def listener_init(self, Handle listener, EventTypes event_type, object callback, dict user_data):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ListenerC *listener_ptr
 */
  __pyx_tuple__14 = PyTuple_Pack(8, __pyx_n_s_self, __pyx_n_s_listener, __pyx_n_s_event_type, __pyx_n_s_callback, __pyx_n_s_user_data, __pyx_n_s_listener_ptr, __pyx_n_s_index, __pyx_n_s_listeners); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);
  __pyx_codeobj__15 = (PyObject*)__Pyx_PyCode_New(5, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_event_pyx, __pyx_n_s_listener_init, 65, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__15)) __PYX_ERR(0, 65, __pyx_L1_error)

  /* "pyorama/event.pyx":81
 *         listeners.c_push(&listener)
 * 
 *     def listener_free(self, Handle listener):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ListenerC *listener_ptr
 */
  __pyx_tuple__16 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_listener, __pyx_n_s_listener, __pyx_n_s_listener_ptr, __pyx_n_s_index, __pyx_n_s_listeners); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);
  __pyx_codeobj__17 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__16, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_event_pyx, __pyx_n_s_listener_free, 81, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__17)) __PYX_ERR(0, 81, __pyx_L1_error)

  /* "pyorama/event.pyx":202
 *         return event_data
 * 
 *     def update(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double time_stamp
 */
  __pyx_tuple__18 = PyTuple_Pack(12, __pyx_n_s_self, __pyx_n_s_time_stamp, __pyx_n_s_event, __pyx_n_s_event_type, __pyx_n_s_events, __pyx_n_s_listeners, __pyx_n_s_listener, __pyx_n_s_listener_ptr, __pyx_n_s_i, __pyx_n_s_callback, __pyx_n_s_event_data, __pyx_n_s_user_data); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);
  __pyx_codeobj__19 = (PyObject*)__Pyx_PyCode_New(1, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_event_pyx, __pyx_n_s_update, 202, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__19)) __PYX_ERR(0, 202, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__20, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__22 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__22, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "EnumBase":28
 * class __Pyx_EnumBase(int):
 *     __metaclass__ = __Pyx_EnumMeta
 *     def __new__(cls, value, name=None):             # <<<<<<<<<<<<<<
 *         for v in cls:
 *             if v == value:
 */
  __pyx_tuple__24 = PyTuple_Pack(5, __pyx_n_s_cls, __pyx_n_s_value, __pyx_n_s_name, __pyx_n_s_v, __pyx_n_s_res); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_new, 28, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(1, 28, __pyx_L1_error)
  __pyx_tuple__26 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "EnumBase":39
 *         cls.__members__[name] = res
 *         return res
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(1, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_repr, 39, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(1, 39, __pyx_L1_error)

  /* "EnumBase":41
 *     def __repr__(self):
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "%s.%s" % (self.__class__.__name__, self.name)
 * 
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(1, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__29, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_str, 41, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(1, 41, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle___Pyx_EnumMeta(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__31 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__31, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle___Pyx_EnumMeta, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_222419149 = PyInt_FromLong(222419149L); if (unlikely(!__pyx_int_222419149)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __pyx_v_7pyorama_5event_INVALID_USER_EVENT_TYPE_ERROR = Py_None; Py_INCREF(Py_None);
  __Pyx_OrderedDict = Py_None; Py_INCREF(Py_None);
  __Pyx_EnumBase = Py_None; Py_INCREF(Py_None);
  __Pyx_globals = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_7pyorama_5event_EventManager = &__pyx_vtable_7pyorama_5event_EventManager;
  __pyx_vtable_7pyorama_5event_EventManager.c_check_user_event_type = (void (*)(struct __pyx_obj_7pyorama_5event_EventManager *, __pyx_t_7pyorama_5event_EventType))__pyx_f_7pyorama_5event_12EventManager_c_check_user_event_type;
  __pyx_vtable_7pyorama_5event_EventManager.c_parse_window_event = (PyObject *(*)(struct __pyx_obj_7pyorama_5event_EventManager *, SDL_WindowEvent *, double))__pyx_f_7pyorama_5event_12EventManager_c_parse_window_event;
  __pyx_vtable_7pyorama_5event_EventManager.c_parse_key_down_event = (PyObject *(*)(struct __pyx_obj_7pyorama_5event_EventManager *, SDL_KeyboardEvent *, double))__pyx_f_7pyorama_5event_12EventManager_c_parse_key_down_event;
  __pyx_vtable_7pyorama_5event_EventManager.c_parse_key_up_event = (PyObject *(*)(struct __pyx_obj_7pyorama_5event_EventManager *, SDL_KeyboardEvent *, double))__pyx_f_7pyorama_5event_12EventManager_c_parse_key_up_event;
  __pyx_vtable_7pyorama_5event_EventManager.c_parse_mouse_button_down_event = (PyObject *(*)(struct __pyx_obj_7pyorama_5event_EventManager *, SDL_MouseButtonEvent *, double))__pyx_f_7pyorama_5event_12EventManager_c_parse_mouse_button_down_event;
  __pyx_vtable_7pyorama_5event_EventManager.c_parse_mouse_button_up_event = (PyObject *(*)(struct __pyx_obj_7pyorama_5event_EventManager *, SDL_MouseButtonEvent *, double))__pyx_f_7pyorama_5event_12EventManager_c_parse_mouse_button_up_event;
  __pyx_vtable_7pyorama_5event_EventManager.c_parse_mouse_motion_event = (PyObject *(*)(struct __pyx_obj_7pyorama_5event_EventManager *, SDL_MouseMotionEvent *, double))__pyx_f_7pyorama_5event_12EventManager_c_parse_mouse_motion_event;
  __pyx_vtable_7pyorama_5event_EventManager.c_parse_mouse_wheel_event = (PyObject *(*)(struct __pyx_obj_7pyorama_5event_EventManager *, SDL_MouseWheelEvent *, double))__pyx_f_7pyorama_5event_12EventManager_c_parse_mouse_wheel_event;
  __pyx_vtable_7pyorama_5event_EventManager.c_parse_user_event = (PyObject *(*)(struct __pyx_obj_7pyorama_5event_EventManager *, SDL_UserEvent *, double))__pyx_f_7pyorama_5event_12EventManager_c_parse_user_event;
  __pyx_vtable_7pyorama_5event_EventManager.c_listener_get_ptr = (__pyx_t_7pyorama_5event_ListenerC *(*)(struct __pyx_obj_7pyorama_5event_EventManager *, __pyx_t_7pyorama_4core_6handle_Handle))__pyx_f_7pyorama_5event_12EventManager_c_listener_get_ptr;
  if (PyType_Ready(&__pyx_type_7pyorama_5event_EventManager) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7pyorama_5event_EventManager.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7pyorama_5event_EventManager.tp_dictoffset && __pyx_type_7pyorama_5event_EventManager.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7pyorama_5event_EventManager.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  if (__Pyx_SetVtable(__pyx_type_7pyorama_5event_EventManager.tp_dict, __pyx_vtabptr_7pyorama_5event_EventManager) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_EventManager, (PyObject *)&__pyx_type_7pyorama_5event_EventManager) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7pyorama_5event_EventManager) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __pyx_ptype_7pyorama_5event_EventManager = &__pyx_type_7pyorama_5event_EventManager;
  __Pyx_EnumMeta.tp_base = (&PyType_Type);
  if (PyType_Ready(&__Pyx_EnumMeta) < 0) __PYX_ERR(1, 15, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __Pyx_EnumMeta.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__Pyx_EnumMeta.tp_dictoffset && __Pyx_EnumMeta.tp_getattro == PyObject_GenericGetAttr)) {
    __Pyx_EnumMeta.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_setup_reduce((PyObject*)&__Pyx_EnumMeta) < 0) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_ptype___Pyx_EnumMeta = &__Pyx_EnumMeta;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pyorama.core.item_hash_map"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pyorama_4core_13item_hash_map_ItemHashMap = __Pyx_ImportType(__pyx_t_1, "pyorama.core.item_hash_map", "ItemHashMap", sizeof(struct __pyx_obj_7pyorama_4core_13item_hash_map_ItemHashMap), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyorama_4core_13item_hash_map_ItemHashMap) __PYX_ERR(3, 5, __pyx_L1_error)
  __pyx_vtabptr_7pyorama_4core_13item_hash_map_ItemHashMap = (struct __pyx_vtabstruct_7pyorama_4core_13item_hash_map_ItemHashMap*)__Pyx_GetVtable(__pyx_ptype_7pyorama_4core_13item_hash_map_ItemHashMap->tp_dict); if (unlikely(!__pyx_vtabptr_7pyorama_4core_13item_hash_map_ItemHashMap)) __PYX_ERR(3, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pyorama.core.item_vector"); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pyorama_4core_11item_vector_ItemVector = __Pyx_ImportType(__pyx_t_1, "pyorama.core.item_vector", "ItemVector", sizeof(struct __pyx_obj_7pyorama_4core_11item_vector_ItemVector), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyorama_4core_11item_vector_ItemVector) __PYX_ERR(4, 5, __pyx_L1_error)
  __pyx_vtabptr_7pyorama_4core_11item_vector_ItemVector = (struct __pyx_vtabstruct_7pyorama_4core_11item_vector_ItemVector*)__Pyx_GetVtable(__pyx_ptype_7pyorama_4core_11item_vector_ItemVector->tp_dict); if (unlikely(!__pyx_vtabptr_7pyorama_4core_11item_vector_ItemVector)) __PYX_ERR(4, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pyorama.core.item_slot_map"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pyorama_4core_13item_slot_map_ItemSlotMap = __Pyx_ImportType(__pyx_t_1, "pyorama.core.item_slot_map", "ItemSlotMap", sizeof(struct __pyx_obj_7pyorama_4core_13item_slot_map_ItemSlotMap), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyorama_4core_13item_slot_map_ItemSlotMap) __PYX_ERR(5, 9, __pyx_L1_error)
  __pyx_vtabptr_7pyorama_4core_13item_slot_map_ItemSlotMap = (struct __pyx_vtabstruct_7pyorama_4core_13item_slot_map_ItemSlotMap*)__Pyx_GetVtable(__pyx_ptype_7pyorama_4core_13item_slot_map_ItemSlotMap->tp_dict); if (unlikely(!__pyx_vtabptr_7pyorama_4core_13item_slot_map_ItemSlotMap)) __PYX_ERR(5, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pyorama.math3d.mat4"); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pyorama_6math3d_4mat4_Mat4 = __Pyx_ImportType(__pyx_t_1, "pyorama.math3d.mat4", "Mat4", sizeof(struct __pyx_obj_7pyorama_6math3d_4mat4_Mat4), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyorama_6math3d_4mat4_Mat4) __PYX_ERR(6, 4, __pyx_L1_error)
  __pyx_vtabptr_7pyorama_6math3d_4mat4_Mat4 = (struct __pyx_vtabstruct_7pyorama_6math3d_4mat4_Mat4*)__Pyx_GetVtable(__pyx_ptype_7pyorama_6math3d_4mat4_Mat4->tp_dict); if (unlikely(!__pyx_vtabptr_7pyorama_6math3d_4mat4_Mat4)) __PYX_ERR(6, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pyorama.math3d.mat3"); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pyorama_6math3d_4mat3_Mat3 = __Pyx_ImportType(__pyx_t_1, "pyorama.math3d.mat3", "Mat3", sizeof(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyorama_6math3d_4mat3_Mat3) __PYX_ERR(7, 5, __pyx_L1_error)
  __pyx_vtabptr_7pyorama_6math3d_4mat3_Mat3 = (struct __pyx_vtabstruct_7pyorama_6math3d_4mat3_Mat3*)__Pyx_GetVtable(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict); if (unlikely(!__pyx_vtabptr_7pyorama_6math3d_4mat3_Mat3)) __PYX_ERR(7, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pyorama.math3d.quat"); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pyorama_6math3d_4quat_Quat = __Pyx_ImportType(__pyx_t_1, "pyorama.math3d.quat", "Quat", sizeof(struct __pyx_obj_7pyorama_6math3d_4quat_Quat), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyorama_6math3d_4quat_Quat) __PYX_ERR(8, 4, __pyx_L1_error)
  __pyx_vtabptr_7pyorama_6math3d_4quat_Quat = (struct __pyx_vtabstruct_7pyorama_6math3d_4quat_Quat*)__Pyx_GetVtable(__pyx_ptype_7pyorama_6math3d_4quat_Quat->tp_dict); if (unlikely(!__pyx_vtabptr_7pyorama_6math3d_4quat_Quat)) __PYX_ERR(8, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pyorama.math3d.vec3"); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pyorama_6math3d_4vec3_Vec3 = __Pyx_ImportType(__pyx_t_1, "pyorama.math3d.vec3", "Vec3", sizeof(struct __pyx_obj_7pyorama_6math3d_4vec3_Vec3), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyorama_6math3d_4vec3_Vec3) __PYX_ERR(9, 6, __pyx_L1_error)
  __pyx_vtabptr_7pyorama_6math3d_4vec3_Vec3 = (struct __pyx_vtabstruct_7pyorama_6math3d_4vec3_Vec3*)__Pyx_GetVtable(__pyx_ptype_7pyorama_6math3d_4vec3_Vec3->tp_dict); if (unlikely(!__pyx_vtabptr_7pyorama_6math3d_4vec3_Vec3)) __PYX_ERR(9, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pyorama.math3d.mat2"); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pyorama_6math3d_4mat2_Mat2 = __Pyx_ImportType(__pyx_t_1, "pyorama.math3d.mat2", "Mat2", sizeof(struct __pyx_obj_7pyorama_6math3d_4mat2_Mat2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyorama_6math3d_4mat2_Mat2) __PYX_ERR(10, 5, __pyx_L1_error)
  __pyx_vtabptr_7pyorama_6math3d_4mat2_Mat2 = (struct __pyx_vtabstruct_7pyorama_6math3d_4mat2_Mat2*)__Pyx_GetVtable(__pyx_ptype_7pyorama_6math3d_4mat2_Mat2->tp_dict); if (unlikely(!__pyx_vtabptr_7pyorama_6math3d_4mat2_Mat2)) __PYX_ERR(10, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pyorama.math3d.vec2"); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pyorama_6math3d_4vec2_Vec2 = __Pyx_ImportType(__pyx_t_1, "pyorama.math3d.vec2", "Vec2", sizeof(struct __pyx_obj_7pyorama_6math3d_4vec2_Vec2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyorama_6math3d_4vec2_Vec2) __PYX_ERR(11, 7, __pyx_L1_error)
  __pyx_vtabptr_7pyorama_6math3d_4vec2_Vec2 = (struct __pyx_vtabstruct_7pyorama_6math3d_4vec2_Vec2*)__Pyx_GetVtable(__pyx_ptype_7pyorama_6math3d_4vec2_Vec2->tp_dict); if (unlikely(!__pyx_vtabptr_7pyorama_6math3d_4vec2_Vec2)) __PYX_ERR(11, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pyorama.math3d.vec4"); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pyorama_6math3d_4vec4_Vec4 = __Pyx_ImportType(__pyx_t_1, "pyorama.math3d.vec4", "Vec4", sizeof(struct __pyx_obj_7pyorama_6math3d_4vec4_Vec4), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyorama_6math3d_4vec4_Vec4) __PYX_ERR(12, 5, __pyx_L1_error)
  __pyx_vtabptr_7pyorama_6math3d_4vec4_Vec4 = (struct __pyx_vtabstruct_7pyorama_6math3d_4vec4_Vec4*)__Pyx_GetVtable(__pyx_ptype_7pyorama_6math3d_4vec4_Vec4->tp_dict); if (unlikely(!__pyx_vtabptr_7pyorama_6math3d_4vec4_Vec4)) __PYX_ERR(12, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pyorama.graphics"); if (unlikely(!__pyx_t_1)) __PYX_ERR(13, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pyorama_8graphics_GraphicsManager = __Pyx_ImportType(__pyx_t_1, "pyorama.graphics", "GraphicsManager", sizeof(struct __pyx_obj_7pyorama_8graphics_GraphicsManager), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyorama_8graphics_GraphicsManager) __PYX_ERR(13, 150, __pyx_L1_error)
  __pyx_vtabptr_7pyorama_8graphics_GraphicsManager = (struct __pyx_vtabstruct_7pyorama_8graphics_GraphicsManager*)__Pyx_GetVtable(__pyx_ptype_7pyorama_8graphics_GraphicsManager->tp_dict); if (unlikely(!__pyx_vtabptr_7pyorama_8graphics_GraphicsManager)) __PYX_ERR(13, 150, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __pyx_t_1 = PyImport_ImportModule("pyorama.math3d.common"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "epsilon", (void **)&__pyx_vp_7pyorama_6math3d_6common_epsilon, "float") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initevent(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initevent(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_event(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_event(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_event(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'event' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_event(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("event", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_pyorama__event) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "pyorama.event")) {
      if (unlikely(PyDict_SetItemString(modules, "pyorama.event", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) goto __pyx_L1_error;
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) goto __pyx_L1_error;
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_variable_import_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "pyorama/event.pyx":1
 * import time             # <<<<<<<<<<<<<<
 * 
 * cdef object INVALID_USER_EVENT_TYPE_ERROR = ValueError("UserEventType: invalid value")
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_time, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_time, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyorama/event.pyx":3
 * import time
 * 
 * cdef object INVALID_USER_EVENT_TYPE_ERROR = ValueError("UserEventType: invalid value")             # <<<<<<<<<<<<<<
 * 
 * cdef class EventManager:
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(__pyx_v_7pyorama_5event_INVALID_USER_EVENT_TYPE_ERROR);
  __Pyx_DECREF_SET(__pyx_v_7pyorama_5event_INVALID_USER_EVENT_TYPE_ERROR, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyorama/event.pyx":25
 *         self.events = None
 * 
 *     def user_event_type_create(self):             # <<<<<<<<<<<<<<
 *         cdef EventType event_type
 *         if self.free_user_event_types.num_items > 0:
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_5event_12EventManager_5user_event_type_create, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_EventManager_user_event_type_cre, NULL, __pyx_n_s_pyorama_event, __pyx_d, ((PyObject *)__pyx_codeobj__5)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_5event_EventManager->tp_dict, __pyx_n_s_user_event_type_create, __pyx_t_1) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_5event_EventManager);

  /* "pyorama/event.pyx":35
 *         return event_type
 * 
 *     def user_event_type_delete(self, EventType event_type):             # <<<<<<<<<<<<<<
 *         self.c_check_user_event_type(event_type)
 *         del self.listener_map[event_type]
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_5event_12EventManager_7user_event_type_delete, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_EventManager_user_event_type_del, NULL, __pyx_n_s_pyorama_event, __pyx_d, ((PyObject *)__pyx_codeobj__7)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_5event_EventManager->tp_dict, __pyx_n_s_user_event_type_delete, __pyx_t_1) < 0) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_5event_EventManager);

  /* "pyorama/event.pyx":47
 *             raise INVALID_USER_EVENT_TYPE_ERROR
 * 
 *     def user_event_type_emit(self, EventType event_type, dict event_data=None):             # <<<<<<<<<<<<<<
 *         cdef SDL_Event event
 *         self.c_check_user_event_type(event_type)
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_5event_12EventManager_9user_event_type_emit, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_EventManager_user_event_type_emi, NULL, __pyx_n_s_pyorama_event, __pyx_d, ((PyObject *)__pyx_codeobj__9)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_5event_EventManager->tp_dict, __pyx_n_s_user_event_type_emit, __pyx_t_1) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_5event_EventManager);

  /* "pyorama/event.pyx":56
 * 
 *     #Listener
 *     def listener_create(self):             # <<<<<<<<<<<<<<
 *         return self.listeners.c_create()
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_5event_12EventManager_11listener_create, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_EventManager_listener_create, NULL, __pyx_n_s_pyorama_event, __pyx_d, ((PyObject *)__pyx_codeobj__11)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_5event_EventManager->tp_dict, __pyx_n_s_listener_create, __pyx_t_1) < 0) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_5event_EventManager);

  /* "pyorama/event.pyx":59
 *         return self.listeners.c_create()
 * 
 *     def listener_delete(self, Handle listener):             # <<<<<<<<<<<<<<
 *         return self.listeners.c_delete(listener)
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_5event_12EventManager_13listener_delete, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_EventManager_listener_delete, NULL, __pyx_n_s_pyorama_event, __pyx_d, ((PyObject *)__pyx_codeobj__13)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_5event_EventManager->tp_dict, __pyx_n_s_listener_delete, __pyx_t_1) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_5event_EventManager);

  /* "pyorama/event.pyx":65
 *         return <ListenerC *>self.listeners.c_get_ptr(listener)
 * 
 *     def listener_init(self, Handle listener, EventTypes event_type, object callback, dict user_data):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ListenerC *listener_ptr
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_5event_12EventManager_15listener_init, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_EventManager_listener_init, NULL, __pyx_n_s_pyorama_event, __pyx_d, ((PyObject *)__pyx_codeobj__15)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_5event_EventManager->tp_dict, __pyx_n_s_listener_init, __pyx_t_1) < 0) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_5event_EventManager);

  /* "pyorama/event.pyx":81
 *         listeners.c_push(&listener)
 * 
 *     def listener_free(self, Handle listener):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ListenerC *listener_ptr
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_5event_12EventManager_17listener_free, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_EventManager_listener_free, NULL, __pyx_n_s_pyorama_event, __pyx_d, ((PyObject *)__pyx_codeobj__17)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_5event_EventManager->tp_dict, __pyx_n_s_listener_free, __pyx_t_1) < 0) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_5event_EventManager);

  /* "pyorama/event.pyx":202
 *         return event_data
 * 
 *     def update(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double time_stamp
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_5event_12EventManager_19update, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_EventManager_update, NULL, __pyx_n_s_pyorama_event, __pyx_d, ((PyObject *)__pyx_codeobj__19)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_5event_EventManager->tp_dict, __pyx_n_s_update, __pyx_t_1) < 0) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_5event_EventManager);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_5event_12EventManager_21__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_EventManager___reduce_cython, NULL, __pyx_n_s_pyorama_event, __pyx_d, ((PyObject *)__pyx_codeobj__21)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_5event_12EventManager_23__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_EventManager___setstate_cython, NULL, __pyx_n_s_pyorama_event, __pyx_d, ((PyObject *)__pyx_codeobj__23)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_1) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyorama/event.pyx":1
 * import time             # <<<<<<<<<<<<<<
 * 
 * cdef object INVALID_USER_EVENT_TYPE_ERROR = ValueError("UserEventType: invalid value")
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "EnumBase":9
 * 
 * cdef object __Pyx_OrderedDict
 * if PY_VERSION_HEX >= 0x02070000:             # <<<<<<<<<<<<<<
 *     from collections import OrderedDict as __Pyx_OrderedDict
 * else:
 */
  __pyx_t_2 = ((PY_VERSION_HEX >= 0x02070000) != 0);
  if (__pyx_t_2) {

    /* "EnumBase":10
 * cdef object __Pyx_OrderedDict
 * if PY_VERSION_HEX >= 0x02070000:
 *     from collections import OrderedDict as __Pyx_OrderedDict             # <<<<<<<<<<<<<<
 * else:
 *     __Pyx_OrderedDict = dict
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_OrderedDict);
    __Pyx_GIVEREF(__pyx_n_s_OrderedDict);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_OrderedDict);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_collections, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 10, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_XGOTREF(__Pyx_OrderedDict);
    __Pyx_DECREF_SET(__Pyx_OrderedDict, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EnumBase":9
 * 
 * cdef object __Pyx_OrderedDict
 * if PY_VERSION_HEX >= 0x02070000:             # <<<<<<<<<<<<<<
 *     from collections import OrderedDict as __Pyx_OrderedDict
 * else:
 */
    goto __pyx_L2;
  }

  /* "EnumBase":12
 *     from collections import OrderedDict as __Pyx_OrderedDict
 * else:
 *     __Pyx_OrderedDict = dict             # <<<<<<<<<<<<<<
 * 
 * @cython.internal
 */
  /*else*/ {
    __Pyx_INCREF(((PyObject *)(&PyDict_Type)));
    __Pyx_XGOTREF(__Pyx_OrderedDict);
    __Pyx_DECREF_SET(__Pyx_OrderedDict, ((PyObject *)(&PyDict_Type)));
    __Pyx_GIVEREF(((PyObject *)(&PyDict_Type)));
  }
  __pyx_L2:;

  /* "EnumBase":26
 * 
 * cdef object __Pyx_EnumBase
 * class __Pyx_EnumBase(int):             # <<<<<<<<<<<<<<
 *     __metaclass__ = __Pyx_EnumMeta
 *     def __new__(cls, value, name=None):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)(&PyInt_Type)));
  __Pyx_GIVEREF(((PyObject *)(&PyInt_Type)));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)(&PyInt_Type)));
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_3, __pyx_n_s_Pyx_EnumBase, __pyx_n_s_Pyx_EnumBase, (PyObject *) NULL, __pyx_n_s_EnumBase, (PyObject *) NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "EnumBase":27
 * cdef object __Pyx_EnumBase
 * class __Pyx_EnumBase(int):
 *     __metaclass__ = __Pyx_EnumMeta             # <<<<<<<<<<<<<<
 *     def __new__(cls, value, name=None):
 *         for v in cls:
 */
  if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_metaclass, ((PyObject *)__pyx_ptype___Pyx_EnumMeta)) < 0) __PYX_ERR(1, 27, __pyx_L1_error)

  /* "EnumBase":28
 * class __Pyx_EnumBase(int):
 *     __metaclass__ = __Pyx_EnumMeta
 *     def __new__(cls, value, name=None):             # <<<<<<<<<<<<<<
 *         for v in cls:
 *             if v == value:
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8EnumBase_14__Pyx_EnumBase_1__new__, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Pyx_EnumBase___new, NULL, __pyx_n_s_EnumBase, __pyx_d, ((PyObject *)__pyx_codeobj__25)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_5, __pyx_tuple__26);
  if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_new, __pyx_t_5) < 0) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "EnumBase":39
 *         cls.__members__[name] = res
 *         return res
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8EnumBase_14__Pyx_EnumBase_3__repr__, 0, __pyx_n_s_Pyx_EnumBase___repr, NULL, __pyx_n_s_EnumBase, __pyx_d, ((PyObject *)__pyx_codeobj__28)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_repr, __pyx_t_5) < 0) __PYX_ERR(1, 39, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "EnumBase":41
 *     def __repr__(self):
 *         return "<%s.%s: %d>" % (self.__class__.__name__, self.name, self)
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "%s.%s" % (self.__class__.__name__, self.name)
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8EnumBase_14__Pyx_EnumBase_5__str__, 0, __pyx_n_s_Pyx_EnumBase___str, NULL, __pyx_n_s_EnumBase, __pyx_d, ((PyObject *)__pyx_codeobj__30)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_str, __pyx_t_5) < 0) __PYX_ERR(1, 41, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "EnumBase":26
 * 
 * cdef object __Pyx_EnumBase
 * class __Pyx_EnumBase(int):             # <<<<<<<<<<<<<<
 *     __metaclass__ = __Pyx_EnumMeta
 *     def __new__(cls, value, name=None):
 */
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_Pyx_EnumBase, __pyx_t_3, __pyx_t_4, NULL, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XGOTREF(__Pyx_EnumBase);
  __Pyx_DECREF_SET(__Pyx_EnumBase, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "EnumBase":44
 *         return "%s.%s" % (self.__class__.__name__, self.name)
 * 
 * if PY_VERSION_HEX >= 0x03040000:             # <<<<<<<<<<<<<<
 *     from enum import IntEnum as __Pyx_EnumBase
 * 
 */
  __pyx_t_2 = ((PY_VERSION_HEX >= 0x03040000) != 0);
  if (__pyx_t_2) {

    /* "EnumBase":45
 * 
 * if PY_VERSION_HEX >= 0x03040000:
 *     from enum import IntEnum as __Pyx_EnumBase             # <<<<<<<<<<<<<<
 * 
 */
    __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_IntEnum);
    __Pyx_GIVEREF(__pyx_n_s_IntEnum);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_IntEnum);
    __pyx_t_1 = __Pyx_Import(__pyx_n_s_enum, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_IntEnum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XGOTREF(__Pyx_EnumBase);
    __Pyx_DECREF_SET(__Pyx_EnumBase, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumBase":44
 *         return "%s.%s" % (self.__class__.__name__, self.name)
 * 
 * if PY_VERSION_HEX >= 0x03040000:             # <<<<<<<<<<<<<<
 *     from enum import IntEnum as __Pyx_EnumBase
 * 
 */
  }

  /* "(tree fragment)":1
 * def __pyx_unpickle___Pyx_EnumMeta(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8EnumBase_1__pyx_unpickle___Pyx_EnumMeta, NULL, __pyx_n_s_EnumBase); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle___Pyx_EnumMeta, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "EnumType":50
 * 
 * 
 * cdef dict __Pyx_globals = globals()             # <<<<<<<<<<<<<<
 * if PY_VERSION_HEX >= 0x03040000:
 * 
 */
  __pyx_t_1 = __Pyx_Globals(); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_XGOTREF(__Pyx_globals);
  __Pyx_DECREF_SET(__Pyx_globals, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "EnumType":51
 * 
 * cdef dict __Pyx_globals = globals()
 * if PY_VERSION_HEX >= 0x03040000:             # <<<<<<<<<<<<<<
 * 
 *     EventTypes = __Pyx_EnumBase('EventTypes', __Pyx_OrderedDict([
 */
  __pyx_t_2 = ((PY_VERSION_HEX >= 0x03040000) != 0);
  if (__pyx_t_2) {

    /* "EnumType":54
 * 
 *     EventTypes = __Pyx_EnumBase('EventTypes', __Pyx_OrderedDict([
 *         ('EVENT_TYPE_NONE', EVENT_TYPE_NONE),             # <<<<<<<<<<<<<<
 *         ('EVENT_TYPE_WINDOW', EVENT_TYPE_WINDOW),
 *         ('EVENT_TYPE_KEY_DOWN', EVENT_TYPE_KEY_DOWN),
 */
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_e_7pyorama_5event_EVENT_TYPE_NONE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_EVENT_TYPE_NONE);
    __Pyx_GIVEREF(__pyx_n_s_EVENT_TYPE_NONE);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_EVENT_TYPE_NONE);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "EnumType":55
 *     EventTypes = __Pyx_EnumBase('EventTypes', __Pyx_OrderedDict([
 *         ('EVENT_TYPE_NONE', EVENT_TYPE_NONE),
 *         ('EVENT_TYPE_WINDOW', EVENT_TYPE_WINDOW),             # <<<<<<<<<<<<<<
 *         ('EVENT_TYPE_KEY_DOWN', EVENT_TYPE_KEY_DOWN),
 *         ('EVENT_TYPE_KEY_UP', EVENT_TYPE_KEY_UP),
 */
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_e_7pyorama_5event_EVENT_TYPE_WINDOW); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 55, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 55, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_n_s_EVENT_TYPE_WINDOW);
    __Pyx_GIVEREF(__pyx_n_s_EVENT_TYPE_WINDOW);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_EVENT_TYPE_WINDOW);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "EnumType":56
 *         ('EVENT_TYPE_NONE', EVENT_TYPE_NONE),
 *         ('EVENT_TYPE_WINDOW', EVENT_TYPE_WINDOW),
 *         ('EVENT_TYPE_KEY_DOWN', EVENT_TYPE_KEY_DOWN),             # <<<<<<<<<<<<<<
 *         ('EVENT_TYPE_KEY_UP', EVENT_TYPE_KEY_UP),
 *         ('EVENT_TYPE_MOUSE_BUTTON_DOWN', EVENT_TYPE_MOUSE_BUTTON_DOWN),
 */
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_e_7pyorama_5event_EVENT_TYPE_KEY_DOWN); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 56, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_n_s_EVENT_TYPE_KEY_DOWN);
    __Pyx_GIVEREF(__pyx_n_s_EVENT_TYPE_KEY_DOWN);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_EVENT_TYPE_KEY_DOWN);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "EnumType":57
 *         ('EVENT_TYPE_WINDOW', EVENT_TYPE_WINDOW),
 *         ('EVENT_TYPE_KEY_DOWN', EVENT_TYPE_KEY_DOWN),
 *         ('EVENT_TYPE_KEY_UP', EVENT_TYPE_KEY_UP),             # <<<<<<<<<<<<<<
 *         ('EVENT_TYPE_MOUSE_BUTTON_DOWN', EVENT_TYPE_MOUSE_BUTTON_DOWN),
 *         ('EVENT_TYPE_MOUSE_BUTTON_UP', EVENT_TYPE_MOUSE_BUTTON_UP),
 */
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_e_7pyorama_5event_EVENT_TYPE_KEY_UP); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_n_s_EVENT_TYPE_KEY_UP);
    __Pyx_GIVEREF(__pyx_n_s_EVENT_TYPE_KEY_UP);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_n_s_EVENT_TYPE_KEY_UP);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "EnumType":58
 *         ('EVENT_TYPE_KEY_DOWN', EVENT_TYPE_KEY_DOWN),
 *         ('EVENT_TYPE_KEY_UP', EVENT_TYPE_KEY_UP),
 *         ('EVENT_TYPE_MOUSE_BUTTON_DOWN', EVENT_TYPE_MOUSE_BUTTON_DOWN),             # <<<<<<<<<<<<<<
 *         ('EVENT_TYPE_MOUSE_BUTTON_UP', EVENT_TYPE_MOUSE_BUTTON_UP),
 *         ('EVENT_TYPE_MOUSE_MOTION', EVENT_TYPE_MOUSE_MOTION),
 */
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_e_7pyorama_5event_EVENT_TYPE_MOUSE_BUTTON_DOWN); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_n_s_EVENT_TYPE_MOUSE_BUTTON_DOWN);
    __Pyx_GIVEREF(__pyx_n_s_EVENT_TYPE_MOUSE_BUTTON_DOWN);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_EVENT_TYPE_MOUSE_BUTTON_DOWN);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "EnumType":59
 *         ('EVENT_TYPE_KEY_UP', EVENT_TYPE_KEY_UP),
 *         ('EVENT_TYPE_MOUSE_BUTTON_DOWN', EVENT_TYPE_MOUSE_BUTTON_DOWN),
 *         ('EVENT_TYPE_MOUSE_BUTTON_UP', EVENT_TYPE_MOUSE_BUTTON_UP),             # <<<<<<<<<<<<<<
 *         ('EVENT_TYPE_MOUSE_MOTION', EVENT_TYPE_MOUSE_MOTION),
 *         ('EVENT_TYPE_MOUSE_WHEEL', EVENT_TYPE_MOUSE_WHEEL),
 */
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_e_7pyorama_5event_EVENT_TYPE_MOUSE_BUTTON_UP); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_n_s_EVENT_TYPE_MOUSE_BUTTON_UP);
    __Pyx_GIVEREF(__pyx_n_s_EVENT_TYPE_MOUSE_BUTTON_UP);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_EVENT_TYPE_MOUSE_BUTTON_UP);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "EnumType":60
 *         ('EVENT_TYPE_MOUSE_BUTTON_DOWN', EVENT_TYPE_MOUSE_BUTTON_DOWN),
 *         ('EVENT_TYPE_MOUSE_BUTTON_UP', EVENT_TYPE_MOUSE_BUTTON_UP),
 *         ('EVENT_TYPE_MOUSE_MOTION', EVENT_TYPE_MOUSE_MOTION),             # <<<<<<<<<<<<<<
 *         ('EVENT_TYPE_MOUSE_WHEEL', EVENT_TYPE_MOUSE_WHEEL),
 *         ('EVENT_TYPE_USER', EVENT_TYPE_USER),
 */
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_e_7pyorama_5event_EVENT_TYPE_MOUSE_MOTION); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(__pyx_n_s_EVENT_TYPE_MOUSE_MOTION);
    __Pyx_GIVEREF(__pyx_n_s_EVENT_TYPE_MOUSE_MOTION);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_n_s_EVENT_TYPE_MOUSE_MOTION);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "EnumType":61
 *         ('EVENT_TYPE_MOUSE_BUTTON_UP', EVENT_TYPE_MOUSE_BUTTON_UP),
 *         ('EVENT_TYPE_MOUSE_MOTION', EVENT_TYPE_MOUSE_MOTION),
 *         ('EVENT_TYPE_MOUSE_WHEEL', EVENT_TYPE_MOUSE_WHEEL),             # <<<<<<<<<<<<<<
 *         ('EVENT_TYPE_USER', EVENT_TYPE_USER),
 *     ]))
 */
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_e_7pyorama_5event_EVENT_TYPE_MOUSE_WHEEL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_INCREF(__pyx_n_s_EVENT_TYPE_MOUSE_WHEEL);
    __Pyx_GIVEREF(__pyx_n_s_EVENT_TYPE_MOUSE_WHEEL);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_n_s_EVENT_TYPE_MOUSE_WHEEL);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "EnumType":62
 *         ('EVENT_TYPE_MOUSE_MOTION', EVENT_TYPE_MOUSE_MOTION),
 *         ('EVENT_TYPE_MOUSE_WHEEL', EVENT_TYPE_MOUSE_WHEEL),
 *         ('EVENT_TYPE_USER', EVENT_TYPE_USER),             # <<<<<<<<<<<<<<
 *     ]))
 *     __Pyx_globals['EVENT_TYPE_NONE'] = EventTypes.EVENT_TYPE_NONE
 */
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_e_7pyorama_5event_EVENT_TYPE_USER); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_INCREF(__pyx_n_s_EVENT_TYPE_USER);
    __Pyx_GIVEREF(__pyx_n_s_EVENT_TYPE_USER);
    PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_n_s_EVENT_TYPE_USER);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "EnumType":53
 * if PY_VERSION_HEX >= 0x03040000:
 * 
 *     EventTypes = __Pyx_EnumBase('EventTypes', __Pyx_OrderedDict([             # <<<<<<<<<<<<<<
 *         ('EVENT_TYPE_NONE', EVENT_TYPE_NONE),
 *         ('EVENT_TYPE_WINDOW', EVENT_TYPE_WINDOW),
 */
    __pyx_t_1 = PyList_New(9); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyList_SET_ITEM(__pyx_t_1, 3, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyList_SET_ITEM(__pyx_t_1, 4, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyList_SET_ITEM(__pyx_t_1, 5, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_9);
    PyList_SET_ITEM(__pyx_t_1, 6, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_10);
    PyList_SET_ITEM(__pyx_t_1, 7, __pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_11);
    PyList_SET_ITEM(__pyx_t_1, 8, __pyx_t_11);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_t_8 = 0;
    __pyx_t_9 = 0;
    __pyx_t_10 = 0;
    __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_PyObject_CallOneArg(__Pyx_OrderedDict, __pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_EventTypes);
    __Pyx_GIVEREF(__pyx_n_s_EventTypes);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_EventTypes);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_11);
    __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_PyObject_Call(__Pyx_EnumBase, __pyx_t_1, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_EventTypes, __pyx_t_11) < 0) __PYX_ERR(1, 53, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "EnumType":64
 *         ('EVENT_TYPE_USER', EVENT_TYPE_USER),
 *     ]))
 *     __Pyx_globals['EVENT_TYPE_NONE'] = EventTypes.EVENT_TYPE_NONE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['EVENT_TYPE_WINDOW'] = EventTypes.EVENT_TYPE_WINDOW
 *     __Pyx_globals['EVENT_TYPE_KEY_DOWN'] = EventTypes.EVENT_TYPE_KEY_DOWN
 */
    __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_EventTypes); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 64, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_EVENT_TYPE_NONE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 64, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 64, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_EVENT_TYPE_NONE, __pyx_t_1) < 0)) __PYX_ERR(1, 64, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":65
 *     ]))
 *     __Pyx_globals['EVENT_TYPE_NONE'] = EventTypes.EVENT_TYPE_NONE
 *     __Pyx_globals['EVENT_TYPE_WINDOW'] = EventTypes.EVENT_TYPE_WINDOW             # <<<<<<<<<<<<<<
 *     __Pyx_globals['EVENT_TYPE_KEY_DOWN'] = EventTypes.EVENT_TYPE_KEY_DOWN
 *     __Pyx_globals['EVENT_TYPE_KEY_UP'] = EventTypes.EVENT_TYPE_KEY_UP
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_EventTypes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 65, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_EVENT_TYPE_WINDOW); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 65, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 65, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_EVENT_TYPE_WINDOW, __pyx_t_11) < 0)) __PYX_ERR(1, 65, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "EnumType":66
 *     __Pyx_globals['EVENT_TYPE_NONE'] = EventTypes.EVENT_TYPE_NONE
 *     __Pyx_globals['EVENT_TYPE_WINDOW'] = EventTypes.EVENT_TYPE_WINDOW
 *     __Pyx_globals['EVENT_TYPE_KEY_DOWN'] = EventTypes.EVENT_TYPE_KEY_DOWN             # <<<<<<<<<<<<<<
 *     __Pyx_globals['EVENT_TYPE_KEY_UP'] = EventTypes.EVENT_TYPE_KEY_UP
 *     __Pyx_globals['EVENT_TYPE_MOUSE_BUTTON_DOWN'] = EventTypes.EVENT_TYPE_MOUSE_BUTTON_DOWN
 */
    __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_EventTypes); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 66, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_EVENT_TYPE_KEY_DOWN); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 66, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 66, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_EVENT_TYPE_KEY_DOWN, __pyx_t_1) < 0)) __PYX_ERR(1, 66, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":67
 *     __Pyx_globals['EVENT_TYPE_WINDOW'] = EventTypes.EVENT_TYPE_WINDOW
 *     __Pyx_globals['EVENT_TYPE_KEY_DOWN'] = EventTypes.EVENT_TYPE_KEY_DOWN
 *     __Pyx_globals['EVENT_TYPE_KEY_UP'] = EventTypes.EVENT_TYPE_KEY_UP             # <<<<<<<<<<<<<<
 *     __Pyx_globals['EVENT_TYPE_MOUSE_BUTTON_DOWN'] = EventTypes.EVENT_TYPE_MOUSE_BUTTON_DOWN
 *     __Pyx_globals['EVENT_TYPE_MOUSE_BUTTON_UP'] = EventTypes.EVENT_TYPE_MOUSE_BUTTON_UP
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_EventTypes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 67, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_EVENT_TYPE_KEY_UP); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 67, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 67, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_EVENT_TYPE_KEY_UP, __pyx_t_11) < 0)) __PYX_ERR(1, 67, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "EnumType":68
 *     __Pyx_globals['EVENT_TYPE_KEY_DOWN'] = EventTypes.EVENT_TYPE_KEY_DOWN
 *     __Pyx_globals['EVENT_TYPE_KEY_UP'] = EventTypes.EVENT_TYPE_KEY_UP
 *     __Pyx_globals['EVENT_TYPE_MOUSE_BUTTON_DOWN'] = EventTypes.EVENT_TYPE_MOUSE_BUTTON_DOWN             # <<<<<<<<<<<<<<
 *     __Pyx_globals['EVENT_TYPE_MOUSE_BUTTON_UP'] = EventTypes.EVENT_TYPE_MOUSE_BUTTON_UP
 *     __Pyx_globals['EVENT_TYPE_MOUSE_MOTION'] = EventTypes.EVENT_TYPE_MOUSE_MOTION
 */
    __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_EventTypes); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_EVENT_TYPE_MOUSE_BUTTON_DOWN); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 68, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_EVENT_TYPE_MOUSE_BUTTON_DOWN, __pyx_t_1) < 0)) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":69
 *     __Pyx_globals['EVENT_TYPE_KEY_UP'] = EventTypes.EVENT_TYPE_KEY_UP
 *     __Pyx_globals['EVENT_TYPE_MOUSE_BUTTON_DOWN'] = EventTypes.EVENT_TYPE_MOUSE_BUTTON_DOWN
 *     __Pyx_globals['EVENT_TYPE_MOUSE_BUTTON_UP'] = EventTypes.EVENT_TYPE_MOUSE_BUTTON_UP             # <<<<<<<<<<<<<<
 *     __Pyx_globals['EVENT_TYPE_MOUSE_MOTION'] = EventTypes.EVENT_TYPE_MOUSE_MOTION
 *     __Pyx_globals['EVENT_TYPE_MOUSE_WHEEL'] = EventTypes.EVENT_TYPE_MOUSE_WHEEL
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_EventTypes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_EVENT_TYPE_MOUSE_BUTTON_UP); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 69, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_EVENT_TYPE_MOUSE_BUTTON_UP, __pyx_t_11) < 0)) __PYX_ERR(1, 69, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "EnumType":70
 *     __Pyx_globals['EVENT_TYPE_MOUSE_BUTTON_DOWN'] = EventTypes.EVENT_TYPE_MOUSE_BUTTON_DOWN
 *     __Pyx_globals['EVENT_TYPE_MOUSE_BUTTON_UP'] = EventTypes.EVENT_TYPE_MOUSE_BUTTON_UP
 *     __Pyx_globals['EVENT_TYPE_MOUSE_MOTION'] = EventTypes.EVENT_TYPE_MOUSE_MOTION             # <<<<<<<<<<<<<<
 *     __Pyx_globals['EVENT_TYPE_MOUSE_WHEEL'] = EventTypes.EVENT_TYPE_MOUSE_WHEEL
 *     __Pyx_globals['EVENT_TYPE_USER'] = EventTypes.EVENT_TYPE_USER
 */
    __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_EventTypes); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_EVENT_TYPE_MOUSE_MOTION); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 70, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_EVENT_TYPE_MOUSE_MOTION, __pyx_t_1) < 0)) __PYX_ERR(1, 70, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":71
 *     __Pyx_globals['EVENT_TYPE_MOUSE_BUTTON_UP'] = EventTypes.EVENT_TYPE_MOUSE_BUTTON_UP
 *     __Pyx_globals['EVENT_TYPE_MOUSE_MOTION'] = EventTypes.EVENT_TYPE_MOUSE_MOTION
 *     __Pyx_globals['EVENT_TYPE_MOUSE_WHEEL'] = EventTypes.EVENT_TYPE_MOUSE_WHEEL             # <<<<<<<<<<<<<<
 *     __Pyx_globals['EVENT_TYPE_USER'] = EventTypes.EVENT_TYPE_USER
 * else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_EventTypes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_EVENT_TYPE_MOUSE_WHEEL); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 71, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_EVENT_TYPE_MOUSE_WHEEL, __pyx_t_11) < 0)) __PYX_ERR(1, 71, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "EnumType":72
 *     __Pyx_globals['EVENT_TYPE_MOUSE_MOTION'] = EventTypes.EVENT_TYPE_MOUSE_MOTION
 *     __Pyx_globals['EVENT_TYPE_MOUSE_WHEEL'] = EventTypes.EVENT_TYPE_MOUSE_WHEEL
 *     __Pyx_globals['EVENT_TYPE_USER'] = EventTypes.EVENT_TYPE_USER             # <<<<<<<<<<<<<<
 * else:
 *     class EventTypes(__Pyx_EnumBase):
 */
    __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_EventTypes); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 72, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_EVENT_TYPE_USER); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 72, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 72, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_EVENT_TYPE_USER, __pyx_t_1) < 0)) __PYX_ERR(1, 72, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":51
 * 
 * cdef dict __Pyx_globals = globals()
 * if PY_VERSION_HEX >= 0x03040000:             # <<<<<<<<<<<<<<
 * 
 *     EventTypes = __Pyx_EnumBase('EventTypes', __Pyx_OrderedDict([
 */
    goto __pyx_L4;
  }

  /* "EnumType":74
 *     __Pyx_globals['EVENT_TYPE_USER'] = EventTypes.EVENT_TYPE_USER
 * else:
 *     class EventTypes(__Pyx_EnumBase):             # <<<<<<<<<<<<<<
 *         pass
 *     __Pyx_globals['EVENT_TYPE_NONE'] = EventTypes(EVENT_TYPE_NONE, 'EVENT_TYPE_NONE')
 */
  /*else*/ {
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 74, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__Pyx_EnumBase);
    __Pyx_GIVEREF(__Pyx_EnumBase);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __Pyx_EnumBase);
    __pyx_t_11 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 74, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_10 = __Pyx_Py3MetaclassPrepare(__pyx_t_11, __pyx_t_1, __pyx_n_s_EventTypes, __pyx_n_s_EventTypes, (PyObject *) NULL, __pyx_n_s_EnumType, (PyObject *) NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 74, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_9 = __Pyx_Py3ClassCreate(__pyx_t_11, __pyx_n_s_EventTypes, __pyx_t_1, __pyx_t_10, NULL, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 74, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_EventTypes, __pyx_t_9) < 0) __PYX_ERR(1, 74, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":76
 *     class EventTypes(__Pyx_EnumBase):
 *         pass
 *     __Pyx_globals['EVENT_TYPE_NONE'] = EventTypes(EVENT_TYPE_NONE, 'EVENT_TYPE_NONE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['EVENT_TYPE_WINDOW'] = EventTypes(EVENT_TYPE_WINDOW, 'EVENT_TYPE_WINDOW')
 *     __Pyx_globals['EVENT_TYPE_KEY_DOWN'] = EventTypes(EVENT_TYPE_KEY_DOWN, 'EVENT_TYPE_KEY_DOWN')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_EventTypes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_e_7pyorama_5event_EVENT_TYPE_NONE); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_11);
    __Pyx_INCREF(__pyx_n_s_EVENT_TYPE_NONE);
    __Pyx_GIVEREF(__pyx_n_s_EVENT_TYPE_NONE);
    PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_n_s_EVENT_TYPE_NONE);
    __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_10, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 76, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_EVENT_TYPE_NONE, __pyx_t_11) < 0)) __PYX_ERR(1, 76, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "EnumType":77
 *         pass
 *     __Pyx_globals['EVENT_TYPE_NONE'] = EventTypes(EVENT_TYPE_NONE, 'EVENT_TYPE_NONE')
 *     __Pyx_globals['EVENT_TYPE_WINDOW'] = EventTypes(EVENT_TYPE_WINDOW, 'EVENT_TYPE_WINDOW')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['EVENT_TYPE_KEY_DOWN'] = EventTypes(EVENT_TYPE_KEY_DOWN, 'EVENT_TYPE_KEY_DOWN')
 *     __Pyx_globals['EVENT_TYPE_KEY_UP'] = EventTypes(EVENT_TYPE_KEY_UP, 'EVENT_TYPE_KEY_UP')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_EventTypes); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_10 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_e_7pyorama_5event_EVENT_TYPE_WINDOW); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_10);
    __Pyx_INCREF(__pyx_n_s_EVENT_TYPE_WINDOW);
    __Pyx_GIVEREF(__pyx_n_s_EVENT_TYPE_WINDOW);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_EVENT_TYPE_WINDOW);
    __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_1, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 77, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_EVENT_TYPE_WINDOW, __pyx_t_10) < 0)) __PYX_ERR(1, 77, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "EnumType":78
 *     __Pyx_globals['EVENT_TYPE_NONE'] = EventTypes(EVENT_TYPE_NONE, 'EVENT_TYPE_NONE')
 *     __Pyx_globals['EVENT_TYPE_WINDOW'] = EventTypes(EVENT_TYPE_WINDOW, 'EVENT_TYPE_WINDOW')
 *     __Pyx_globals['EVENT_TYPE_KEY_DOWN'] = EventTypes(EVENT_TYPE_KEY_DOWN, 'EVENT_TYPE_KEY_DOWN')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['EVENT_TYPE_KEY_UP'] = EventTypes(EVENT_TYPE_KEY_UP, 'EVENT_TYPE_KEY_UP')
 *     __Pyx_globals['EVENT_TYPE_MOUSE_BUTTON_DOWN'] = EventTypes(EVENT_TYPE_MOUSE_BUTTON_DOWN, 'EVENT_TYPE_MOUSE_BUTTON_DOWN')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_EventTypes); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 78, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_e_7pyorama_5event_EVENT_TYPE_KEY_DOWN); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 78, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 78, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_EVENT_TYPE_KEY_DOWN);
    __Pyx_GIVEREF(__pyx_n_s_EVENT_TYPE_KEY_DOWN);
    PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_n_s_EVENT_TYPE_KEY_DOWN);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 78, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 78, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_EVENT_TYPE_KEY_DOWN, __pyx_t_1) < 0)) __PYX_ERR(1, 78, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":79
 *     __Pyx_globals['EVENT_TYPE_WINDOW'] = EventTypes(EVENT_TYPE_WINDOW, 'EVENT_TYPE_WINDOW')
 *     __Pyx_globals['EVENT_TYPE_KEY_DOWN'] = EventTypes(EVENT_TYPE_KEY_DOWN, 'EVENT_TYPE_KEY_DOWN')
 *     __Pyx_globals['EVENT_TYPE_KEY_UP'] = EventTypes(EVENT_TYPE_KEY_UP, 'EVENT_TYPE_KEY_UP')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['EVENT_TYPE_MOUSE_BUTTON_DOWN'] = EventTypes(EVENT_TYPE_MOUSE_BUTTON_DOWN, 'EVENT_TYPE_MOUSE_BUTTON_DOWN')
 *     __Pyx_globals['EVENT_TYPE_MOUSE_BUTTON_UP'] = EventTypes(EVENT_TYPE_MOUSE_BUTTON_UP, 'EVENT_TYPE_MOUSE_BUTTON_UP')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_EventTypes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_e_7pyorama_5event_EVENT_TYPE_KEY_UP); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_11);
    __Pyx_INCREF(__pyx_n_s_EVENT_TYPE_KEY_UP);
    __Pyx_GIVEREF(__pyx_n_s_EVENT_TYPE_KEY_UP);
    PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_n_s_EVENT_TYPE_KEY_UP);
    __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_10, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 79, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_EVENT_TYPE_KEY_UP, __pyx_t_11) < 0)) __PYX_ERR(1, 79, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "EnumType":80
 *     __Pyx_globals['EVENT_TYPE_KEY_DOWN'] = EventTypes(EVENT_TYPE_KEY_DOWN, 'EVENT_TYPE_KEY_DOWN')
 *     __Pyx_globals['EVENT_TYPE_KEY_UP'] = EventTypes(EVENT_TYPE_KEY_UP, 'EVENT_TYPE_KEY_UP')
 *     __Pyx_globals['EVENT_TYPE_MOUSE_BUTTON_DOWN'] = EventTypes(EVENT_TYPE_MOUSE_BUTTON_DOWN, 'EVENT_TYPE_MOUSE_BUTTON_DOWN')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['EVENT_TYPE_MOUSE_BUTTON_UP'] = EventTypes(EVENT_TYPE_MOUSE_BUTTON_UP, 'EVENT_TYPE_MOUSE_BUTTON_UP')
 *     __Pyx_globals['EVENT_TYPE_MOUSE_MOTION'] = EventTypes(EVENT_TYPE_MOUSE_MOTION, 'EVENT_TYPE_MOUSE_MOTION')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_EventTypes); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_10 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_e_7pyorama_5event_EVENT_TYPE_MOUSE_BUTTON_DOWN); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_10);
    __Pyx_INCREF(__pyx_n_s_EVENT_TYPE_MOUSE_BUTTON_DOWN);
    __Pyx_GIVEREF(__pyx_n_s_EVENT_TYPE_MOUSE_BUTTON_DOWN);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_EVENT_TYPE_MOUSE_BUTTON_DOWN);
    __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_1, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 80, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_EVENT_TYPE_MOUSE_BUTTON_DOWN, __pyx_t_10) < 0)) __PYX_ERR(1, 80, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "EnumType":81
 *     __Pyx_globals['EVENT_TYPE_KEY_UP'] = EventTypes(EVENT_TYPE_KEY_UP, 'EVENT_TYPE_KEY_UP')
 *     __Pyx_globals['EVENT_TYPE_MOUSE_BUTTON_DOWN'] = EventTypes(EVENT_TYPE_MOUSE_BUTTON_DOWN, 'EVENT_TYPE_MOUSE_BUTTON_DOWN')
 *     __Pyx_globals['EVENT_TYPE_MOUSE_BUTTON_UP'] = EventTypes(EVENT_TYPE_MOUSE_BUTTON_UP, 'EVENT_TYPE_MOUSE_BUTTON_UP')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['EVENT_TYPE_MOUSE_MOTION'] = EventTypes(EVENT_TYPE_MOUSE_MOTION, 'EVENT_TYPE_MOUSE_MOTION')
 *     __Pyx_globals['EVENT_TYPE_MOUSE_WHEEL'] = EventTypes(EVENT_TYPE_MOUSE_WHEEL, 'EVENT_TYPE_MOUSE_WHEEL')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_EventTypes); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_e_7pyorama_5event_EVENT_TYPE_MOUSE_BUTTON_UP); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_EVENT_TYPE_MOUSE_BUTTON_UP);
    __Pyx_GIVEREF(__pyx_n_s_EVENT_TYPE_MOUSE_BUTTON_UP);
    PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_n_s_EVENT_TYPE_MOUSE_BUTTON_UP);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 81, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_EVENT_TYPE_MOUSE_BUTTON_UP, __pyx_t_1) < 0)) __PYX_ERR(1, 81, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":82
 *     __Pyx_globals['EVENT_TYPE_MOUSE_BUTTON_DOWN'] = EventTypes(EVENT_TYPE_MOUSE_BUTTON_DOWN, 'EVENT_TYPE_MOUSE_BUTTON_DOWN')
 *     __Pyx_globals['EVENT_TYPE_MOUSE_BUTTON_UP'] = EventTypes(EVENT_TYPE_MOUSE_BUTTON_UP, 'EVENT_TYPE_MOUSE_BUTTON_UP')
 *     __Pyx_globals['EVENT_TYPE_MOUSE_MOTION'] = EventTypes(EVENT_TYPE_MOUSE_MOTION, 'EVENT_TYPE_MOUSE_MOTION')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['EVENT_TYPE_MOUSE_WHEEL'] = EventTypes(EVENT_TYPE_MOUSE_WHEEL, 'EVENT_TYPE_MOUSE_WHEEL')
 *     __Pyx_globals['EVENT_TYPE_USER'] = EventTypes(EVENT_TYPE_USER, 'EVENT_TYPE_USER')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_EventTypes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_e_7pyorama_5event_EVENT_TYPE_MOUSE_MOTION); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_11);
    __Pyx_INCREF(__pyx_n_s_EVENT_TYPE_MOUSE_MOTION);
    __Pyx_GIVEREF(__pyx_n_s_EVENT_TYPE_MOUSE_MOTION);
    PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_n_s_EVENT_TYPE_MOUSE_MOTION);
    __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_10, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 82, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_EVENT_TYPE_MOUSE_MOTION, __pyx_t_11) < 0)) __PYX_ERR(1, 82, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "EnumType":83
 *     __Pyx_globals['EVENT_TYPE_MOUSE_BUTTON_UP'] = EventTypes(EVENT_TYPE_MOUSE_BUTTON_UP, 'EVENT_TYPE_MOUSE_BUTTON_UP')
 *     __Pyx_globals['EVENT_TYPE_MOUSE_MOTION'] = EventTypes(EVENT_TYPE_MOUSE_MOTION, 'EVENT_TYPE_MOUSE_MOTION')
 *     __Pyx_globals['EVENT_TYPE_MOUSE_WHEEL'] = EventTypes(EVENT_TYPE_MOUSE_WHEEL, 'EVENT_TYPE_MOUSE_WHEEL')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['EVENT_TYPE_USER'] = EventTypes(EVENT_TYPE_USER, 'EVENT_TYPE_USER')
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_EventTypes); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_10 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_e_7pyorama_5event_EVENT_TYPE_MOUSE_WHEEL); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_10);
    __Pyx_INCREF(__pyx_n_s_EVENT_TYPE_MOUSE_WHEEL);
    __Pyx_GIVEREF(__pyx_n_s_EVENT_TYPE_MOUSE_WHEEL);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_EVENT_TYPE_MOUSE_WHEEL);
    __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_1, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 83, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_EVENT_TYPE_MOUSE_WHEEL, __pyx_t_10) < 0)) __PYX_ERR(1, 83, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "EnumType":84
 *     __Pyx_globals['EVENT_TYPE_MOUSE_MOTION'] = EventTypes(EVENT_TYPE_MOUSE_MOTION, 'EVENT_TYPE_MOUSE_MOTION')
 *     __Pyx_globals['EVENT_TYPE_MOUSE_WHEEL'] = EventTypes(EVENT_TYPE_MOUSE_WHEEL, 'EVENT_TYPE_MOUSE_WHEEL')
 *     __Pyx_globals['EVENT_TYPE_USER'] = EventTypes(EVENT_TYPE_USER, 'EVENT_TYPE_USER')             # <<<<<<<<<<<<<<
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_EventTypes); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(__pyx_e_7pyorama_5event_EVENT_TYPE_USER); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_EVENT_TYPE_USER);
    __Pyx_GIVEREF(__pyx_n_s_EVENT_TYPE_USER);
    PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_n_s_EVENT_TYPE_USER);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 84, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_EVENT_TYPE_USER, __pyx_t_1) < 0)) __PYX_ERR(1, 84, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L4:;

  /* "EnumType":50
 * 
 * 
 * cdef dict __Pyx_globals = globals()             # <<<<<<<<<<<<<<
 * if PY_VERSION_HEX >= 0x03040000:
 * 
 */
  __pyx_t_1 = __Pyx_Globals(); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_XGOTREF(__Pyx_globals);
  __Pyx_DECREF_SET(__Pyx_globals, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "EnumType":51
 * 
 * cdef dict __Pyx_globals = globals()
 * if PY_VERSION_HEX >= 0x03040000:             # <<<<<<<<<<<<<<
 * 
 *     WindowEventTypes = __Pyx_EnumBase('WindowEventTypes', __Pyx_OrderedDict([
 */
  __pyx_t_2 = ((PY_VERSION_HEX >= 0x03040000) != 0);
  if (__pyx_t_2) {

    /* "EnumType":54
 * 
 *     WindowEventTypes = __Pyx_EnumBase('WindowEventTypes', __Pyx_OrderedDict([
 *         ('WINDOW_EVENT_TYPE_SHOWN', WINDOW_EVENT_TYPE_SHOWN),             # <<<<<<<<<<<<<<
 *         ('WINDOW_EVENT_TYPE_HIDDEN', WINDOW_EVENT_TYPE_HIDDEN),
 *         ('WINDOW_EVENT_TYPE_EXPOSED', WINDOW_EVENT_TYPE_EXPOSED),
 */
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(__pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_SHOWN); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_INCREF(__pyx_n_s_WINDOW_EVENT_TYPE_SHOWN);
    __Pyx_GIVEREF(__pyx_n_s_WINDOW_EVENT_TYPE_SHOWN);
    PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_n_s_WINDOW_EVENT_TYPE_SHOWN);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "EnumType":55
 *     WindowEventTypes = __Pyx_EnumBase('WindowEventTypes', __Pyx_OrderedDict([
 *         ('WINDOW_EVENT_TYPE_SHOWN', WINDOW_EVENT_TYPE_SHOWN),
 *         ('WINDOW_EVENT_TYPE_HIDDEN', WINDOW_EVENT_TYPE_HIDDEN),             # <<<<<<<<<<<<<<
 *         ('WINDOW_EVENT_TYPE_EXPOSED', WINDOW_EVENT_TYPE_EXPOSED),
 *         ('WINDOW_EVENT_TYPE_MOVED', WINDOW_EVENT_TYPE_MOVED),
 */
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(__pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_HIDDEN); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 55, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 55, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_INCREF(__pyx_n_s_WINDOW_EVENT_TYPE_HIDDEN);
    __Pyx_GIVEREF(__pyx_n_s_WINDOW_EVENT_TYPE_HIDDEN);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_n_s_WINDOW_EVENT_TYPE_HIDDEN);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "EnumType":56
 *         ('WINDOW_EVENT_TYPE_SHOWN', WINDOW_EVENT_TYPE_SHOWN),
 *         ('WINDOW_EVENT_TYPE_HIDDEN', WINDOW_EVENT_TYPE_HIDDEN),
 *         ('WINDOW_EVENT_TYPE_EXPOSED', WINDOW_EVENT_TYPE_EXPOSED),             # <<<<<<<<<<<<<<
 *         ('WINDOW_EVENT_TYPE_MOVED', WINDOW_EVENT_TYPE_MOVED),
 *         ('WINDOW_EVENT_TYPE_RESIZED', WINDOW_EVENT_TYPE_RESIZED),
 */
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(__pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_EXPOSED); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 56, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(__pyx_n_s_WINDOW_EVENT_TYPE_EXPOSED);
    __Pyx_GIVEREF(__pyx_n_s_WINDOW_EVENT_TYPE_EXPOSED);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_n_s_WINDOW_EVENT_TYPE_EXPOSED);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "EnumType":57
 *         ('WINDOW_EVENT_TYPE_HIDDEN', WINDOW_EVENT_TYPE_HIDDEN),
 *         ('WINDOW_EVENT_TYPE_EXPOSED', WINDOW_EVENT_TYPE_EXPOSED),
 *         ('WINDOW_EVENT_TYPE_MOVED', WINDOW_EVENT_TYPE_MOVED),             # <<<<<<<<<<<<<<
 *         ('WINDOW_EVENT_TYPE_RESIZED', WINDOW_EVENT_TYPE_RESIZED),
 *         ('WINDOW_EVENT_TYPE_CHANGED', WINDOW_EVENT_TYPE_CHANGED),
 */
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(__pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_MOVED); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_n_s_WINDOW_EVENT_TYPE_MOVED);
    __Pyx_GIVEREF(__pyx_n_s_WINDOW_EVENT_TYPE_MOVED);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_WINDOW_EVENT_TYPE_MOVED);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "EnumType":58
 *         ('WINDOW_EVENT_TYPE_EXPOSED', WINDOW_EVENT_TYPE_EXPOSED),
 *         ('WINDOW_EVENT_TYPE_MOVED', WINDOW_EVENT_TYPE_MOVED),
 *         ('WINDOW_EVENT_TYPE_RESIZED', WINDOW_EVENT_TYPE_RESIZED),             # <<<<<<<<<<<<<<
 *         ('WINDOW_EVENT_TYPE_CHANGED', WINDOW_EVENT_TYPE_CHANGED),
 *         ('WINDOW_EVENT_TYPE_MINIMIZED', WINDOW_EVENT_TYPE_MINIMIZED),
 */
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(__pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_RESIZED); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_n_s_WINDOW_EVENT_TYPE_RESIZED);
    __Pyx_GIVEREF(__pyx_n_s_WINDOW_EVENT_TYPE_RESIZED);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_WINDOW_EVENT_TYPE_RESIZED);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "EnumType":59
 *         ('WINDOW_EVENT_TYPE_MOVED', WINDOW_EVENT_TYPE_MOVED),
 *         ('WINDOW_EVENT_TYPE_RESIZED', WINDOW_EVENT_TYPE_RESIZED),
 *         ('WINDOW_EVENT_TYPE_CHANGED', WINDOW_EVENT_TYPE_CHANGED),             # <<<<<<<<<<<<<<
 *         ('WINDOW_EVENT_TYPE_MINIMIZED', WINDOW_EVENT_TYPE_MINIMIZED),
 *         ('WINDOW_EVENT_TYPE_MAXIMIZED', WINDOW_EVENT_TYPE_MAXIMIZED),
 */
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(__pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_CHANGED); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_n_s_WINDOW_EVENT_TYPE_CHANGED);
    __Pyx_GIVEREF(__pyx_n_s_WINDOW_EVENT_TYPE_CHANGED);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_n_s_WINDOW_EVENT_TYPE_CHANGED);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "EnumType":60
 *         ('WINDOW_EVENT_TYPE_RESIZED', WINDOW_EVENT_TYPE_RESIZED),
 *         ('WINDOW_EVENT_TYPE_CHANGED', WINDOW_EVENT_TYPE_CHANGED),
 *         ('WINDOW_EVENT_TYPE_MINIMIZED', WINDOW_EVENT_TYPE_MINIMIZED),             # <<<<<<<<<<<<<<
 *         ('WINDOW_EVENT_TYPE_MAXIMIZED', WINDOW_EVENT_TYPE_MAXIMIZED),
 *         ('WINDOW_EVENT_TYPE_RESTORED', WINDOW_EVENT_TYPE_RESTORED),
 */
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(__pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_MINIMIZED); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_n_s_WINDOW_EVENT_TYPE_MINIMIZED);
    __Pyx_GIVEREF(__pyx_n_s_WINDOW_EVENT_TYPE_MINIMIZED);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_WINDOW_EVENT_TYPE_MINIMIZED);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "EnumType":61
 *         ('WINDOW_EVENT_TYPE_CHANGED', WINDOW_EVENT_TYPE_CHANGED),
 *         ('WINDOW_EVENT_TYPE_MINIMIZED', WINDOW_EVENT_TYPE_MINIMIZED),
 *         ('WINDOW_EVENT_TYPE_MAXIMIZED', WINDOW_EVENT_TYPE_MAXIMIZED),             # <<<<<<<<<<<<<<
 *         ('WINDOW_EVENT_TYPE_RESTORED', WINDOW_EVENT_TYPE_RESTORED),
 *         ('WINDOW_EVENT_TYPE_ENTER', WINDOW_EVENT_TYPE_ENTER),
 */
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(__pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_MAXIMIZED); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_n_s_WINDOW_EVENT_TYPE_MAXIMIZED);
    __Pyx_GIVEREF(__pyx_n_s_WINDOW_EVENT_TYPE_MAXIMIZED);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_WINDOW_EVENT_TYPE_MAXIMIZED);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "EnumType":62
 *         ('WINDOW_EVENT_TYPE_MINIMIZED', WINDOW_EVENT_TYPE_MINIMIZED),
 *         ('WINDOW_EVENT_TYPE_MAXIMIZED', WINDOW_EVENT_TYPE_MAXIMIZED),
 *         ('WINDOW_EVENT_TYPE_RESTORED', WINDOW_EVENT_TYPE_RESTORED),             # <<<<<<<<<<<<<<
 *         ('WINDOW_EVENT_TYPE_ENTER', WINDOW_EVENT_TYPE_ENTER),
 *         ('WINDOW_EVENT_TYPE_LEAVE', WINDOW_EVENT_TYPE_LEAVE),
 */
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(__pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_RESTORED); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_s_WINDOW_EVENT_TYPE_RESTORED);
    __Pyx_GIVEREF(__pyx_n_s_WINDOW_EVENT_TYPE_RESTORED);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_WINDOW_EVENT_TYPE_RESTORED);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "EnumType":63
 *         ('WINDOW_EVENT_TYPE_MAXIMIZED', WINDOW_EVENT_TYPE_MAXIMIZED),
 *         ('WINDOW_EVENT_TYPE_RESTORED', WINDOW_EVENT_TYPE_RESTORED),
 *         ('WINDOW_EVENT_TYPE_ENTER', WINDOW_EVENT_TYPE_ENTER),             # <<<<<<<<<<<<<<
 *         ('WINDOW_EVENT_TYPE_LEAVE', WINDOW_EVENT_TYPE_LEAVE),
 *         ('WINDOW_EVENT_TYPE_FOCUS_GAINED', WINDOW_EVENT_TYPE_FOCUS_GAINED),
 */
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(__pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_ENTER); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_INCREF(__pyx_n_s_WINDOW_EVENT_TYPE_ENTER);
    __Pyx_GIVEREF(__pyx_n_s_WINDOW_EVENT_TYPE_ENTER);
    PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_n_s_WINDOW_EVENT_TYPE_ENTER);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "EnumType":64
 *         ('WINDOW_EVENT_TYPE_RESTORED', WINDOW_EVENT_TYPE_RESTORED),
 *         ('WINDOW_EVENT_TYPE_ENTER', WINDOW_EVENT_TYPE_ENTER),
 *         ('WINDOW_EVENT_TYPE_LEAVE', WINDOW_EVENT_TYPE_LEAVE),             # <<<<<<<<<<<<<<
 *         ('WINDOW_EVENT_TYPE_FOCUS_GAINED', WINDOW_EVENT_TYPE_FOCUS_GAINED),
 *         ('WINDOW_EVENT_TYPE_FOCUS_LOST', WINDOW_EVENT_TYPE_FOCUS_LOST),
 */
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(__pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_LEAVE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 64, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_13 = PyTuple_New(2); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 64, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_INCREF(__pyx_n_s_WINDOW_EVENT_TYPE_LEAVE);
    __Pyx_GIVEREF(__pyx_n_s_WINDOW_EVENT_TYPE_LEAVE);
    PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_n_s_WINDOW_EVENT_TYPE_LEAVE);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "EnumType":65
 *         ('WINDOW_EVENT_TYPE_ENTER', WINDOW_EVENT_TYPE_ENTER),
 *         ('WINDOW_EVENT_TYPE_LEAVE', WINDOW_EVENT_TYPE_LEAVE),
 *         ('WINDOW_EVENT_TYPE_FOCUS_GAINED', WINDOW_EVENT_TYPE_FOCUS_GAINED),             # <<<<<<<<<<<<<<
 *         ('WINDOW_EVENT_TYPE_FOCUS_LOST', WINDOW_EVENT_TYPE_FOCUS_LOST),
 *         ('WINDOW_EVENT_TYPE_CLOSE', WINDOW_EVENT_TYPE_CLOSE),
 */
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(__pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_FOCUS_GAINED); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 65, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 65, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_INCREF(__pyx_n_s_WINDOW_EVENT_TYPE_FOCUS_GAINED);
    __Pyx_GIVEREF(__pyx_n_s_WINDOW_EVENT_TYPE_FOCUS_GAINED);
    PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_n_s_WINDOW_EVENT_TYPE_FOCUS_GAINED);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "EnumType":66
 *         ('WINDOW_EVENT_TYPE_LEAVE', WINDOW_EVENT_TYPE_LEAVE),
 *         ('WINDOW_EVENT_TYPE_FOCUS_GAINED', WINDOW_EVENT_TYPE_FOCUS_GAINED),
 *         ('WINDOW_EVENT_TYPE_FOCUS_LOST', WINDOW_EVENT_TYPE_FOCUS_LOST),             # <<<<<<<<<<<<<<
 *         ('WINDOW_EVENT_TYPE_CLOSE', WINDOW_EVENT_TYPE_CLOSE),
 *         ('WINDOW_EVENT_TYPE_TAKE_FOCUS', WINDOW_EVENT_TYPE_TAKE_FOCUS),
 */
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(__pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_FOCUS_LOST); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 66, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_15 = PyTuple_New(2); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 66, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_INCREF(__pyx_n_s_WINDOW_EVENT_TYPE_FOCUS_LOST);
    __Pyx_GIVEREF(__pyx_n_s_WINDOW_EVENT_TYPE_FOCUS_LOST);
    PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_n_s_WINDOW_EVENT_TYPE_FOCUS_LOST);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "EnumType":67
 *         ('WINDOW_EVENT_TYPE_FOCUS_GAINED', WINDOW_EVENT_TYPE_FOCUS_GAINED),
 *         ('WINDOW_EVENT_TYPE_FOCUS_LOST', WINDOW_EVENT_TYPE_FOCUS_LOST),
 *         ('WINDOW_EVENT_TYPE_CLOSE', WINDOW_EVENT_TYPE_CLOSE),             # <<<<<<<<<<<<<<
 *         ('WINDOW_EVENT_TYPE_TAKE_FOCUS', WINDOW_EVENT_TYPE_TAKE_FOCUS),
 *         ('WINDOW_EVENT_TYPE_HIT_TEST', WINDOW_EVENT_TYPE_HIT_TEST),
 */
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(__pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_CLOSE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 67, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 67, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_INCREF(__pyx_n_s_WINDOW_EVENT_TYPE_CLOSE);
    __Pyx_GIVEREF(__pyx_n_s_WINDOW_EVENT_TYPE_CLOSE);
    PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_n_s_WINDOW_EVENT_TYPE_CLOSE);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "EnumType":68
 *         ('WINDOW_EVENT_TYPE_FOCUS_LOST', WINDOW_EVENT_TYPE_FOCUS_LOST),
 *         ('WINDOW_EVENT_TYPE_CLOSE', WINDOW_EVENT_TYPE_CLOSE),
 *         ('WINDOW_EVENT_TYPE_TAKE_FOCUS', WINDOW_EVENT_TYPE_TAKE_FOCUS),             # <<<<<<<<<<<<<<
 *         ('WINDOW_EVENT_TYPE_HIT_TEST', WINDOW_EVENT_TYPE_HIT_TEST),
 *     ]))
 */
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(__pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_TAKE_FOCUS); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_17 = PyTuple_New(2); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_INCREF(__pyx_n_s_WINDOW_EVENT_TYPE_TAKE_FOCUS);
    __Pyx_GIVEREF(__pyx_n_s_WINDOW_EVENT_TYPE_TAKE_FOCUS);
    PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_n_s_WINDOW_EVENT_TYPE_TAKE_FOCUS);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "EnumType":69
 *         ('WINDOW_EVENT_TYPE_CLOSE', WINDOW_EVENT_TYPE_CLOSE),
 *         ('WINDOW_EVENT_TYPE_TAKE_FOCUS', WINDOW_EVENT_TYPE_TAKE_FOCUS),
 *         ('WINDOW_EVENT_TYPE_HIT_TEST', WINDOW_EVENT_TYPE_HIT_TEST),             # <<<<<<<<<<<<<<
 *     ]))
 *     __Pyx_globals['WINDOW_EVENT_TYPE_SHOWN'] = WindowEventTypes.WINDOW_EVENT_TYPE_SHOWN
 */
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(__pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_HIT_TEST); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_18 = PyTuple_New(2); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_INCREF(__pyx_n_s_WINDOW_EVENT_TYPE_HIT_TEST);
    __Pyx_GIVEREF(__pyx_n_s_WINDOW_EVENT_TYPE_HIT_TEST);
    PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_n_s_WINDOW_EVENT_TYPE_HIT_TEST);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_18, 1, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "EnumType":53
 * if PY_VERSION_HEX >= 0x03040000:
 * 
 *     WindowEventTypes = __Pyx_EnumBase('WindowEventTypes', __Pyx_OrderedDict([             # <<<<<<<<<<<<<<
 *         ('WINDOW_EVENT_TYPE_SHOWN', WINDOW_EVENT_TYPE_SHOWN),
 *         ('WINDOW_EVENT_TYPE_HIDDEN', WINDOW_EVENT_TYPE_HIDDEN),
 */
    __pyx_t_1 = PyList_New(16); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_11);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_10);
    PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_9);
    PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_8);
    PyList_SET_ITEM(__pyx_t_1, 3, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_7);
    PyList_SET_ITEM(__pyx_t_1, 4, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_6);
    PyList_SET_ITEM(__pyx_t_1, 5, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_1, 6, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyList_SET_ITEM(__pyx_t_1, 7, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyList_SET_ITEM(__pyx_t_1, 8, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_12);
    PyList_SET_ITEM(__pyx_t_1, 9, __pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_13);
    PyList_SET_ITEM(__pyx_t_1, 10, __pyx_t_13);
    __Pyx_GIVEREF(__pyx_t_14);
    PyList_SET_ITEM(__pyx_t_1, 11, __pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_15);
    PyList_SET_ITEM(__pyx_t_1, 12, __pyx_t_15);
    __Pyx_GIVEREF(__pyx_t_16);
    PyList_SET_ITEM(__pyx_t_1, 13, __pyx_t_16);
    __Pyx_GIVEREF(__pyx_t_17);
    PyList_SET_ITEM(__pyx_t_1, 14, __pyx_t_17);
    __Pyx_GIVEREF(__pyx_t_18);
    PyList_SET_ITEM(__pyx_t_1, 15, __pyx_t_18);
    __pyx_t_11 = 0;
    __pyx_t_10 = 0;
    __pyx_t_9 = 0;
    __pyx_t_8 = 0;
    __pyx_t_7 = 0;
    __pyx_t_6 = 0;
    __pyx_t_5 = 0;
    __pyx_t_4 = 0;
    __pyx_t_3 = 0;
    __pyx_t_12 = 0;
    __pyx_t_13 = 0;
    __pyx_t_14 = 0;
    __pyx_t_15 = 0;
    __pyx_t_16 = 0;
    __pyx_t_17 = 0;
    __pyx_t_18 = 0;
    __pyx_t_18 = __Pyx_PyObject_CallOneArg(__Pyx_OrderedDict, __pyx_t_1); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_WindowEventTypes);
    __Pyx_GIVEREF(__pyx_n_s_WindowEventTypes);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_WindowEventTypes);
    __Pyx_GIVEREF(__pyx_t_18);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_18);
    __pyx_t_18 = 0;
    __pyx_t_18 = __Pyx_PyObject_Call(__Pyx_EnumBase, __pyx_t_1, NULL); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_WindowEventTypes, __pyx_t_18) < 0) __PYX_ERR(1, 53, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

    /* "EnumType":71
 *         ('WINDOW_EVENT_TYPE_HIT_TEST', WINDOW_EVENT_TYPE_HIT_TEST),
 *     ]))
 *     __Pyx_globals['WINDOW_EVENT_TYPE_SHOWN'] = WindowEventTypes.WINDOW_EVENT_TYPE_SHOWN             # <<<<<<<<<<<<<<
 *     __Pyx_globals['WINDOW_EVENT_TYPE_HIDDEN'] = WindowEventTypes.WINDOW_EVENT_TYPE_HIDDEN
 *     __Pyx_globals['WINDOW_EVENT_TYPE_EXPOSED'] = WindowEventTypes.WINDOW_EVENT_TYPE_EXPOSED
 */
    __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_WindowEventTypes); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_WINDOW_EVENT_TYPE_SHOWN); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 71, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_WINDOW_EVENT_TYPE_SHOWN, __pyx_t_1) < 0)) __PYX_ERR(1, 71, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":72
 *     ]))
 *     __Pyx_globals['WINDOW_EVENT_TYPE_SHOWN'] = WindowEventTypes.WINDOW_EVENT_TYPE_SHOWN
 *     __Pyx_globals['WINDOW_EVENT_TYPE_HIDDEN'] = WindowEventTypes.WINDOW_EVENT_TYPE_HIDDEN             # <<<<<<<<<<<<<<
 *     __Pyx_globals['WINDOW_EVENT_TYPE_EXPOSED'] = WindowEventTypes.WINDOW_EVENT_TYPE_EXPOSED
 *     __Pyx_globals['WINDOW_EVENT_TYPE_MOVED'] = WindowEventTypes.WINDOW_EVENT_TYPE_MOVED
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_WindowEventTypes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 72, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_WINDOW_EVENT_TYPE_HIDDEN); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 72, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 72, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_WINDOW_EVENT_TYPE_HIDDEN, __pyx_t_18) < 0)) __PYX_ERR(1, 72, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

    /* "EnumType":73
 *     __Pyx_globals['WINDOW_EVENT_TYPE_SHOWN'] = WindowEventTypes.WINDOW_EVENT_TYPE_SHOWN
 *     __Pyx_globals['WINDOW_EVENT_TYPE_HIDDEN'] = WindowEventTypes.WINDOW_EVENT_TYPE_HIDDEN
 *     __Pyx_globals['WINDOW_EVENT_TYPE_EXPOSED'] = WindowEventTypes.WINDOW_EVENT_TYPE_EXPOSED             # <<<<<<<<<<<<<<
 *     __Pyx_globals['WINDOW_EVENT_TYPE_MOVED'] = WindowEventTypes.WINDOW_EVENT_TYPE_MOVED
 *     __Pyx_globals['WINDOW_EVENT_TYPE_RESIZED'] = WindowEventTypes.WINDOW_EVENT_TYPE_RESIZED
 */
    __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_WindowEventTypes); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 73, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_WINDOW_EVENT_TYPE_EXPOSED); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 73, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 73, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_WINDOW_EVENT_TYPE_EXPOSED, __pyx_t_1) < 0)) __PYX_ERR(1, 73, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":74
 *     __Pyx_globals['WINDOW_EVENT_TYPE_HIDDEN'] = WindowEventTypes.WINDOW_EVENT_TYPE_HIDDEN
 *     __Pyx_globals['WINDOW_EVENT_TYPE_EXPOSED'] = WindowEventTypes.WINDOW_EVENT_TYPE_EXPOSED
 *     __Pyx_globals['WINDOW_EVENT_TYPE_MOVED'] = WindowEventTypes.WINDOW_EVENT_TYPE_MOVED             # <<<<<<<<<<<<<<
 *     __Pyx_globals['WINDOW_EVENT_TYPE_RESIZED'] = WindowEventTypes.WINDOW_EVENT_TYPE_RESIZED
 *     __Pyx_globals['WINDOW_EVENT_TYPE_CHANGED'] = WindowEventTypes.WINDOW_EVENT_TYPE_CHANGED
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_WindowEventTypes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 74, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_WINDOW_EVENT_TYPE_MOVED); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 74, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 74, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_WINDOW_EVENT_TYPE_MOVED, __pyx_t_18) < 0)) __PYX_ERR(1, 74, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

    /* "EnumType":75
 *     __Pyx_globals['WINDOW_EVENT_TYPE_EXPOSED'] = WindowEventTypes.WINDOW_EVENT_TYPE_EXPOSED
 *     __Pyx_globals['WINDOW_EVENT_TYPE_MOVED'] = WindowEventTypes.WINDOW_EVENT_TYPE_MOVED
 *     __Pyx_globals['WINDOW_EVENT_TYPE_RESIZED'] = WindowEventTypes.WINDOW_EVENT_TYPE_RESIZED             # <<<<<<<<<<<<<<
 *     __Pyx_globals['WINDOW_EVENT_TYPE_CHANGED'] = WindowEventTypes.WINDOW_EVENT_TYPE_CHANGED
 *     __Pyx_globals['WINDOW_EVENT_TYPE_MINIMIZED'] = WindowEventTypes.WINDOW_EVENT_TYPE_MINIMIZED
 */
    __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_WindowEventTypes); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_WINDOW_EVENT_TYPE_RESIZED); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 75, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_WINDOW_EVENT_TYPE_RESIZED, __pyx_t_1) < 0)) __PYX_ERR(1, 75, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":76
 *     __Pyx_globals['WINDOW_EVENT_TYPE_MOVED'] = WindowEventTypes.WINDOW_EVENT_TYPE_MOVED
 *     __Pyx_globals['WINDOW_EVENT_TYPE_RESIZED'] = WindowEventTypes.WINDOW_EVENT_TYPE_RESIZED
 *     __Pyx_globals['WINDOW_EVENT_TYPE_CHANGED'] = WindowEventTypes.WINDOW_EVENT_TYPE_CHANGED             # <<<<<<<<<<<<<<
 *     __Pyx_globals['WINDOW_EVENT_TYPE_MINIMIZED'] = WindowEventTypes.WINDOW_EVENT_TYPE_MINIMIZED
 *     __Pyx_globals['WINDOW_EVENT_TYPE_MAXIMIZED'] = WindowEventTypes.WINDOW_EVENT_TYPE_MAXIMIZED
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_WindowEventTypes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_WINDOW_EVENT_TYPE_CHANGED); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 76, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_WINDOW_EVENT_TYPE_CHANGED, __pyx_t_18) < 0)) __PYX_ERR(1, 76, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

    /* "EnumType":77
 *     __Pyx_globals['WINDOW_EVENT_TYPE_RESIZED'] = WindowEventTypes.WINDOW_EVENT_TYPE_RESIZED
 *     __Pyx_globals['WINDOW_EVENT_TYPE_CHANGED'] = WindowEventTypes.WINDOW_EVENT_TYPE_CHANGED
 *     __Pyx_globals['WINDOW_EVENT_TYPE_MINIMIZED'] = WindowEventTypes.WINDOW_EVENT_TYPE_MINIMIZED             # <<<<<<<<<<<<<<
 *     __Pyx_globals['WINDOW_EVENT_TYPE_MAXIMIZED'] = WindowEventTypes.WINDOW_EVENT_TYPE_MAXIMIZED
 *     __Pyx_globals['WINDOW_EVENT_TYPE_RESTORED'] = WindowEventTypes.WINDOW_EVENT_TYPE_RESTORED
 */
    __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_WindowEventTypes); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_WINDOW_EVENT_TYPE_MINIMIZED); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 77, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_WINDOW_EVENT_TYPE_MINIMIZED, __pyx_t_1) < 0)) __PYX_ERR(1, 77, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":78
 *     __Pyx_globals['WINDOW_EVENT_TYPE_CHANGED'] = WindowEventTypes.WINDOW_EVENT_TYPE_CHANGED
 *     __Pyx_globals['WINDOW_EVENT_TYPE_MINIMIZED'] = WindowEventTypes.WINDOW_EVENT_TYPE_MINIMIZED
 *     __Pyx_globals['WINDOW_EVENT_TYPE_MAXIMIZED'] = WindowEventTypes.WINDOW_EVENT_TYPE_MAXIMIZED             # <<<<<<<<<<<<<<
 *     __Pyx_globals['WINDOW_EVENT_TYPE_RESTORED'] = WindowEventTypes.WINDOW_EVENT_TYPE_RESTORED
 *     __Pyx_globals['WINDOW_EVENT_TYPE_ENTER'] = WindowEventTypes.WINDOW_EVENT_TYPE_ENTER
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_WindowEventTypes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 78, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_WINDOW_EVENT_TYPE_MAXIMIZED); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 78, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 78, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_WINDOW_EVENT_TYPE_MAXIMIZED, __pyx_t_18) < 0)) __PYX_ERR(1, 78, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

    /* "EnumType":79
 *     __Pyx_globals['WINDOW_EVENT_TYPE_MINIMIZED'] = WindowEventTypes.WINDOW_EVENT_TYPE_MINIMIZED
 *     __Pyx_globals['WINDOW_EVENT_TYPE_MAXIMIZED'] = WindowEventTypes.WINDOW_EVENT_TYPE_MAXIMIZED
 *     __Pyx_globals['WINDOW_EVENT_TYPE_RESTORED'] = WindowEventTypes.WINDOW_EVENT_TYPE_RESTORED             # <<<<<<<<<<<<<<
 *     __Pyx_globals['WINDOW_EVENT_TYPE_ENTER'] = WindowEventTypes.WINDOW_EVENT_TYPE_ENTER
 *     __Pyx_globals['WINDOW_EVENT_TYPE_LEAVE'] = WindowEventTypes.WINDOW_EVENT_TYPE_LEAVE
 */
    __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_WindowEventTypes); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_WINDOW_EVENT_TYPE_RESTORED); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 79, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_WINDOW_EVENT_TYPE_RESTORED, __pyx_t_1) < 0)) __PYX_ERR(1, 79, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":80
 *     __Pyx_globals['WINDOW_EVENT_TYPE_MAXIMIZED'] = WindowEventTypes.WINDOW_EVENT_TYPE_MAXIMIZED
 *     __Pyx_globals['WINDOW_EVENT_TYPE_RESTORED'] = WindowEventTypes.WINDOW_EVENT_TYPE_RESTORED
 *     __Pyx_globals['WINDOW_EVENT_TYPE_ENTER'] = WindowEventTypes.WINDOW_EVENT_TYPE_ENTER             # <<<<<<<<<<<<<<
 *     __Pyx_globals['WINDOW_EVENT_TYPE_LEAVE'] = WindowEventTypes.WINDOW_EVENT_TYPE_LEAVE
 *     __Pyx_globals['WINDOW_EVENT_TYPE_FOCUS_GAINED'] = WindowEventTypes.WINDOW_EVENT_TYPE_FOCUS_GAINED
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_WindowEventTypes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_WINDOW_EVENT_TYPE_ENTER); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 80, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_WINDOW_EVENT_TYPE_ENTER, __pyx_t_18) < 0)) __PYX_ERR(1, 80, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

    /* "EnumType":81
 *     __Pyx_globals['WINDOW_EVENT_TYPE_RESTORED'] = WindowEventTypes.WINDOW_EVENT_TYPE_RESTORED
 *     __Pyx_globals['WINDOW_EVENT_TYPE_ENTER'] = WindowEventTypes.WINDOW_EVENT_TYPE_ENTER
 *     __Pyx_globals['WINDOW_EVENT_TYPE_LEAVE'] = WindowEventTypes.WINDOW_EVENT_TYPE_LEAVE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['WINDOW_EVENT_TYPE_FOCUS_GAINED'] = WindowEventTypes.WINDOW_EVENT_TYPE_FOCUS_GAINED
 *     __Pyx_globals['WINDOW_EVENT_TYPE_FOCUS_LOST'] = WindowEventTypes.WINDOW_EVENT_TYPE_FOCUS_LOST
 */
    __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_WindowEventTypes); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_WINDOW_EVENT_TYPE_LEAVE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 81, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_WINDOW_EVENT_TYPE_LEAVE, __pyx_t_1) < 0)) __PYX_ERR(1, 81, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":82
 *     __Pyx_globals['WINDOW_EVENT_TYPE_ENTER'] = WindowEventTypes.WINDOW_EVENT_TYPE_ENTER
 *     __Pyx_globals['WINDOW_EVENT_TYPE_LEAVE'] = WindowEventTypes.WINDOW_EVENT_TYPE_LEAVE
 *     __Pyx_globals['WINDOW_EVENT_TYPE_FOCUS_GAINED'] = WindowEventTypes.WINDOW_EVENT_TYPE_FOCUS_GAINED             # <<<<<<<<<<<<<<
 *     __Pyx_globals['WINDOW_EVENT_TYPE_FOCUS_LOST'] = WindowEventTypes.WINDOW_EVENT_TYPE_FOCUS_LOST
 *     __Pyx_globals['WINDOW_EVENT_TYPE_CLOSE'] = WindowEventTypes.WINDOW_EVENT_TYPE_CLOSE
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_WindowEventTypes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_WINDOW_EVENT_TYPE_FOCUS_GAINED); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 82, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_WINDOW_EVENT_TYPE_FOCUS_GAINED, __pyx_t_18) < 0)) __PYX_ERR(1, 82, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

    /* "EnumType":83
 *     __Pyx_globals['WINDOW_EVENT_TYPE_LEAVE'] = WindowEventTypes.WINDOW_EVENT_TYPE_LEAVE
 *     __Pyx_globals['WINDOW_EVENT_TYPE_FOCUS_GAINED'] = WindowEventTypes.WINDOW_EVENT_TYPE_FOCUS_GAINED
 *     __Pyx_globals['WINDOW_EVENT_TYPE_FOCUS_LOST'] = WindowEventTypes.WINDOW_EVENT_TYPE_FOCUS_LOST             # <<<<<<<<<<<<<<
 *     __Pyx_globals['WINDOW_EVENT_TYPE_CLOSE'] = WindowEventTypes.WINDOW_EVENT_TYPE_CLOSE
 *     __Pyx_globals['WINDOW_EVENT_TYPE_TAKE_FOCUS'] = WindowEventTypes.WINDOW_EVENT_TYPE_TAKE_FOCUS
 */
    __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_WindowEventTypes); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_WINDOW_EVENT_TYPE_FOCUS_LOST); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 83, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_WINDOW_EVENT_TYPE_FOCUS_LOST, __pyx_t_1) < 0)) __PYX_ERR(1, 83, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":84
 *     __Pyx_globals['WINDOW_EVENT_TYPE_FOCUS_GAINED'] = WindowEventTypes.WINDOW_EVENT_TYPE_FOCUS_GAINED
 *     __Pyx_globals['WINDOW_EVENT_TYPE_FOCUS_LOST'] = WindowEventTypes.WINDOW_EVENT_TYPE_FOCUS_LOST
 *     __Pyx_globals['WINDOW_EVENT_TYPE_CLOSE'] = WindowEventTypes.WINDOW_EVENT_TYPE_CLOSE             # <<<<<<<<<<<<<<
 *     __Pyx_globals['WINDOW_EVENT_TYPE_TAKE_FOCUS'] = WindowEventTypes.WINDOW_EVENT_TYPE_TAKE_FOCUS
 *     __Pyx_globals['WINDOW_EVENT_TYPE_HIT_TEST'] = WindowEventTypes.WINDOW_EVENT_TYPE_HIT_TEST
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_WindowEventTypes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_WINDOW_EVENT_TYPE_CLOSE); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 84, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_WINDOW_EVENT_TYPE_CLOSE, __pyx_t_18) < 0)) __PYX_ERR(1, 84, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

    /* "EnumType":85
 *     __Pyx_globals['WINDOW_EVENT_TYPE_FOCUS_LOST'] = WindowEventTypes.WINDOW_EVENT_TYPE_FOCUS_LOST
 *     __Pyx_globals['WINDOW_EVENT_TYPE_CLOSE'] = WindowEventTypes.WINDOW_EVENT_TYPE_CLOSE
 *     __Pyx_globals['WINDOW_EVENT_TYPE_TAKE_FOCUS'] = WindowEventTypes.WINDOW_EVENT_TYPE_TAKE_FOCUS             # <<<<<<<<<<<<<<
 *     __Pyx_globals['WINDOW_EVENT_TYPE_HIT_TEST'] = WindowEventTypes.WINDOW_EVENT_TYPE_HIT_TEST
 * else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_WindowEventTypes); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_WINDOW_EVENT_TYPE_TAKE_FOCUS); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 85, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_WINDOW_EVENT_TYPE_TAKE_FOCUS, __pyx_t_1) < 0)) __PYX_ERR(1, 85, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":86
 *     __Pyx_globals['WINDOW_EVENT_TYPE_CLOSE'] = WindowEventTypes.WINDOW_EVENT_TYPE_CLOSE
 *     __Pyx_globals['WINDOW_EVENT_TYPE_TAKE_FOCUS'] = WindowEventTypes.WINDOW_EVENT_TYPE_TAKE_FOCUS
 *     __Pyx_globals['WINDOW_EVENT_TYPE_HIT_TEST'] = WindowEventTypes.WINDOW_EVENT_TYPE_HIT_TEST             # <<<<<<<<<<<<<<
 * else:
 *     class WindowEventTypes(__Pyx_EnumBase):
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_WindowEventTypes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 86, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_WINDOW_EVENT_TYPE_HIT_TEST); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 86, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 86, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_WINDOW_EVENT_TYPE_HIT_TEST, __pyx_t_18) < 0)) __PYX_ERR(1, 86, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

    /* "EnumType":51
 * 
 * cdef dict __Pyx_globals = globals()
 * if PY_VERSION_HEX >= 0x03040000:             # <<<<<<<<<<<<<<
 * 
 *     WindowEventTypes = __Pyx_EnumBase('WindowEventTypes', __Pyx_OrderedDict([
 */
    goto __pyx_L5;
  }

  /* "EnumType":88
 *     __Pyx_globals['WINDOW_EVENT_TYPE_HIT_TEST'] = WindowEventTypes.WINDOW_EVENT_TYPE_HIT_TEST
 * else:
 *     class WindowEventTypes(__Pyx_EnumBase):             # <<<<<<<<<<<<<<
 *         pass
 *     __Pyx_globals['WINDOW_EVENT_TYPE_SHOWN'] = WindowEventTypes(WINDOW_EVENT_TYPE_SHOWN, 'WINDOW_EVENT_TYPE_SHOWN')
 */
  /*else*/ {
    __pyx_t_18 = PyTuple_New(1); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_INCREF(__Pyx_EnumBase);
    __Pyx_GIVEREF(__Pyx_EnumBase);
    PyTuple_SET_ITEM(__pyx_t_18, 0, __Pyx_EnumBase);
    __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_18); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_17 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_t_18, __pyx_n_s_WindowEventTypes, __pyx_n_s_WindowEventTypes, (PyObject *) NULL, __pyx_n_s_EnumType, (PyObject *) NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_16 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_WindowEventTypes, __pyx_t_18, __pyx_t_17, NULL, 0, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_WindowEventTypes, __pyx_t_16) < 0) __PYX_ERR(1, 88, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

    /* "EnumType":90
 *     class WindowEventTypes(__Pyx_EnumBase):
 *         pass
 *     __Pyx_globals['WINDOW_EVENT_TYPE_SHOWN'] = WindowEventTypes(WINDOW_EVENT_TYPE_SHOWN, 'WINDOW_EVENT_TYPE_SHOWN')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['WINDOW_EVENT_TYPE_HIDDEN'] = WindowEventTypes(WINDOW_EVENT_TYPE_HIDDEN, 'WINDOW_EVENT_TYPE_HIDDEN')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_EXPOSED'] = WindowEventTypes(WINDOW_EVENT_TYPE_EXPOSED, 'WINDOW_EVENT_TYPE_EXPOSED')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_WindowEventTypes); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(__pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_SHOWN); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_17 = PyTuple_New(2); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_WINDOW_EVENT_TYPE_SHOWN);
    __Pyx_GIVEREF(__pyx_n_s_WINDOW_EVENT_TYPE_SHOWN);
    PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_n_s_WINDOW_EVENT_TYPE_SHOWN);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 90, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_WINDOW_EVENT_TYPE_SHOWN, __pyx_t_1) < 0)) __PYX_ERR(1, 90, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":91
 *         pass
 *     __Pyx_globals['WINDOW_EVENT_TYPE_SHOWN'] = WindowEventTypes(WINDOW_EVENT_TYPE_SHOWN, 'WINDOW_EVENT_TYPE_SHOWN')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_HIDDEN'] = WindowEventTypes(WINDOW_EVENT_TYPE_HIDDEN, 'WINDOW_EVENT_TYPE_HIDDEN')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['WINDOW_EVENT_TYPE_EXPOSED'] = WindowEventTypes(WINDOW_EVENT_TYPE_EXPOSED, 'WINDOW_EVENT_TYPE_EXPOSED')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_MOVED'] = WindowEventTypes(WINDOW_EVENT_TYPE_MOVED, 'WINDOW_EVENT_TYPE_MOVED')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_WindowEventTypes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_17 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(__pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_HIDDEN); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_18 = PyTuple_New(2); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_GIVEREF(__pyx_t_17);
    PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_17);
    __Pyx_INCREF(__pyx_n_s_WINDOW_EVENT_TYPE_HIDDEN);
    __Pyx_GIVEREF(__pyx_n_s_WINDOW_EVENT_TYPE_HIDDEN);
    PyTuple_SET_ITEM(__pyx_t_18, 1, __pyx_n_s_WINDOW_EVENT_TYPE_HIDDEN);
    __pyx_t_17 = 0;
    __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_18, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 91, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_WINDOW_EVENT_TYPE_HIDDEN, __pyx_t_17) < 0)) __PYX_ERR(1, 91, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

    /* "EnumType":92
 *     __Pyx_globals['WINDOW_EVENT_TYPE_SHOWN'] = WindowEventTypes(WINDOW_EVENT_TYPE_SHOWN, 'WINDOW_EVENT_TYPE_SHOWN')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_HIDDEN'] = WindowEventTypes(WINDOW_EVENT_TYPE_HIDDEN, 'WINDOW_EVENT_TYPE_HIDDEN')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_EXPOSED'] = WindowEventTypes(WINDOW_EVENT_TYPE_EXPOSED, 'WINDOW_EVENT_TYPE_EXPOSED')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['WINDOW_EVENT_TYPE_MOVED'] = WindowEventTypes(WINDOW_EVENT_TYPE_MOVED, 'WINDOW_EVENT_TYPE_MOVED')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_RESIZED'] = WindowEventTypes(WINDOW_EVENT_TYPE_RESIZED, 'WINDOW_EVENT_TYPE_RESIZED')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_WindowEventTypes); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_18 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(__pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_EXPOSED); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_18);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_18);
    __Pyx_INCREF(__pyx_n_s_WINDOW_EVENT_TYPE_EXPOSED);
    __Pyx_GIVEREF(__pyx_n_s_WINDOW_EVENT_TYPE_EXPOSED);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_WINDOW_EVENT_TYPE_EXPOSED);
    __pyx_t_18 = 0;
    __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_1, NULL); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 92, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_WINDOW_EVENT_TYPE_EXPOSED, __pyx_t_18) < 0)) __PYX_ERR(1, 92, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

    /* "EnumType":93
 *     __Pyx_globals['WINDOW_EVENT_TYPE_HIDDEN'] = WindowEventTypes(WINDOW_EVENT_TYPE_HIDDEN, 'WINDOW_EVENT_TYPE_HIDDEN')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_EXPOSED'] = WindowEventTypes(WINDOW_EVENT_TYPE_EXPOSED, 'WINDOW_EVENT_TYPE_EXPOSED')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_MOVED'] = WindowEventTypes(WINDOW_EVENT_TYPE_MOVED, 'WINDOW_EVENT_TYPE_MOVED')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['WINDOW_EVENT_TYPE_RESIZED'] = WindowEventTypes(WINDOW_EVENT_TYPE_RESIZED, 'WINDOW_EVENT_TYPE_RESIZED')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_CHANGED'] = WindowEventTypes(WINDOW_EVENT_TYPE_CHANGED, 'WINDOW_EVENT_TYPE_CHANGED')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_WindowEventTypes); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(__pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_MOVED); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_17 = PyTuple_New(2); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_WINDOW_EVENT_TYPE_MOVED);
    __Pyx_GIVEREF(__pyx_n_s_WINDOW_EVENT_TYPE_MOVED);
    PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_n_s_WINDOW_EVENT_TYPE_MOVED);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 93, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_WINDOW_EVENT_TYPE_MOVED, __pyx_t_1) < 0)) __PYX_ERR(1, 93, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":94
 *     __Pyx_globals['WINDOW_EVENT_TYPE_EXPOSED'] = WindowEventTypes(WINDOW_EVENT_TYPE_EXPOSED, 'WINDOW_EVENT_TYPE_EXPOSED')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_MOVED'] = WindowEventTypes(WINDOW_EVENT_TYPE_MOVED, 'WINDOW_EVENT_TYPE_MOVED')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_RESIZED'] = WindowEventTypes(WINDOW_EVENT_TYPE_RESIZED, 'WINDOW_EVENT_TYPE_RESIZED')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['WINDOW_EVENT_TYPE_CHANGED'] = WindowEventTypes(WINDOW_EVENT_TYPE_CHANGED, 'WINDOW_EVENT_TYPE_CHANGED')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_MINIMIZED'] = WindowEventTypes(WINDOW_EVENT_TYPE_MINIMIZED, 'WINDOW_EVENT_TYPE_MINIMIZED')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_WindowEventTypes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_17 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(__pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_RESIZED); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_18 = PyTuple_New(2); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_GIVEREF(__pyx_t_17);
    PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_17);
    __Pyx_INCREF(__pyx_n_s_WINDOW_EVENT_TYPE_RESIZED);
    __Pyx_GIVEREF(__pyx_n_s_WINDOW_EVENT_TYPE_RESIZED);
    PyTuple_SET_ITEM(__pyx_t_18, 1, __pyx_n_s_WINDOW_EVENT_TYPE_RESIZED);
    __pyx_t_17 = 0;
    __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_18, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 94, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_WINDOW_EVENT_TYPE_RESIZED, __pyx_t_17) < 0)) __PYX_ERR(1, 94, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

    /* "EnumType":95
 *     __Pyx_globals['WINDOW_EVENT_TYPE_MOVED'] = WindowEventTypes(WINDOW_EVENT_TYPE_MOVED, 'WINDOW_EVENT_TYPE_MOVED')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_RESIZED'] = WindowEventTypes(WINDOW_EVENT_TYPE_RESIZED, 'WINDOW_EVENT_TYPE_RESIZED')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_CHANGED'] = WindowEventTypes(WINDOW_EVENT_TYPE_CHANGED, 'WINDOW_EVENT_TYPE_CHANGED')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['WINDOW_EVENT_TYPE_MINIMIZED'] = WindowEventTypes(WINDOW_EVENT_TYPE_MINIMIZED, 'WINDOW_EVENT_TYPE_MINIMIZED')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_MAXIMIZED'] = WindowEventTypes(WINDOW_EVENT_TYPE_MAXIMIZED, 'WINDOW_EVENT_TYPE_MAXIMIZED')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_WindowEventTypes); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_18 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(__pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_CHANGED); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_18);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_18);
    __Pyx_INCREF(__pyx_n_s_WINDOW_EVENT_TYPE_CHANGED);
    __Pyx_GIVEREF(__pyx_n_s_WINDOW_EVENT_TYPE_CHANGED);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_WINDOW_EVENT_TYPE_CHANGED);
    __pyx_t_18 = 0;
    __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_1, NULL); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 95, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_WINDOW_EVENT_TYPE_CHANGED, __pyx_t_18) < 0)) __PYX_ERR(1, 95, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

    /* "EnumType":96
 *     __Pyx_globals['WINDOW_EVENT_TYPE_RESIZED'] = WindowEventTypes(WINDOW_EVENT_TYPE_RESIZED, 'WINDOW_EVENT_TYPE_RESIZED')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_CHANGED'] = WindowEventTypes(WINDOW_EVENT_TYPE_CHANGED, 'WINDOW_EVENT_TYPE_CHANGED')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_MINIMIZED'] = WindowEventTypes(WINDOW_EVENT_TYPE_MINIMIZED, 'WINDOW_EVENT_TYPE_MINIMIZED')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['WINDOW_EVENT_TYPE_MAXIMIZED'] = WindowEventTypes(WINDOW_EVENT_TYPE_MAXIMIZED, 'WINDOW_EVENT_TYPE_MAXIMIZED')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_RESTORED'] = WindowEventTypes(WINDOW_EVENT_TYPE_RESTORED, 'WINDOW_EVENT_TYPE_RESTORED')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_WindowEventTypes); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(__pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_MINIMIZED); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_17 = PyTuple_New(2); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_WINDOW_EVENT_TYPE_MINIMIZED);
    __Pyx_GIVEREF(__pyx_n_s_WINDOW_EVENT_TYPE_MINIMIZED);
    PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_n_s_WINDOW_EVENT_TYPE_MINIMIZED);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 96, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_WINDOW_EVENT_TYPE_MINIMIZED, __pyx_t_1) < 0)) __PYX_ERR(1, 96, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":97
 *     __Pyx_globals['WINDOW_EVENT_TYPE_CHANGED'] = WindowEventTypes(WINDOW_EVENT_TYPE_CHANGED, 'WINDOW_EVENT_TYPE_CHANGED')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_MINIMIZED'] = WindowEventTypes(WINDOW_EVENT_TYPE_MINIMIZED, 'WINDOW_EVENT_TYPE_MINIMIZED')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_MAXIMIZED'] = WindowEventTypes(WINDOW_EVENT_TYPE_MAXIMIZED, 'WINDOW_EVENT_TYPE_MAXIMIZED')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['WINDOW_EVENT_TYPE_RESTORED'] = WindowEventTypes(WINDOW_EVENT_TYPE_RESTORED, 'WINDOW_EVENT_TYPE_RESTORED')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_ENTER'] = WindowEventTypes(WINDOW_EVENT_TYPE_ENTER, 'WINDOW_EVENT_TYPE_ENTER')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_WindowEventTypes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 97, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_17 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(__pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_MAXIMIZED); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 97, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_18 = PyTuple_New(2); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 97, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_GIVEREF(__pyx_t_17);
    PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_17);
    __Pyx_INCREF(__pyx_n_s_WINDOW_EVENT_TYPE_MAXIMIZED);
    __Pyx_GIVEREF(__pyx_n_s_WINDOW_EVENT_TYPE_MAXIMIZED);
    PyTuple_SET_ITEM(__pyx_t_18, 1, __pyx_n_s_WINDOW_EVENT_TYPE_MAXIMIZED);
    __pyx_t_17 = 0;
    __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_18, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 97, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 97, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_WINDOW_EVENT_TYPE_MAXIMIZED, __pyx_t_17) < 0)) __PYX_ERR(1, 97, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

    /* "EnumType":98
 *     __Pyx_globals['WINDOW_EVENT_TYPE_MINIMIZED'] = WindowEventTypes(WINDOW_EVENT_TYPE_MINIMIZED, 'WINDOW_EVENT_TYPE_MINIMIZED')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_MAXIMIZED'] = WindowEventTypes(WINDOW_EVENT_TYPE_MAXIMIZED, 'WINDOW_EVENT_TYPE_MAXIMIZED')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_RESTORED'] = WindowEventTypes(WINDOW_EVENT_TYPE_RESTORED, 'WINDOW_EVENT_TYPE_RESTORED')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['WINDOW_EVENT_TYPE_ENTER'] = WindowEventTypes(WINDOW_EVENT_TYPE_ENTER, 'WINDOW_EVENT_TYPE_ENTER')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_LEAVE'] = WindowEventTypes(WINDOW_EVENT_TYPE_LEAVE, 'WINDOW_EVENT_TYPE_LEAVE')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_WindowEventTypes); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_18 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(__pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_RESTORED); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_18);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_18);
    __Pyx_INCREF(__pyx_n_s_WINDOW_EVENT_TYPE_RESTORED);
    __Pyx_GIVEREF(__pyx_n_s_WINDOW_EVENT_TYPE_RESTORED);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_WINDOW_EVENT_TYPE_RESTORED);
    __pyx_t_18 = 0;
    __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_1, NULL); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 98, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_WINDOW_EVENT_TYPE_RESTORED, __pyx_t_18) < 0)) __PYX_ERR(1, 98, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

    /* "EnumType":99
 *     __Pyx_globals['WINDOW_EVENT_TYPE_MAXIMIZED'] = WindowEventTypes(WINDOW_EVENT_TYPE_MAXIMIZED, 'WINDOW_EVENT_TYPE_MAXIMIZED')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_RESTORED'] = WindowEventTypes(WINDOW_EVENT_TYPE_RESTORED, 'WINDOW_EVENT_TYPE_RESTORED')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_ENTER'] = WindowEventTypes(WINDOW_EVENT_TYPE_ENTER, 'WINDOW_EVENT_TYPE_ENTER')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['WINDOW_EVENT_TYPE_LEAVE'] = WindowEventTypes(WINDOW_EVENT_TYPE_LEAVE, 'WINDOW_EVENT_TYPE_LEAVE')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_FOCUS_GAINED'] = WindowEventTypes(WINDOW_EVENT_TYPE_FOCUS_GAINED, 'WINDOW_EVENT_TYPE_FOCUS_GAINED')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_WindowEventTypes); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(__pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_ENTER); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_17 = PyTuple_New(2); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_WINDOW_EVENT_TYPE_ENTER);
    __Pyx_GIVEREF(__pyx_n_s_WINDOW_EVENT_TYPE_ENTER);
    PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_n_s_WINDOW_EVENT_TYPE_ENTER);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 99, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_WINDOW_EVENT_TYPE_ENTER, __pyx_t_1) < 0)) __PYX_ERR(1, 99, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":100
 *     __Pyx_globals['WINDOW_EVENT_TYPE_RESTORED'] = WindowEventTypes(WINDOW_EVENT_TYPE_RESTORED, 'WINDOW_EVENT_TYPE_RESTORED')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_ENTER'] = WindowEventTypes(WINDOW_EVENT_TYPE_ENTER, 'WINDOW_EVENT_TYPE_ENTER')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_LEAVE'] = WindowEventTypes(WINDOW_EVENT_TYPE_LEAVE, 'WINDOW_EVENT_TYPE_LEAVE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['WINDOW_EVENT_TYPE_FOCUS_GAINED'] = WindowEventTypes(WINDOW_EVENT_TYPE_FOCUS_GAINED, 'WINDOW_EVENT_TYPE_FOCUS_GAINED')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_FOCUS_LOST'] = WindowEventTypes(WINDOW_EVENT_TYPE_FOCUS_LOST, 'WINDOW_EVENT_TYPE_FOCUS_LOST')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_WindowEventTypes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_17 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(__pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_LEAVE); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_18 = PyTuple_New(2); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_GIVEREF(__pyx_t_17);
    PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_17);
    __Pyx_INCREF(__pyx_n_s_WINDOW_EVENT_TYPE_LEAVE);
    __Pyx_GIVEREF(__pyx_n_s_WINDOW_EVENT_TYPE_LEAVE);
    PyTuple_SET_ITEM(__pyx_t_18, 1, __pyx_n_s_WINDOW_EVENT_TYPE_LEAVE);
    __pyx_t_17 = 0;
    __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_18, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 100, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_WINDOW_EVENT_TYPE_LEAVE, __pyx_t_17) < 0)) __PYX_ERR(1, 100, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

    /* "EnumType":101
 *     __Pyx_globals['WINDOW_EVENT_TYPE_ENTER'] = WindowEventTypes(WINDOW_EVENT_TYPE_ENTER, 'WINDOW_EVENT_TYPE_ENTER')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_LEAVE'] = WindowEventTypes(WINDOW_EVENT_TYPE_LEAVE, 'WINDOW_EVENT_TYPE_LEAVE')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_FOCUS_GAINED'] = WindowEventTypes(WINDOW_EVENT_TYPE_FOCUS_GAINED, 'WINDOW_EVENT_TYPE_FOCUS_GAINED')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['WINDOW_EVENT_TYPE_FOCUS_LOST'] = WindowEventTypes(WINDOW_EVENT_TYPE_FOCUS_LOST, 'WINDOW_EVENT_TYPE_FOCUS_LOST')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_CLOSE'] = WindowEventTypes(WINDOW_EVENT_TYPE_CLOSE, 'WINDOW_EVENT_TYPE_CLOSE')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_WindowEventTypes); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_18 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(__pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_FOCUS_GAINED); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_18);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_18);
    __Pyx_INCREF(__pyx_n_s_WINDOW_EVENT_TYPE_FOCUS_GAINED);
    __Pyx_GIVEREF(__pyx_n_s_WINDOW_EVENT_TYPE_FOCUS_GAINED);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_WINDOW_EVENT_TYPE_FOCUS_GAINED);
    __pyx_t_18 = 0;
    __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_1, NULL); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 101, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_WINDOW_EVENT_TYPE_FOCUS_GAINED, __pyx_t_18) < 0)) __PYX_ERR(1, 101, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

    /* "EnumType":102
 *     __Pyx_globals['WINDOW_EVENT_TYPE_LEAVE'] = WindowEventTypes(WINDOW_EVENT_TYPE_LEAVE, 'WINDOW_EVENT_TYPE_LEAVE')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_FOCUS_GAINED'] = WindowEventTypes(WINDOW_EVENT_TYPE_FOCUS_GAINED, 'WINDOW_EVENT_TYPE_FOCUS_GAINED')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_FOCUS_LOST'] = WindowEventTypes(WINDOW_EVENT_TYPE_FOCUS_LOST, 'WINDOW_EVENT_TYPE_FOCUS_LOST')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['WINDOW_EVENT_TYPE_CLOSE'] = WindowEventTypes(WINDOW_EVENT_TYPE_CLOSE, 'WINDOW_EVENT_TYPE_CLOSE')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_TAKE_FOCUS'] = WindowEventTypes(WINDOW_EVENT_TYPE_TAKE_FOCUS, 'WINDOW_EVENT_TYPE_TAKE_FOCUS')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_WindowEventTypes); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(__pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_FOCUS_LOST); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_17 = PyTuple_New(2); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_WINDOW_EVENT_TYPE_FOCUS_LOST);
    __Pyx_GIVEREF(__pyx_n_s_WINDOW_EVENT_TYPE_FOCUS_LOST);
    PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_n_s_WINDOW_EVENT_TYPE_FOCUS_LOST);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 102, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_WINDOW_EVENT_TYPE_FOCUS_LOST, __pyx_t_1) < 0)) __PYX_ERR(1, 102, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "EnumType":103
 *     __Pyx_globals['WINDOW_EVENT_TYPE_FOCUS_GAINED'] = WindowEventTypes(WINDOW_EVENT_TYPE_FOCUS_GAINED, 'WINDOW_EVENT_TYPE_FOCUS_GAINED')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_FOCUS_LOST'] = WindowEventTypes(WINDOW_EVENT_TYPE_FOCUS_LOST, 'WINDOW_EVENT_TYPE_FOCUS_LOST')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_CLOSE'] = WindowEventTypes(WINDOW_EVENT_TYPE_CLOSE, 'WINDOW_EVENT_TYPE_CLOSE')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['WINDOW_EVENT_TYPE_TAKE_FOCUS'] = WindowEventTypes(WINDOW_EVENT_TYPE_TAKE_FOCUS, 'WINDOW_EVENT_TYPE_TAKE_FOCUS')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_HIT_TEST'] = WindowEventTypes(WINDOW_EVENT_TYPE_HIT_TEST, 'WINDOW_EVENT_TYPE_HIT_TEST')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_WindowEventTypes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_17 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(__pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_CLOSE); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_18 = PyTuple_New(2); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_GIVEREF(__pyx_t_17);
    PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_17);
    __Pyx_INCREF(__pyx_n_s_WINDOW_EVENT_TYPE_CLOSE);
    __Pyx_GIVEREF(__pyx_n_s_WINDOW_EVENT_TYPE_CLOSE);
    PyTuple_SET_ITEM(__pyx_t_18, 1, __pyx_n_s_WINDOW_EVENT_TYPE_CLOSE);
    __pyx_t_17 = 0;
    __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_18, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 103, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_WINDOW_EVENT_TYPE_CLOSE, __pyx_t_17) < 0)) __PYX_ERR(1, 103, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

    /* "EnumType":104
 *     __Pyx_globals['WINDOW_EVENT_TYPE_FOCUS_LOST'] = WindowEventTypes(WINDOW_EVENT_TYPE_FOCUS_LOST, 'WINDOW_EVENT_TYPE_FOCUS_LOST')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_CLOSE'] = WindowEventTypes(WINDOW_EVENT_TYPE_CLOSE, 'WINDOW_EVENT_TYPE_CLOSE')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_TAKE_FOCUS'] = WindowEventTypes(WINDOW_EVENT_TYPE_TAKE_FOCUS, 'WINDOW_EVENT_TYPE_TAKE_FOCUS')             # <<<<<<<<<<<<<<
 *     __Pyx_globals['WINDOW_EVENT_TYPE_HIT_TEST'] = WindowEventTypes(WINDOW_EVENT_TYPE_HIT_TEST, 'WINDOW_EVENT_TYPE_HIT_TEST')
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_WindowEventTypes); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_18 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(__pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_TAKE_FOCUS); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_18);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_18);
    __Pyx_INCREF(__pyx_n_s_WINDOW_EVENT_TYPE_TAKE_FOCUS);
    __Pyx_GIVEREF(__pyx_n_s_WINDOW_EVENT_TYPE_TAKE_FOCUS);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_WINDOW_EVENT_TYPE_TAKE_FOCUS);
    __pyx_t_18 = 0;
    __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_1, NULL); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 104, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_WINDOW_EVENT_TYPE_TAKE_FOCUS, __pyx_t_18) < 0)) __PYX_ERR(1, 104, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

    /* "EnumType":105
 *     __Pyx_globals['WINDOW_EVENT_TYPE_CLOSE'] = WindowEventTypes(WINDOW_EVENT_TYPE_CLOSE, 'WINDOW_EVENT_TYPE_CLOSE')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_TAKE_FOCUS'] = WindowEventTypes(WINDOW_EVENT_TYPE_TAKE_FOCUS, 'WINDOW_EVENT_TYPE_TAKE_FOCUS')
 *     __Pyx_globals['WINDOW_EVENT_TYPE_HIT_TEST'] = WindowEventTypes(WINDOW_EVENT_TYPE_HIT_TEST, 'WINDOW_EVENT_TYPE_HIT_TEST')             # <<<<<<<<<<<<<<
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_WindowEventTypes); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_1 = __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(__pyx_e_7pyorama_5event_WINDOW_EVENT_TYPE_HIT_TEST); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_17 = PyTuple_New(2); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_WINDOW_EVENT_TYPE_HIT_TEST);
    __Pyx_GIVEREF(__pyx_n_s_WINDOW_EVENT_TYPE_HIT_TEST);
    PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_n_s_WINDOW_EVENT_TYPE_HIT_TEST);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    if (unlikely(__Pyx_globals == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 105, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__Pyx_globals, __pyx_n_s_WINDOW_EVENT_TYPE_HIT_TEST, __pyx_t_1) < 0)) __PYX_ERR(1, 105, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L5:;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init pyorama.event", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pyorama.event");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* None */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* Globals */
static PyObject* __Pyx_Globals(void) {
    Py_ssize_t i;
    PyObject *names;
    PyObject *globals = __pyx_d;
    Py_INCREF(globals);
    names = PyObject_Dir(__pyx_m);
    if (!names)
        goto bad;
    for (i = PyList_GET_SIZE(names)-1; i >= 0; i--) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject* name = PySequence_ITEM(names, i);
        if (!name)
            goto bad;
#else
        PyObject* name = PyList_GET_ITEM(names, i);
#endif
        if (!PyDict_Contains(globals, name)) {
            PyObject* value = __Pyx_GetAttr(__pyx_m, name);
            if (!value) {
#if CYTHON_COMPILING_IN_PYPY
                Py_DECREF(name);
#endif
                goto bad;
            }
            if (PyDict_SetItem(globals, name, value) < 0) {
#if CYTHON_COMPILING_IN_PYPY
                Py_DECREF(name);
#endif
                Py_DECREF(value);
                goto bad;
            }
        }
#if CYTHON_COMPILING_IN_PYPY
        Py_DECREF(name);
#endif
    }
    Py_DECREF(names);
    return globals;
bad:
    Py_XDECREF(names);
    Py_XDECREF(globals);
    return NULL;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum____pyx_t_7pyorama_4core_4item_ItemType(enum __pyx_t_7pyorama_4core_4item_ItemType value) {
    const enum __pyx_t_7pyorama_4core_4item_ItemType neg_one = (enum __pyx_t_7pyorama_4core_4item_ItemType) ((enum __pyx_t_7pyorama_4core_4item_ItemType) 0 - (enum __pyx_t_7pyorama_4core_4item_ItemType) 1), const_zero = (enum __pyx_t_7pyorama_4core_4item_ItemType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum __pyx_t_7pyorama_4core_4item_ItemType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum __pyx_t_7pyorama_4core_4item_ItemType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum __pyx_t_7pyorama_4core_4item_ItemType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum __pyx_t_7pyorama_4core_4item_ItemType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum __pyx_t_7pyorama_4core_4item_ItemType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum __pyx_t_7pyorama_4core_4item_ItemType),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_EventTypes(enum __pyx_t_7pyorama_5event_EventTypes value) {
    const enum __pyx_t_7pyorama_5event_EventTypes neg_one = (enum __pyx_t_7pyorama_5event_EventTypes) ((enum __pyx_t_7pyorama_5event_EventTypes) 0 - (enum __pyx_t_7pyorama_5event_EventTypes) 1), const_zero = (enum __pyx_t_7pyorama_5event_EventTypes) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum __pyx_t_7pyorama_5event_EventTypes) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum __pyx_t_7pyorama_5event_EventTypes) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum __pyx_t_7pyorama_5event_EventTypes) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum __pyx_t_7pyorama_5event_EventTypes) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum __pyx_t_7pyorama_5event_EventTypes) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum __pyx_t_7pyorama_5event_EventTypes),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint32_t(uint32_t value) {
    const uint32_t neg_one = (uint32_t) ((uint32_t) 0 - (uint32_t) 1), const_zero = (uint32_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint32_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint32_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint32_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint32_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint32_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint32_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value) {
    const uint64_t neg_one = (uint64_t) ((uint64_t) 0 - (uint64_t) 1), const_zero = (uint64_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint64_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum____pyx_t_7pyorama_5event_WindowEventTypes(enum __pyx_t_7pyorama_5event_WindowEventTypes value) {
    const enum __pyx_t_7pyorama_5event_WindowEventTypes neg_one = (enum __pyx_t_7pyorama_5event_WindowEventTypes) ((enum __pyx_t_7pyorama_5event_WindowEventTypes) 0 - (enum __pyx_t_7pyorama_5event_WindowEventTypes) 1), const_zero = (enum __pyx_t_7pyorama_5event_WindowEventTypes) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum __pyx_t_7pyorama_5event_WindowEventTypes) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum __pyx_t_7pyorama_5event_WindowEventTypes) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum __pyx_t_7pyorama_5event_WindowEventTypes) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum __pyx_t_7pyorama_5event_WindowEventTypes) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum __pyx_t_7pyorama_5event_WindowEventTypes) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum __pyx_t_7pyorama_5event_WindowEventTypes),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int32_t(int32_t value) {
    const int32_t neg_one = (int32_t) ((int32_t) 0 - (int32_t) 1), const_zero = (int32_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int32_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int32_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int32_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int32_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int32_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int32_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint8_t(uint8_t value) {
    const uint8_t neg_one = (uint8_t) ((uint8_t) 0 - (uint8_t) 1), const_zero = (uint8_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint8_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint8_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint8_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint8_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint8_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint8_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_SDL_Scancode(SDL_Scancode value) {
    const SDL_Scancode neg_one = (SDL_Scancode) ((SDL_Scancode) 0 - (SDL_Scancode) 1), const_zero = (SDL_Scancode) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(SDL_Scancode) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(SDL_Scancode) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(SDL_Scancode) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(SDL_Scancode) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(SDL_Scancode) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(SDL_Scancode),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint16_t(uint16_t value) {
    const uint16_t neg_one = (uint16_t) ((uint16_t) 0 - (uint16_t) 1), const_zero = (uint16_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint16_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint16_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint16_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint16_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint16_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint16_t),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE uint32_t __Pyx_PyInt_As_uint32_t(PyObject *x) {
    const uint32_t neg_one = (uint32_t) ((uint32_t) 0 - (uint32_t) 1), const_zero = (uint32_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint32_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint32_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint32_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint32_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint32_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(uint32_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) >= 2 * PyLong_SHIFT) {
                            return (uint32_t) (((((uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint32_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) >= 3 * PyLong_SHIFT) {
                            return (uint32_t) (((((((uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint32_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) >= 4 * PyLong_SHIFT) {
                            return (uint32_t) (((((((((uint32_t)digits[3]) << PyLong_SHIFT) | (uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint32_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint32_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint32_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint32_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(uint32_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(uint32_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(uint32_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint32_t) (((uint32_t)-1)*(((((uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(uint32_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint32_t) ((((((uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(uint32_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint32_t) (((uint32_t)-1)*(((((((uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint32_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint32_t) ((((((((uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(uint32_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint32_t) (((uint32_t)-1)*(((((((((uint32_t)digits[3]) << PyLong_SHIFT) | (uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint32_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint32_t) ((((((((((uint32_t)digits[3]) << PyLong_SHIFT) | (uint32_t)digits[2]) << PyLong_SHIFT) | (uint32_t)digits[1]) << PyLong_SHIFT) | (uint32_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(uint32_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint32_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint32_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint32_t) -1;
        }
    } else {
        uint32_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint32_t) -1;
        val = __Pyx_PyInt_As_uint32_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint32_t");
    return (uint32_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint32_t");
    return (uint32_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *x) {
    const uint64_t neg_one = (uint64_t) ((uint64_t) 0 - (uint64_t) 1), const_zero = (uint64_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint64_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint64_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint64_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(uint64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 2 * PyLong_SHIFT) {
                            return (uint64_t) (((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 3 * PyLong_SHIFT) {
                            return (uint64_t) (((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) >= 4 * PyLong_SHIFT) {
                            return (uint64_t) (((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint64_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint64_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint64_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(uint64_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(uint64_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(uint64_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(uint64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (uint64_t) ((((((uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(uint64_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (uint64_t) ((((((((uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(uint64_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint64_t) (((uint64_t)-1)*(((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (uint64_t) ((((((((((uint64_t)digits[3]) << PyLong_SHIFT) | (uint64_t)digits[2]) << PyLong_SHIFT) | (uint64_t)digits[1]) << PyLong_SHIFT) | (uint64_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(uint64_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint64_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint64_t) -1;
        }
    } else {
        uint64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint64_t) -1;
        val = __Pyx_PyInt_As_uint64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint64_t");
    return (uint64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint64_t");
    return (uint64_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE enum __pyx_t_7pyorama_5event_EventTypes __Pyx_PyInt_As_enum____pyx_t_7pyorama_5event_EventTypes(PyObject *x) {
    const enum __pyx_t_7pyorama_5event_EventTypes neg_one = (enum __pyx_t_7pyorama_5event_EventTypes) ((enum __pyx_t_7pyorama_5event_EventTypes) 0 - (enum __pyx_t_7pyorama_5event_EventTypes) 1), const_zero = (enum __pyx_t_7pyorama_5event_EventTypes) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum __pyx_t_7pyorama_5event_EventTypes) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum __pyx_t_7pyorama_5event_EventTypes, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum __pyx_t_7pyorama_5event_EventTypes) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum __pyx_t_7pyorama_5event_EventTypes) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum __pyx_t_7pyorama_5event_EventTypes, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum __pyx_t_7pyorama_5event_EventTypes) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_7pyorama_5event_EventTypes, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_7pyorama_5event_EventTypes) >= 2 * PyLong_SHIFT) {
                            return (enum __pyx_t_7pyorama_5event_EventTypes) (((((enum __pyx_t_7pyorama_5event_EventTypes)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_7pyorama_5event_EventTypes)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum __pyx_t_7pyorama_5event_EventTypes) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_7pyorama_5event_EventTypes, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_7pyorama_5event_EventTypes) >= 3 * PyLong_SHIFT) {
                            return (enum __pyx_t_7pyorama_5event_EventTypes) (((((((enum __pyx_t_7pyorama_5event_EventTypes)digits[2]) << PyLong_SHIFT) | (enum __pyx_t_7pyorama_5event_EventTypes)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_7pyorama_5event_EventTypes)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum __pyx_t_7pyorama_5event_EventTypes) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_7pyorama_5event_EventTypes, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_7pyorama_5event_EventTypes) >= 4 * PyLong_SHIFT) {
                            return (enum __pyx_t_7pyorama_5event_EventTypes) (((((((((enum __pyx_t_7pyorama_5event_EventTypes)digits[3]) << PyLong_SHIFT) | (enum __pyx_t_7pyorama_5event_EventTypes)digits[2]) << PyLong_SHIFT) | (enum __pyx_t_7pyorama_5event_EventTypes)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_7pyorama_5event_EventTypes)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum __pyx_t_7pyorama_5event_EventTypes) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum __pyx_t_7pyorama_5event_EventTypes) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum __pyx_t_7pyorama_5event_EventTypes, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum __pyx_t_7pyorama_5event_EventTypes) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum __pyx_t_7pyorama_5event_EventTypes, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum __pyx_t_7pyorama_5event_EventTypes) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum __pyx_t_7pyorama_5event_EventTypes, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(enum __pyx_t_7pyorama_5event_EventTypes,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum __pyx_t_7pyorama_5event_EventTypes) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_7pyorama_5event_EventTypes, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_7pyorama_5event_EventTypes) - 1 > 2 * PyLong_SHIFT) {
                            return (enum __pyx_t_7pyorama_5event_EventTypes) (((enum __pyx_t_7pyorama_5event_EventTypes)-1)*(((((enum __pyx_t_7pyorama_5event_EventTypes)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_7pyorama_5event_EventTypes)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum __pyx_t_7pyorama_5event_EventTypes) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_7pyorama_5event_EventTypes, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_7pyorama_5event_EventTypes) - 1 > 2 * PyLong_SHIFT) {
                            return (enum __pyx_t_7pyorama_5event_EventTypes) ((((((enum __pyx_t_7pyorama_5event_EventTypes)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_7pyorama_5event_EventTypes)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum __pyx_t_7pyorama_5event_EventTypes) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_7pyorama_5event_EventTypes, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_7pyorama_5event_EventTypes) - 1 > 3 * PyLong_SHIFT) {
                            return (enum __pyx_t_7pyorama_5event_EventTypes) (((enum __pyx_t_7pyorama_5event_EventTypes)-1)*(((((((enum __pyx_t_7pyorama_5event_EventTypes)digits[2]) << PyLong_SHIFT) | (enum __pyx_t_7pyorama_5event_EventTypes)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_7pyorama_5event_EventTypes)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum __pyx_t_7pyorama_5event_EventTypes) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_7pyorama_5event_EventTypes, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_7pyorama_5event_EventTypes) - 1 > 3 * PyLong_SHIFT) {
                            return (enum __pyx_t_7pyorama_5event_EventTypes) ((((((((enum __pyx_t_7pyorama_5event_EventTypes)digits[2]) << PyLong_SHIFT) | (enum __pyx_t_7pyorama_5event_EventTypes)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_7pyorama_5event_EventTypes)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum __pyx_t_7pyorama_5event_EventTypes) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_7pyorama_5event_EventTypes, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_7pyorama_5event_EventTypes) - 1 > 4 * PyLong_SHIFT) {
                            return (enum __pyx_t_7pyorama_5event_EventTypes) (((enum __pyx_t_7pyorama_5event_EventTypes)-1)*(((((((((enum __pyx_t_7pyorama_5event_EventTypes)digits[3]) << PyLong_SHIFT) | (enum __pyx_t_7pyorama_5event_EventTypes)digits[2]) << PyLong_SHIFT) | (enum __pyx_t_7pyorama_5event_EventTypes)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_7pyorama_5event_EventTypes)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum __pyx_t_7pyorama_5event_EventTypes) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum __pyx_t_7pyorama_5event_EventTypes, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum __pyx_t_7pyorama_5event_EventTypes) - 1 > 4 * PyLong_SHIFT) {
                            return (enum __pyx_t_7pyorama_5event_EventTypes) ((((((((((enum __pyx_t_7pyorama_5event_EventTypes)digits[3]) << PyLong_SHIFT) | (enum __pyx_t_7pyorama_5event_EventTypes)digits[2]) << PyLong_SHIFT) | (enum __pyx_t_7pyorama_5event_EventTypes)digits[1]) << PyLong_SHIFT) | (enum __pyx_t_7pyorama_5event_EventTypes)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum __pyx_t_7pyorama_5event_EventTypes) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum __pyx_t_7pyorama_5event_EventTypes, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum __pyx_t_7pyorama_5event_EventTypes) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum __pyx_t_7pyorama_5event_EventTypes, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum __pyx_t_7pyorama_5event_EventTypes val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum __pyx_t_7pyorama_5event_EventTypes) -1;
        }
    } else {
        enum __pyx_t_7pyorama_5event_EventTypes val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum __pyx_t_7pyorama_5event_EventTypes) -1;
        val = __Pyx_PyInt_As_enum____pyx_t_7pyorama_5event_EventTypes(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum __pyx_t_7pyorama_5event_EventTypes");
    return (enum __pyx_t_7pyorama_5event_EventTypes) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum __pyx_t_7pyorama_5event_EventTypes");
    return (enum __pyx_t_7pyorama_5event_EventTypes) -1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) ((size_t) 0 - (size_t) 1), const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* VoidPtrImport */
#ifndef __PYX_HAVE_RT_ImportVoidPtr
#define __PYX_HAVE_RT_ImportVoidPtr
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, name);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C variable %.200s",
                PyModule_GetName(module), name);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    *p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, desc);
        goto bad;
    }
    *p = PyCObject_AsVoidPtr(cobj);}
#endif
    if (!(*p))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
