/* Generated by Cython 0.29.13 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [],
        "extra_compile_args": [
            "-w",
            "-std=c++11",
            "-O3",
            "-ffast-math",
            "-march=native",
            "-fno-var-tracking-assignments"
        ],
        "extra_link_args": [
            "-std=c++11"
        ],
        "include_dirs": [
            "/home/anish/.local/lib/python3.6/site-packages/numpy/core/include"
        ],
        "language": "c++",
        "libraries": [
            "GL",
            "GLU",
            "GLEW",
            "SDL2",
            "SDL2_image",
            "SDL2_mixer",
            "openal",
            "ogg",
            "vorbis",
            "vorbisfile",
            "vorbisenc",
            "opusfile",
            "FLAC",
            "chipmunk",
            "assimp"
        ],
        "name": "pyorama.math3d.mat3",
        "sources": [
            "./pyorama/math3d/mat3.pyx"
        ]
    },
    "module_name": "pyorama.math3d.mat3"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_13"
#define CYTHON_HEX_VERSION 0x001D0DF0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__pyorama__math3d__mat3
#define __PYX_HAVE_API__pyorama__math3d__mat3
/* Early includes */
#include <string.h>
#include <stdlib.h>
#include <math.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "pyorama/math3d/mat3.pyx",
  "stringsource",
  "pyorama/math3d/mat4.pxd",
  "pyorama/math3d/quat.pxd",
  "pyorama/math3d/vec3.pxd",
  "pyorama/math3d/mat2.pxd",
  "pyorama/math3d/vec2.pxd",
};
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()


/*--- Type declarations ---*/
struct __pyx_obj_7pyorama_6math3d_4mat4_Mat4;
struct __pyx_obj_7pyorama_6math3d_4quat_Quat;
struct __pyx_obj_7pyorama_6math3d_4vec3_Vec3;
struct __pyx_obj_7pyorama_6math3d_4mat2_Mat2;
struct __pyx_obj_7pyorama_6math3d_4vec2_Vec2;
struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3;

/* "pyorama/math3d/common.pxd":6
 * cimport libc.math as c_math
 * 
 * ctypedef float[2] Vec2C             # <<<<<<<<<<<<<<
 * ctypedef float[3] Vec3C
 * ctypedef float[4] Vec4C
 */
typedef float __pyx_t_7pyorama_6math3d_6common_Vec2C[2];

/* "pyorama/math3d/common.pxd":7
 * 
 * ctypedef float[2] Vec2C
 * ctypedef float[3] Vec3C             # <<<<<<<<<<<<<<
 * ctypedef float[4] Vec4C
 * ctypedef float[4] QuatC
 */
typedef float __pyx_t_7pyorama_6math3d_6common_Vec3C[3];

/* "pyorama/math3d/common.pxd":8
 * ctypedef float[2] Vec2C
 * ctypedef float[3] Vec3C
 * ctypedef float[4] Vec4C             # <<<<<<<<<<<<<<
 * ctypedef float[4] QuatC
 * ctypedef float[4] Mat2C
 */
typedef float __pyx_t_7pyorama_6math3d_6common_Vec4C[4];

/* "pyorama/math3d/common.pxd":9
 * ctypedef float[3] Vec3C
 * ctypedef float[4] Vec4C
 * ctypedef float[4] QuatC             # <<<<<<<<<<<<<<
 * ctypedef float[4] Mat2C
 * ctypedef float[9] Mat3C
 */
typedef float __pyx_t_7pyorama_6math3d_6common_QuatC[4];

/* "pyorama/math3d/common.pxd":10
 * ctypedef float[4] Vec4C
 * ctypedef float[4] QuatC
 * ctypedef float[4] Mat2C             # <<<<<<<<<<<<<<
 * ctypedef float[9] Mat3C
 * ctypedef float[16] Mat4C
 */
typedef float __pyx_t_7pyorama_6math3d_6common_Mat2C[4];

/* "pyorama/math3d/common.pxd":11
 * ctypedef float[4] QuatC
 * ctypedef float[4] Mat2C
 * ctypedef float[9] Mat3C             # <<<<<<<<<<<<<<
 * ctypedef float[16] Mat4C
 * 
 */
typedef float __pyx_t_7pyorama_6math3d_6common_Mat3C[9];

/* "pyorama/math3d/common.pxd":12
 * ctypedef float[4] Mat2C
 * ctypedef float[9] Mat3C
 * ctypedef float[16] Mat4C             # <<<<<<<<<<<<<<
 * 
 * cdef float epsilon = 0.000001
 */
typedef float __pyx_t_7pyorama_6math3d_6common_Mat4C[16];
struct __pyx_opt_args_7pyorama_6math3d_4mat4_4Mat4_c_nearly_equals;
struct __pyx_opt_args_7pyorama_6math3d_4mat4_4Mat4_c_scale_add;
struct __pyx_opt_args_7pyorama_6math3d_4mat4_4Mat4_c_set_data;

/* "pyorama/math3d/mat4.pxd":44
 *     cdef inline void c_mul(Mat4C *out, Mat4C *a, Mat4C *b) nogil
 *     @staticmethod
 *     cdef inline bint c_nearly_equals(Mat4C *a, Mat4C *b, float epsilon=epsilon) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void c_ortho(Mat4C *out, float left, float right, float bottom, float top, float near, float far) nogil
 */
struct __pyx_opt_args_7pyorama_6math3d_4mat4_4Mat4_c_nearly_equals {
  int __pyx_n;
  float epsilon;
};

/* "pyorama/math3d/mat4.pxd":62
 *     cdef inline void c_scale(Mat4C *out, Mat4C *a, Vec3C *factor) nogil
 *     @staticmethod
 *     cdef inline void c_scale_add(Mat4C *out, Mat4C *a, float scale=1.0, float add=0.0) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void c_set_data(Mat4C *out, float m00=0.0, float m01=0.0, float m02=0.0, float m03=0.0,
 */
struct __pyx_opt_args_7pyorama_6math3d_4mat4_4Mat4_c_scale_add {
  int __pyx_n;
  float scale;
  float add;
};

/* "pyorama/math3d/mat4.pxd":64
 *     cdef inline void c_scale_add(Mat4C *out, Mat4C *a, float scale=1.0, float add=0.0) nogil
 *     @staticmethod
 *     cdef inline void c_set_data(Mat4C *out, float m00=0.0, float m01=0.0, float m02=0.0, float m03=0.0,             # <<<<<<<<<<<<<<
 *             float m10=0.0, float m11=0.0, float m12=0.0, float m13=0.0,
 *             float m20=0.0, float m21=0.0, float m22=0.0, float m23=0.0,
 */
struct __pyx_opt_args_7pyorama_6math3d_4mat4_4Mat4_c_set_data {
  int __pyx_n;
  float m00;
  float m01;
  float m02;
  float m03;
  float m10;
  float m11;
  float m12;
  float m13;
  float m20;
  float m21;
  float m22;
  float m23;
  float m30;
  float m31;
  float m32;
  float m33;
};
struct __pyx_opt_args_7pyorama_6math3d_4quat_4Quat_c_nearly_equals;
struct __pyx_opt_args_7pyorama_6math3d_4quat_4Quat_c_scale_add;
struct __pyx_opt_args_7pyorama_6math3d_4quat_4Quat_c_set_data;

/* "pyorama/math3d/quat.pxd":36
 *     cdef inline void c_mul(QuatC *out, QuatC *a, QuatC *b) nogil
 *     @staticmethod
 *     cdef inline bint c_nearly_equals(QuatC *a, QuatC *b, float epsilon=0.000001) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void c_norm(QuatC *out, QuatC *a) nogil
 */
struct __pyx_opt_args_7pyorama_6math3d_4quat_4Quat_c_nearly_equals {
  int __pyx_n;
  float epsilon;
};

/* "pyorama/math3d/quat.pxd":48
 *     cdef inline void c_rotation_to(QuatC *out, Vec3C *a, Vec3C *b) nogil
 *     @staticmethod
 *     cdef inline void c_scale_add(QuatC *out, QuatC *a, float scale=1.0, float add=0.0) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void c_set_axes(QuatC *out, Vec3C *view, Vec3C *right, Vec3C *up) nogil
 */
struct __pyx_opt_args_7pyorama_6math3d_4quat_4Quat_c_scale_add {
  int __pyx_n;
  float scale;
  float add;
};

/* "pyorama/math3d/quat.pxd":54
 *     cdef inline void c_set_axis_angle(QuatC *out, Vec3C *axis, float radians) nogil
 *     @staticmethod
 *     cdef inline void c_set_data(QuatC *out, float x=0.0, float y=0.0, float z=0.0, float w=0.0) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void c_slerp(QuatC *out, QuatC *a, QuatC *b, float t) nogil
 */
struct __pyx_opt_args_7pyorama_6math3d_4quat_4Quat_c_set_data {
  int __pyx_n;
  float x;
  float y;
  float z;
  float w;
};
struct __pyx_opt_args_7pyorama_6math3d_4vec3_4Vec3_c_nearly_equals;
struct __pyx_opt_args_7pyorama_6math3d_4vec3_4Vec3_c_scale_add;
struct __pyx_opt_args_7pyorama_6math3d_4vec3_4Vec3_c_set_data;

/* "pyorama/math3d/vec3.pxd":42
 *     cdef inline void c_mul(Vec3C *out, Vec3C *a, Vec3C *b) nogil
 *     @staticmethod
 *     cdef inline bint c_nearly_equals(Vec3C *a, Vec3C *b, float epsilon=epsilon) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void c_negate(Vec3C *out, Vec3C *a) nogil
 */
struct __pyx_opt_args_7pyorama_6math3d_4vec3_4Vec3_c_nearly_equals {
  int __pyx_n;
  float epsilon;
};

/* "pyorama/math3d/vec3.pxd":52
 *     cdef inline void c_round(Vec3C *out, Vec3C *a) nogil
 *     @staticmethod
 *     cdef inline void c_scale_add(Vec3C *out, Vec3C *a, float scale=1.0, float add=0.0) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void c_set_data(Vec3C *out, float x=0.0, float y=0.0, float z=0.0) nogil
 */
struct __pyx_opt_args_7pyorama_6math3d_4vec3_4Vec3_c_scale_add {
  int __pyx_n;
  float scale;
  float add;
};

/* "pyorama/math3d/vec3.pxd":54
 *     cdef inline void c_scale_add(Vec3C *out, Vec3C *a, float scale=1.0, float add=0.0) nogil
 *     @staticmethod
 *     cdef inline void c_set_data(Vec3C *out, float x=0.0, float y=0.0, float z=0.0) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline float c_sqr_dist(Vec3C *a, Vec3C *b) nogil
 */
struct __pyx_opt_args_7pyorama_6math3d_4vec3_4Vec3_c_set_data {
  int __pyx_n;
  float x;
  float y;
  float z;
};
struct __pyx_opt_args_7pyorama_6math3d_4mat2_4Mat2_c_nearly_equals;
struct __pyx_opt_args_7pyorama_6math3d_4mat2_4Mat2_c_scale_add;
struct __pyx_opt_args_7pyorama_6math3d_4mat2_4Mat2_c_set_data;

/* "pyorama/math3d/mat2.pxd":31
 *     cdef inline void c_mul(Mat2C *out, Mat2C *a, Mat2C *b) nogil
 *     @staticmethod
 *     cdef inline bint c_nearly_equals(Mat2C *a, Mat2C *b, float epsilon=epsilon) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void c_random(Mat2C *out) nogil
 */
struct __pyx_opt_args_7pyorama_6math3d_4mat2_4Mat2_c_nearly_equals {
  int __pyx_n;
  float epsilon;
};

/* "pyorama/math3d/mat2.pxd":39
 *     cdef inline void c_scale(Mat2C *out, Mat2C *a, Vec3C *factor) nogil
 *     @staticmethod
 *     cdef inline void c_scale_add(Mat2C *out, Mat2C *a, float scale=1.0, float add=0.0) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void c_set_data(Mat2C *out, float m00=0.0, float m01=0.0, float m10=0.0, float m11=0.0) nogil
 */
struct __pyx_opt_args_7pyorama_6math3d_4mat2_4Mat2_c_scale_add {
  int __pyx_n;
  float scale;
  float add;
};

/* "pyorama/math3d/mat2.pxd":41
 *     cdef inline void c_scale_add(Mat2C *out, Mat2C *a, float scale=1.0, float add=0.0) nogil
 *     @staticmethod
 *     cdef inline void c_set_data(Mat2C *out, float m00=0.0, float m01=0.0, float m10=0.0, float m11=0.0) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void c_sub(Mat2C *out, Mat2C *a, Mat2C *b) nogil
 */
struct __pyx_opt_args_7pyorama_6math3d_4mat2_4Mat2_c_set_data {
  int __pyx_n;
  float m00;
  float m01;
  float m10;
  float m11;
};
struct __pyx_opt_args_7pyorama_6math3d_4vec2_4Vec2_c_nearly_equals;
struct __pyx_opt_args_7pyorama_6math3d_4vec2_4Vec2_c_scale_add;
struct __pyx_opt_args_7pyorama_6math3d_4vec2_4Vec2_c_set_data;

/* "pyorama/math3d/vec2.pxd":41
 *     cdef inline void c_mul(Vec2C *out, Vec2C *a, Vec2C *b) nogil
 *     @staticmethod
 *     cdef inline bint c_nearly_equals(Vec2C *a, Vec2C *b, float epsilon=epsilon) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void c_negate(Vec2C *out, Vec2C *a) nogil
 */
struct __pyx_opt_args_7pyorama_6math3d_4vec2_4Vec2_c_nearly_equals {
  int __pyx_n;
  float epsilon;
};

/* "pyorama/math3d/vec2.pxd":51
 *     cdef inline void c_round(Vec2C *out, Vec2C *a) nogil
 *     @staticmethod
 *     cdef inline void c_scale_add(Vec2C *out, Vec2C *a, float scale=1.0, float add=0.0) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void c_set_data(Vec2C *out, float x=0.0, float y=0.0) nogil
 */
struct __pyx_opt_args_7pyorama_6math3d_4vec2_4Vec2_c_scale_add {
  int __pyx_n;
  float scale;
  float add;
};

/* "pyorama/math3d/vec2.pxd":53
 *     cdef inline void c_scale_add(Vec2C *out, Vec2C *a, float scale=1.0, float add=0.0) nogil
 *     @staticmethod
 *     cdef inline void c_set_data(Vec2C *out, float x=0.0, float y=0.0) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline float c_sqr_dist(Vec2C *a, Vec2C *b) nogil
 */
struct __pyx_opt_args_7pyorama_6math3d_4vec2_4Vec2_c_set_data {
  int __pyx_n;
  float x;
  float y;
};
struct __pyx_opt_args_7pyorama_6math3d_4mat3_4Mat3_c_nearly_equals;
struct __pyx_opt_args_7pyorama_6math3d_4mat3_4Mat3_c_scale_add;
struct __pyx_opt_args_7pyorama_6math3d_4mat3_4Mat3_c_set_data;

/* "pyorama/math3d/mat3.pxd":43
 *     cdef inline void c_mul(Mat3C *out, Mat3C *a, Mat3C *b) nogil
 *     @staticmethod
 *     cdef inline bint c_nearly_equals(Mat3C *a, Mat3C *b, float epsilon=epsilon) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void c_normal_from_mat4(Mat3C *out, Mat4C *a) nogil
 */
struct __pyx_opt_args_7pyorama_6math3d_4mat3_4Mat3_c_nearly_equals {
  int __pyx_n;
  float epsilon;
};

/* "pyorama/math3d/mat3.pxd":53
 *     cdef inline void c_scale(Mat3C *out, Mat3C *a, Vec2C *factor) nogil
 *     @staticmethod
 *     cdef inline void c_scale_add(Mat3C *out, Mat3C *a, float scale=1.0, float add=0.0) nogil             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef inline void c_set_data(Mat3C *out, float m00=0.0, float m01=0.0, float m02=0.0,
 */
struct __pyx_opt_args_7pyorama_6math3d_4mat3_4Mat3_c_scale_add {
  int __pyx_n;
  float scale;
  float add;
};

/* "pyorama/math3d/mat3.pxd":55
 *     cdef inline void c_scale_add(Mat3C *out, Mat3C *a, float scale=1.0, float add=0.0) nogil
 *     @staticmethod
 *     cdef inline void c_set_data(Mat3C *out, float m00=0.0, float m01=0.0, float m02=0.0,             # <<<<<<<<<<<<<<
 *             float m10=0.0, float m11=0.0, float m12=0.0,
 *             float m20=0.0, float m21=0.0, float m22=0.0) nogil
 */
struct __pyx_opt_args_7pyorama_6math3d_4mat3_4Mat3_c_set_data {
  int __pyx_n;
  float m00;
  float m01;
  float m02;
  float m10;
  float m11;
  float m12;
  float m20;
  float m21;
  float m22;
};

/* "pyorama/math3d/mat4.pxd":4
 * from pyorama.math3d.vec3 cimport *
 * 
 * cdef class Mat4:             # <<<<<<<<<<<<<<
 *     cdef Mat4C *ptr
 * 
 */
struct __pyx_obj_7pyorama_6math3d_4mat4_Mat4 {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pyorama_6math3d_4mat4_Mat4 *__pyx_vtab;
  __pyx_t_7pyorama_6math3d_6common_Mat4C *ptr;
};


/* "pyorama/math3d/quat.pxd":4
 * from pyorama.math3d.vec3 cimport *
 * 
 * cdef class Quat:             # <<<<<<<<<<<<<<
 *     cdef QuatC *ptr
 * 
 */
struct __pyx_obj_7pyorama_6math3d_4quat_Quat {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pyorama_6math3d_4quat_Quat *__pyx_vtab;
  __pyx_t_7pyorama_6math3d_6common_QuatC *ptr;
};


/* "pyorama/math3d/vec3.pxd":6
 * from pyorama.math3d.quat cimport *
 * 
 * cdef class Vec3:             # <<<<<<<<<<<<<<
 *     cdef Vec3C *ptr
 * 
 */
struct __pyx_obj_7pyorama_6math3d_4vec3_Vec3 {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pyorama_6math3d_4vec3_Vec3 *__pyx_vtab;
  __pyx_t_7pyorama_6math3d_6common_Vec3C *ptr;
};


/* "pyorama/math3d/mat2.pxd":5
 * from pyorama.math3d.mat2 cimport *
 * 
 * cdef class Mat2:             # <<<<<<<<<<<<<<
 *     cdef Mat2C *ptr
 * 
 */
struct __pyx_obj_7pyorama_6math3d_4mat2_Mat2 {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pyorama_6math3d_4mat2_Mat2 *__pyx_vtab;
  __pyx_t_7pyorama_6math3d_6common_Mat2C *ptr;
};


/* "pyorama/math3d/vec2.pxd":7
 * from pyorama.math3d.mat4 cimport *
 * 
 * cdef class Vec2:             # <<<<<<<<<<<<<<
 *     cdef Vec2C *ptr
 * 
 */
struct __pyx_obj_7pyorama_6math3d_4vec2_Vec2 {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pyorama_6math3d_4vec2_Vec2 *__pyx_vtab;
  __pyx_t_7pyorama_6math3d_6common_Vec2C *ptr;
};


/* "pyorama/math3d/mat3.pxd":5
 * from pyorama.math3d.mat4 cimport *
 * 
 * cdef class Mat3:             # <<<<<<<<<<<<<<
 *     cdef Mat3C *ptr
 * 
 */
struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 {
  PyObject_HEAD
  struct __pyx_vtabstruct_7pyorama_6math3d_4mat3_Mat3 *__pyx_vtab;
  __pyx_t_7pyorama_6math3d_6common_Mat3C *ptr;
};



/* "pyorama/math3d/mat4.pxd":4
 * from pyorama.math3d.vec3 cimport *
 * 
 * cdef class Mat4:             # <<<<<<<<<<<<<<
 *     cdef Mat4C *ptr
 * 
 */

struct __pyx_vtabstruct_7pyorama_6math3d_4mat4_Mat4 {
  void (*c_add)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *);
  void (*c_copy)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *);
  float (*c_det)(__pyx_t_7pyorama_6math3d_6common_Mat4C *);
  void (*c_div)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *);
  void (*c_dot)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *);
  int (*c_equals)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *);
  void (*c_from_quat)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_QuatC *);
  void (*c_from_rotation)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, float, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_from_rotation_x)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, float);
  void (*c_from_rotation_y)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, float);
  void (*c_from_rotation_z)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, float);
  void (*c_from_scaling)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_from_translation)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_frustum)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, float, float, float, float, float, float);
  void (*c_identity)(__pyx_t_7pyorama_6math3d_6common_Mat4C *);
  void (*c_inv)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *);
  void (*c_look_at)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_mul)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *);
  int (*c_nearly_equals)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *, struct __pyx_opt_args_7pyorama_6math3d_4mat4_4Mat4_c_nearly_equals *__pyx_optional_args);
  void (*c_ortho)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, float, float, float, float, float, float);
  void (*c_perspective)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, float, float, float, float);
  void (*c_random)(__pyx_t_7pyorama_6math3d_6common_Mat4C *);
  void (*c_rotate)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *, float, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_rotate_x)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *, float);
  void (*c_rotate_y)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *, float);
  void (*c_rotate_z)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *, float);
  void (*c_scale)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_scale_add)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *, struct __pyx_opt_args_7pyorama_6math3d_4mat4_4Mat4_c_scale_add *__pyx_optional_args);
  void (*c_set_data)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, struct __pyx_opt_args_7pyorama_6math3d_4mat4_4Mat4_c_set_data *__pyx_optional_args);
  void (*c_sub)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *);
  void (*c_translate)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_transpose)(__pyx_t_7pyorama_6math3d_6common_Mat4C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *);
};
static struct __pyx_vtabstruct_7pyorama_6math3d_4mat4_Mat4 *__pyx_vtabptr_7pyorama_6math3d_4mat4_Mat4;


/* "pyorama/math3d/quat.pxd":4
 * from pyorama.math3d.vec3 cimport *
 * 
 * cdef class Quat:             # <<<<<<<<<<<<<<
 *     cdef QuatC *ptr
 * 
 */

struct __pyx_vtabstruct_7pyorama_6math3d_4quat_Quat {
  void (*c_add)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *);
  void (*c_calculate_w)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *);
  void (*c_conjugate)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *);
  void (*c_copy)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *);
  float (*c_dot)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *);
  int (*c_equals)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *);
  void (*c_from_euler)(__pyx_t_7pyorama_6math3d_6common_QuatC *, float, float, float);
  void (*c_from_mat3)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_Mat3C *);
  float (*c_get_axis_angle)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_QuatC *);
  void (*c_identity)(__pyx_t_7pyorama_6math3d_6common_QuatC *);
  void (*c_inv)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *);
  float (*c_length)(__pyx_t_7pyorama_6math3d_6common_QuatC *);
  void (*c_lerp)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *, float);
  void (*c_mul)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *);
  int (*c_nearly_equals)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *, struct __pyx_opt_args_7pyorama_6math3d_4quat_4Quat_c_nearly_equals *__pyx_optional_args);
  void (*c_norm)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *);
  void (*c_rotate_x)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *, float);
  void (*c_rotate_y)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *, float);
  void (*c_rotate_z)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *, float);
  void (*c_rotation_to)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_scale_add)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *, struct __pyx_opt_args_7pyorama_6math3d_4quat_4Quat_c_scale_add *__pyx_optional_args);
  void (*c_set_axes)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_set_axis_angle)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, float);
  void (*c_set_data)(__pyx_t_7pyorama_6math3d_6common_QuatC *, struct __pyx_opt_args_7pyorama_6math3d_4quat_4Quat_c_set_data *__pyx_optional_args);
  void (*c_slerp)(__pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *, __pyx_t_7pyorama_6math3d_6common_QuatC *, float);
  float (*c_sqr_length)(__pyx_t_7pyorama_6math3d_6common_QuatC *);
};
static struct __pyx_vtabstruct_7pyorama_6math3d_4quat_Quat *__pyx_vtabptr_7pyorama_6math3d_4quat_Quat;


/* "pyorama/math3d/vec3.pxd":6
 * from pyorama.math3d.quat cimport *
 * 
 * cdef class Vec3:             # <<<<<<<<<<<<<<
 *     cdef Vec3C *ptr
 * 
 */

struct __pyx_vtabstruct_7pyorama_6math3d_4vec3_Vec3 {
  void (*c_add)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  float (*c_angle)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_ceil)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_copy)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_cross)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  float (*c_dist)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_div)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  float (*c_dot)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  int (*c_equals)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_floor)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_inv)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  float (*c_length)(__pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_lerp)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, float);
  void (*c_max_comps)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_min_comps)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_mul)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  int (*c_nearly_equals)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, struct __pyx_opt_args_7pyorama_6math3d_4vec3_4Vec3_c_nearly_equals *__pyx_optional_args);
  void (*c_negate)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_norm)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_random)(__pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_round)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_scale_add)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, struct __pyx_opt_args_7pyorama_6math3d_4vec3_4Vec3_c_scale_add *__pyx_optional_args);
  void (*c_set_data)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, struct __pyx_opt_args_7pyorama_6math3d_4vec3_4Vec3_c_set_data *__pyx_optional_args);
  float (*c_sqr_dist)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  float (*c_sqr_length)(__pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_sub)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_transform_mat3)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *);
  void (*c_transform_mat4)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *);
  void (*c_transform_quat)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_QuatC *);
};
static struct __pyx_vtabstruct_7pyorama_6math3d_4vec3_Vec3 *__pyx_vtabptr_7pyorama_6math3d_4vec3_Vec3;


/* "pyorama/math3d/mat2.pxd":5
 * from pyorama.math3d.mat2 cimport *
 * 
 * cdef class Mat2:             # <<<<<<<<<<<<<<
 *     cdef Mat2C *ptr
 * 
 */

struct __pyx_vtabstruct_7pyorama_6math3d_4mat2_Mat2 {
  void (*c_add)(__pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *);
  void (*c_copy)(__pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *);
  float (*c_det)(__pyx_t_7pyorama_6math3d_6common_Mat2C *);
  void (*c_div)(__pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *);
  void (*c_dot)(__pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *);
  int (*c_equals)(__pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *);
  void (*c_from_rotation)(__pyx_t_7pyorama_6math3d_6common_Mat2C *, float);
  void (*c_from_scaling)(__pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_identity)(__pyx_t_7pyorama_6math3d_6common_Mat2C *);
  void (*c_inv)(__pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *);
  void (*c_mul)(__pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *);
  int (*c_nearly_equals)(__pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *, struct __pyx_opt_args_7pyorama_6math3d_4mat2_4Mat2_c_nearly_equals *__pyx_optional_args);
  void (*c_random)(__pyx_t_7pyorama_6math3d_6common_Mat2C *);
  void (*c_rotate)(__pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *, float);
  void (*c_scale)(__pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Vec3C *);
  void (*c_scale_add)(__pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *, struct __pyx_opt_args_7pyorama_6math3d_4mat2_4Mat2_c_scale_add *__pyx_optional_args);
  void (*c_set_data)(__pyx_t_7pyorama_6math3d_6common_Mat2C *, struct __pyx_opt_args_7pyorama_6math3d_4mat2_4Mat2_c_set_data *__pyx_optional_args);
  void (*c_sub)(__pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *);
  void (*c_transpose)(__pyx_t_7pyorama_6math3d_6common_Mat2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *);
};
static struct __pyx_vtabstruct_7pyorama_6math3d_4mat2_Mat2 *__pyx_vtabptr_7pyorama_6math3d_4mat2_Mat2;


/* "pyorama/math3d/vec2.pxd":7
 * from pyorama.math3d.mat4 cimport *
 * 
 * cdef class Vec2:             # <<<<<<<<<<<<<<
 *     cdef Vec2C *ptr
 * 
 */

struct __pyx_vtabstruct_7pyorama_6math3d_4vec2_Vec2 {
  void (*c_add)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_ceil)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_copy)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_cross)(__pyx_t_7pyorama_6math3d_6common_Vec3C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  float (*c_dist)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_div)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  float (*c_dot)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  int (*c_equals)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_floor)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_inv)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  float (*c_length)(__pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_lerp)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *, float);
  void (*c_max_comps)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_min_comps)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_mul)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  int (*c_nearly_equals)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *, struct __pyx_opt_args_7pyorama_6math3d_4vec2_4Vec2_c_nearly_equals *__pyx_optional_args);
  void (*c_negate)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_norm)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_random)(__pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_round)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_scale_add)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *, struct __pyx_opt_args_7pyorama_6math3d_4vec2_4Vec2_c_scale_add *__pyx_optional_args);
  void (*c_set_data)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, struct __pyx_opt_args_7pyorama_6math3d_4vec2_4Vec2_c_set_data *__pyx_optional_args);
  float (*c_sqr_dist)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  float (*c_sqr_length)(__pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_sub)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_transform_mat2)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Mat2C *);
  void (*c_transform_mat3)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *);
  void (*c_transform_mat4)(__pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *);
};
static struct __pyx_vtabstruct_7pyorama_6math3d_4vec2_Vec2 *__pyx_vtabptr_7pyorama_6math3d_4vec2_Vec2;


/* "pyorama/math3d/mat3.pyx":1
 * cdef class Mat3:             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */

struct __pyx_vtabstruct_7pyorama_6math3d_4mat3_Mat3 {
  void (*c_add)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *);
  void (*c_copy)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *);
  float (*c_det)(__pyx_t_7pyorama_6math3d_6common_Mat3C *);
  void (*c_div)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *);
  void (*c_dot)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *);
  int (*c_equals)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *);
  void (*c_from_mat4)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *);
  void (*c_from_quat)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_QuatC *);
  void (*c_from_rotation)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, float);
  void (*c_from_scaling)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_from_skewing)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_from_skewing_x)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, float);
  void (*c_from_skewing_y)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, float);
  void (*c_from_translation)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_identity)(__pyx_t_7pyorama_6math3d_6common_Mat3C *);
  void (*c_inv)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *);
  void (*c_mul)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *);
  int (*c_nearly_equals)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, struct __pyx_opt_args_7pyorama_6math3d_4mat3_4Mat3_c_nearly_equals *__pyx_optional_args);
  void (*c_normal_from_mat4)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *);
  void (*c_random)(__pyx_t_7pyorama_6math3d_6common_Mat3C *);
  void (*c_rotate)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, float);
  void (*c_scale)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_scale_add)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, struct __pyx_opt_args_7pyorama_6math3d_4mat3_4Mat3_c_scale_add *__pyx_optional_args);
  void (*c_set_data)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, struct __pyx_opt_args_7pyorama_6math3d_4mat3_4Mat3_c_set_data *__pyx_optional_args);
  void (*c_skew)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
  void (*c_skew_x)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, float);
  void (*c_skew_y)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, float);
  void (*c_sub)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *);
  void (*c_transpose)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *);
  void (*c_translate)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
};
static struct __pyx_vtabstruct_7pyorama_6math3d_4mat3_Mat3 *__pyx_vtabptr_7pyorama_6math3d_4mat3_Mat3;
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_add(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *);
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_copy(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *);
static CYTHON_INLINE float __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_det(__pyx_t_7pyorama_6math3d_6common_Mat3C *);
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_div(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *);
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_dot(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *);
static CYTHON_INLINE int __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_equals(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *);
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_mat4(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *);
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_quat(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_QuatC *);
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_rotation(__pyx_t_7pyorama_6math3d_6common_Mat3C *, float);
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_scaling(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_skewing(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_skewing_x(__pyx_t_7pyorama_6math3d_6common_Mat3C *, float);
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_skewing_y(__pyx_t_7pyorama_6math3d_6common_Mat3C *, float);
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_translation(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_identity(__pyx_t_7pyorama_6math3d_6common_Mat3C *);
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_inv(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *);
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_mul(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *);
static CYTHON_INLINE int __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_nearly_equals(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, struct __pyx_opt_args_7pyorama_6math3d_4mat3_4Mat3_c_nearly_equals *__pyx_optional_args);
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_normal_from_mat4(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *);
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_random(__pyx_t_7pyorama_6math3d_6common_Mat3C *);
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_rotate(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, float);
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_scale(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_scale_add(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, struct __pyx_opt_args_7pyorama_6math3d_4mat3_4Mat3_c_scale_add *__pyx_optional_args);
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_set_data(__pyx_t_7pyorama_6math3d_6common_Mat3C *, struct __pyx_opt_args_7pyorama_6math3d_4mat3_4Mat3_c_set_data *__pyx_optional_args);
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_skew(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_skew_x(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, float);
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_skew_y(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, float);
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_sub(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *);
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_transpose(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *);
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_translate(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *);

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* VoidPtrImport.proto */
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_add(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_b); /* proto*/
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_copy(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a); /* proto*/
static CYTHON_INLINE float __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_det(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a); /* proto*/
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_div(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_b); /* proto*/
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_dot(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_b); /* proto*/
static CYTHON_INLINE int __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_equals(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_b); /* proto*/
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_mat4(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat4C *__pyx_v_a); /* proto*/
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_quat(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_QuatC *__pyx_v_a); /* proto*/
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_rotation(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, float __pyx_v_radians); /* proto*/
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_scaling(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Vec2C *__pyx_v_scale); /* proto*/
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_skewing(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Vec2C *__pyx_v_factor); /* proto*/
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_skewing_x(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, float __pyx_v_radians); /* proto*/
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_skewing_y(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, float __pyx_v_radians); /* proto*/
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_translation(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Vec2C *__pyx_v_shift); /* proto*/
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_identity(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out); /* proto*/
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_inv(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a); /* proto*/
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_mul(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_b); /* proto*/
static CYTHON_INLINE int __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_nearly_equals(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_b, struct __pyx_opt_args_7pyorama_6math3d_4mat3_4Mat3_c_nearly_equals *__pyx_optional_args); /* proto*/
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_normal_from_mat4(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat4C *__pyx_v_a); /* proto*/
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_random(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out); /* proto*/
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_rotate(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a, float __pyx_v_radians); /* proto*/
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_scale(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a, __pyx_t_7pyorama_6math3d_6common_Vec2C *__pyx_v_factor); /* proto*/
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_scale_add(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a, struct __pyx_opt_args_7pyorama_6math3d_4mat3_4Mat3_c_scale_add *__pyx_optional_args); /* proto*/
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_set_data(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, struct __pyx_opt_args_7pyorama_6math3d_4mat3_4Mat3_c_set_data *__pyx_optional_args); /* proto*/
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_skew(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a, __pyx_t_7pyorama_6math3d_6common_Vec2C *__pyx_v_factor); /* proto*/
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_skew_x(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a, float __pyx_v_radians); /* proto*/
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_skew_y(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a, float __pyx_v_radians); /* proto*/
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_sub(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_b); /* proto*/
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_transpose(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a); /* proto*/
static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_translate(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a, __pyx_t_7pyorama_6math3d_6common_Vec2C *__pyx_v_shift); /* proto*/

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'libc.math' */

/* Module declarations from 'pyorama.math3d.common' */
static float *__pyx_vp_7pyorama_6math3d_6common_epsilon = 0;
#define __pyx_v_7pyorama_6math3d_6common_epsilon (*__pyx_vp_7pyorama_6math3d_6common_epsilon)

/* Module declarations from 'pyorama.math3d.mat4' */
static PyTypeObject *__pyx_ptype_7pyorama_6math3d_4mat4_Mat4 = 0;

/* Module declarations from 'pyorama.math3d.quat' */
static PyTypeObject *__pyx_ptype_7pyorama_6math3d_4quat_Quat = 0;

/* Module declarations from 'pyorama.math3d.vec3' */
static PyTypeObject *__pyx_ptype_7pyorama_6math3d_4vec3_Vec3 = 0;

/* Module declarations from 'pyorama.math3d.mat2' */
static PyTypeObject *__pyx_ptype_7pyorama_6math3d_4mat2_Mat2 = 0;

/* Module declarations from 'pyorama.math3d.vec2' */
static PyTypeObject *__pyx_ptype_7pyorama_6math3d_4vec2_Vec2 = 0;

/* Module declarations from 'pyorama.math3d.mat3' */
static PyTypeObject *__pyx_ptype_7pyorama_6math3d_4mat3_Mat3 = 0;
static CYTHON_INLINE PyObject *__Pyx_carray_to_py_float(float *, Py_ssize_t); /*proto*/
static CYTHON_INLINE PyObject *__Pyx_carray_to_tuple_float(float *, Py_ssize_t); /*proto*/
#define __Pyx_MODULE_NAME "pyorama.math3d.mat3"
extern int __pyx_module_is_main_pyorama__math3d__mat3;
int __pyx_module_is_main_pyorama__math3d__mat3 = 0;

/* Implementation of 'pyorama.math3d.mat3' */
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_range;
static const char __pyx_k_a[] = "a";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_add[] = "add";
static const char __pyx_k_det[] = "det";
static const char __pyx_k_div[] = "div";
static const char __pyx_k_dot[] = "dot";
static const char __pyx_k_inv[] = "inv";
static const char __pyx_k_m00[] = "m00";
static const char __pyx_k_m01[] = "m01";
static const char __pyx_k_m02[] = "m02";
static const char __pyx_k_m10[] = "m10";
static const char __pyx_k_m11[] = "m11";
static const char __pyx_k_m12[] = "m12";
static const char __pyx_k_m20[] = "m20";
static const char __pyx_k_m21[] = "m21";
static const char __pyx_k_m22[] = "m22";
static const char __pyx_k_mul[] = "mul";
static const char __pyx_k_out[] = "out";
static const char __pyx_k_ptr[] = "ptr";
static const char __pyx_k_sub[] = "sub";
static const char __pyx_k_Mat3[] = "Mat3";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_skew[] = "skew";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_scale[] = "scale";
static const char __pyx_k_shift[] = "shift";
static const char __pyx_k_equals[] = "equals";
static const char __pyx_k_factor[] = "factor";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_random[] = "random";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_rotate[] = "rotate";
static const char __pyx_k_skew_x[] = "skew_x";
static const char __pyx_k_skew_y[] = "skew_y";
static const char __pyx_k_xrange[] = "xrange";
static const char __pyx_k_epsilon[] = "epsilon";
static const char __pyx_k_radians[] = "radians";
static const char __pyx_k_Mat3_add[] = "Mat3.add";
static const char __pyx_k_Mat3_det[] = "Mat3.det";
static const char __pyx_k_Mat3_div[] = "Mat3.div";
static const char __pyx_k_Mat3_dot[] = "Mat3.dot";
static const char __pyx_k_Mat3_inv[] = "Mat3.inv";
static const char __pyx_k_Mat3_mul[] = "Mat3.mul";
static const char __pyx_k_Mat3_sub[] = "Mat3.sub";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_identity[] = "identity";
static const char __pyx_k_set_data[] = "set_data";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_Mat3_copy[] = "Mat3.copy";
static const char __pyx_k_Mat3_skew[] = "Mat3.skew";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_from_mat4[] = "from_mat4";
static const char __pyx_k_from_quat[] = "from_quat";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_scale_add[] = "scale_add";
static const char __pyx_k_translate[] = "translate";
static const char __pyx_k_transpose[] = "transpose";
static const char __pyx_k_Mat3_scale[] = "Mat3.scale";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_Mat3_equals[] = "Mat3.equals";
static const char __pyx_k_Mat3_random[] = "Mat3.random";
static const char __pyx_k_Mat3_rotate[] = "Mat3.rotate";
static const char __pyx_k_Mat3_skew_x[] = "Mat3.skew_x";
static const char __pyx_k_Mat3_skew_y[] = "Mat3.skew_y";
static const char __pyx_k_from_scaling[] = "from_scaling";
static const char __pyx_k_from_skewing[] = "from_skewing";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_Mat3_identity[] = "Mat3.identity";
static const char __pyx_k_Mat3_set_data[] = "Mat3.set_data";
static const char __pyx_k_from_rotation[] = "from_rotation";
static const char __pyx_k_invalid_index[] = "invalid index";
static const char __pyx_k_nearly_equals[] = "nearly_equals";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_Mat3_from_mat4[] = "Mat3.from_mat4";
static const char __pyx_k_Mat3_from_quat[] = "Mat3.from_quat";
static const char __pyx_k_Mat3_scale_add[] = "Mat3.scale_add";
static const char __pyx_k_Mat3_translate[] = "Mat3.translate";
static const char __pyx_k_Mat3_transpose[] = "Mat3.transpose";
static const char __pyx_k_from_skewing_x[] = "from_skewing_x";
static const char __pyx_k_from_skewing_y[] = "from_skewing_y";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_from_translation[] = "from_translation";
static const char __pyx_k_normal_from_mat4[] = "normal_from_mat4";
static const char __pyx_k_Mat3_from_scaling[] = "Mat3.from_scaling";
static const char __pyx_k_Mat3_from_skewing[] = "Mat3.from_skewing";
static const char __pyx_k_Mat3_from_rotation[] = "Mat3.from_rotation";
static const char __pyx_k_Mat3_nearly_equals[] = "Mat3.nearly_equals";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_Mat3_from_skewing_x[] = "Mat3.from_skewing_x";
static const char __pyx_k_Mat3_from_skewing_y[] = "Mat3.from_skewing_y";
static const char __pyx_k_pyorama_math3d_mat3[] = "pyorama.math3d.mat3";
static const char __pyx_k_Mat3___reduce_cython[] = "Mat3.__reduce_cython__";
static const char __pyx_k_Mat3_from_translation[] = "Mat3.from_translation";
static const char __pyx_k_Mat3_normal_from_mat4[] = "Mat3.normal_from_mat4";
static const char __pyx_k_Mat3___setstate_cython[] = "Mat3.__setstate_cython__";
static const char __pyx_k_pyorama_math3d_mat3_pyx[] = "pyorama/math3d/mat3.pyx";
static const char __pyx_k_0_is_not_an_invertible_matrix[] = "{0} is not an invertible matrix";
static const char __pyx_k_self_ptr_cannot_be_converted_to[] = "self.ptr cannot be converted to a Python object for pickling";
static PyObject *__pyx_kp_u_0_is_not_an_invertible_matrix;
static PyObject *__pyx_n_s_Mat3;
static PyObject *__pyx_n_s_Mat3___reduce_cython;
static PyObject *__pyx_n_s_Mat3___setstate_cython;
static PyObject *__pyx_n_s_Mat3_add;
static PyObject *__pyx_n_s_Mat3_copy;
static PyObject *__pyx_n_s_Mat3_det;
static PyObject *__pyx_n_s_Mat3_div;
static PyObject *__pyx_n_s_Mat3_dot;
static PyObject *__pyx_n_s_Mat3_equals;
static PyObject *__pyx_n_s_Mat3_from_mat4;
static PyObject *__pyx_n_s_Mat3_from_quat;
static PyObject *__pyx_n_s_Mat3_from_rotation;
static PyObject *__pyx_n_s_Mat3_from_scaling;
static PyObject *__pyx_n_s_Mat3_from_skewing;
static PyObject *__pyx_n_s_Mat3_from_skewing_x;
static PyObject *__pyx_n_s_Mat3_from_skewing_y;
static PyObject *__pyx_n_s_Mat3_from_translation;
static PyObject *__pyx_n_s_Mat3_identity;
static PyObject *__pyx_n_s_Mat3_inv;
static PyObject *__pyx_n_s_Mat3_mul;
static PyObject *__pyx_n_s_Mat3_nearly_equals;
static PyObject *__pyx_n_s_Mat3_normal_from_mat4;
static PyObject *__pyx_n_s_Mat3_random;
static PyObject *__pyx_n_s_Mat3_rotate;
static PyObject *__pyx_n_s_Mat3_scale;
static PyObject *__pyx_n_s_Mat3_scale_add;
static PyObject *__pyx_n_s_Mat3_set_data;
static PyObject *__pyx_n_s_Mat3_skew;
static PyObject *__pyx_n_s_Mat3_skew_x;
static PyObject *__pyx_n_s_Mat3_skew_y;
static PyObject *__pyx_n_s_Mat3_sub;
static PyObject *__pyx_n_s_Mat3_translate;
static PyObject *__pyx_n_s_Mat3_transpose;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_add;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_det;
static PyObject *__pyx_n_s_div;
static PyObject *__pyx_n_s_dot;
static PyObject *__pyx_n_s_epsilon;
static PyObject *__pyx_n_s_equals;
static PyObject *__pyx_n_s_factor;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_from_mat4;
static PyObject *__pyx_n_s_from_quat;
static PyObject *__pyx_n_s_from_rotation;
static PyObject *__pyx_n_s_from_scaling;
static PyObject *__pyx_n_s_from_skewing;
static PyObject *__pyx_n_s_from_skewing_x;
static PyObject *__pyx_n_s_from_skewing_y;
static PyObject *__pyx_n_s_from_translation;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_identity;
static PyObject *__pyx_n_s_inv;
static PyObject *__pyx_kp_u_invalid_index;
static PyObject *__pyx_n_s_m00;
static PyObject *__pyx_n_s_m01;
static PyObject *__pyx_n_s_m02;
static PyObject *__pyx_n_s_m10;
static PyObject *__pyx_n_s_m11;
static PyObject *__pyx_n_s_m12;
static PyObject *__pyx_n_s_m20;
static PyObject *__pyx_n_s_m21;
static PyObject *__pyx_n_s_m22;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_mul;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_nearly_equals;
static PyObject *__pyx_n_s_normal_from_mat4;
static PyObject *__pyx_n_s_out;
static PyObject *__pyx_n_s_ptr;
static PyObject *__pyx_n_s_pyorama_math3d_mat3;
static PyObject *__pyx_kp_s_pyorama_math3d_mat3_pyx;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_radians;
static PyObject *__pyx_n_s_random;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_rotate;
static PyObject *__pyx_n_s_scale;
static PyObject *__pyx_n_s_scale_add;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_kp_s_self_ptr_cannot_be_converted_to;
static PyObject *__pyx_n_s_set_data;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shift;
static PyObject *__pyx_n_s_skew;
static PyObject *__pyx_n_s_skew_x;
static PyObject *__pyx_n_s_skew_y;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_sub;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_translate;
static PyObject *__pyx_n_s_transpose;
static PyObject *__pyx_n_s_xrange;
static int __pyx_pf_7pyorama_6math3d_4mat3_4Mat3___init__(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_self); /* proto */
static void __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_2__dealloc__(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_self); /* proto */
static int __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_4__getbuffer__(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_self, Py_buffer *__pyx_v_buffer, CYTHON_UNUSED int __pyx_v_flags); /* proto */
static void __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_6__releasebuffer__(CYTHON_UNUSED struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_self, CYTHON_UNUSED Py_buffer *__pyx_v_buffer); /* proto */
static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_8__getitem__(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_self, size_t __pyx_v_i); /* proto */
static int __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_10__setitem__(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_self, size_t __pyx_v_i, float __pyx_v_value); /* proto */
static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_12add(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_14copy(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a); /* proto */
static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_16det(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a); /* proto */
static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_18div(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_20dot(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_22equals(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_24from_mat4(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat4_Mat4 *__pyx_v_a); /* proto */
static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_26from_quat(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4quat_Quat *__pyx_v_a); /* proto */
static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_28from_rotation(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, float __pyx_v_radians); /* proto */
static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_30from_scaling(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4vec2_Vec2 *__pyx_v_scale); /* proto */
static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_32from_skewing(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4vec2_Vec2 *__pyx_v_factor); /* proto */
static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_34from_skewing_x(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, float __pyx_v_radians); /* proto */
static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_36from_skewing_y(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, float __pyx_v_radians); /* proto */
static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_38from_translation(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4vec2_Vec2 *__pyx_v_shift); /* proto */
static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_40identity(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out); /* proto */
static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_42inv(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a); /* proto */
static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_44mul(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_46nearly_equals(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_b, float __pyx_v_epsilon); /* proto */
static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_48normal_from_mat4(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat4_Mat4 *__pyx_v_a); /* proto */
static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_50random(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out); /* proto */
static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_52rotate(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a, float __pyx_v_radians); /* proto */
static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_54scale(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a, struct __pyx_obj_7pyorama_6math3d_4vec2_Vec2 *__pyx_v_factor); /* proto */
static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_56scale_add(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a, float __pyx_v_scale, float __pyx_v_add); /* proto */
static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_58set_data(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, float __pyx_v_m00, float __pyx_v_m01, float __pyx_v_m02, float __pyx_v_m10, float __pyx_v_m11, float __pyx_v_m12, float __pyx_v_m20, float __pyx_v_m21, float __pyx_v_m22); /* proto */
static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_60skew(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a, struct __pyx_obj_7pyorama_6math3d_4vec2_Vec2 *__pyx_v_factor); /* proto */
static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_62skew_x(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a, float __pyx_v_radians); /* proto */
static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_64skew_y(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a, float __pyx_v_radians); /* proto */
static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_66sub(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_68transpose(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a); /* proto */
static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_70translate(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a, struct __pyx_obj_7pyorama_6math3d_4vec2_Vec2 *__pyx_v_shift); /* proto */
static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_72__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_74__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_7pyorama_6math3d_4mat3_Mat3(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static float __pyx_k__2;
static float __pyx_k__3;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_codeobj__7;
static PyObject *__pyx_codeobj__9;
static PyObject *__pyx_codeobj__11;
static PyObject *__pyx_codeobj__13;
static PyObject *__pyx_codeobj__15;
static PyObject *__pyx_codeobj__17;
static PyObject *__pyx_codeobj__19;
static PyObject *__pyx_codeobj__21;
static PyObject *__pyx_codeobj__23;
static PyObject *__pyx_codeobj__25;
static PyObject *__pyx_codeobj__27;
static PyObject *__pyx_codeobj__29;
static PyObject *__pyx_codeobj__31;
static PyObject *__pyx_codeobj__33;
static PyObject *__pyx_codeobj__35;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__39;
static PyObject *__pyx_codeobj__41;
static PyObject *__pyx_codeobj__43;
static PyObject *__pyx_codeobj__45;
static PyObject *__pyx_codeobj__47;
static PyObject *__pyx_codeobj__49;
static PyObject *__pyx_codeobj__51;
static PyObject *__pyx_codeobj__53;
static PyObject *__pyx_codeobj__55;
static PyObject *__pyx_codeobj__57;
static PyObject *__pyx_codeobj__59;
static PyObject *__pyx_codeobj__61;
static PyObject *__pyx_codeobj__63;
static PyObject *__pyx_codeobj__65;
static PyObject *__pyx_codeobj__67;
static PyObject *__pyx_codeobj__69;
/* Late includes */

/* "pyorama/math3d/mat3.pyx":3
 * cdef class Mat3:
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.ptr = <Mat3C *>calloc(1, sizeof(Mat3C))
 *         Mat3.c_identity(self.ptr)
 */

/* Python wrapper */
static int __pyx_pw_7pyorama_6math3d_4mat3_4Mat3_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7pyorama_6math3d_4mat3_4Mat3_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3___init__(((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pyorama_6math3d_4mat3_4Mat3___init__(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pyorama/math3d/mat3.pyx":4
 * 
 *     def __init__(self):
 *         self.ptr = <Mat3C *>calloc(1, sizeof(Mat3C))             # <<<<<<<<<<<<<<
 *         Mat3.c_identity(self.ptr)
 * 
 */
  __pyx_v_self->ptr = ((__pyx_t_7pyorama_6math3d_6common_Mat3C *)calloc(1, (sizeof(__pyx_t_7pyorama_6math3d_6common_Mat3C))));

  /* "pyorama/math3d/mat3.pyx":5
 *     def __init__(self):
 *         self.ptr = <Mat3C *>calloc(1, sizeof(Mat3C))
 *         Mat3.c_identity(self.ptr)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_identity(__pyx_v_self->ptr);

  /* "pyorama/math3d/mat3.pyx":3
 * cdef class Mat3:
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.ptr = <Mat3C *>calloc(1, sizeof(Mat3C))
 *         Mat3.c_identity(self.ptr)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":7
 *         Mat3.c_identity(self.ptr)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         free(self.ptr)
 *         self.ptr = NULL
 */

/* Python wrapper */
static void __pyx_pw_7pyorama_6math3d_4mat3_4Mat3_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7pyorama_6math3d_4mat3_4Mat3_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_2__dealloc__(((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_2__dealloc__(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pyorama/math3d/mat3.pyx":8
 * 
 *     def __dealloc__(self):
 *         free(self.ptr)             # <<<<<<<<<<<<<<
 *         self.ptr = NULL
 * 
 */
  free(__pyx_v_self->ptr);

  /* "pyorama/math3d/mat3.pyx":9
 *     def __dealloc__(self):
 *         free(self.ptr)
 *         self.ptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __getbuffer__(self, Py_buffer *buffer, int flags):
 */
  __pyx_v_self->ptr = NULL;

  /* "pyorama/math3d/mat3.pyx":7
 *         Mat3.c_identity(self.ptr)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         free(self.ptr)
 *         self.ptr = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pyorama/math3d/mat3.pyx":11
 *         self.ptr = NULL
 * 
 *     def __getbuffer__(self, Py_buffer *buffer, int flags):             # <<<<<<<<<<<<<<
 *         buffer.buf = self.ptr
 *         buffer.len = 9
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_7pyorama_6math3d_4mat3_4Mat3_5__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_buffer, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_7pyorama_6math3d_4mat3_4Mat3_5__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_buffer, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_4__getbuffer__(((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)__pyx_v_self), ((Py_buffer *)__pyx_v_buffer), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_4__getbuffer__(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_self, Py_buffer *__pyx_v_buffer, CYTHON_UNUSED int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_t_1;
  if (__pyx_v_buffer == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_buffer->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_buffer->obj);

  /* "pyorama/math3d/mat3.pyx":12
 * 
 *     def __getbuffer__(self, Py_buffer *buffer, int flags):
 *         buffer.buf = self.ptr             # <<<<<<<<<<<<<<
 *         buffer.len = 9
 *         buffer.readonly = 0
 */
  __pyx_t_1 = __pyx_v_self->ptr;
  __pyx_v_buffer->buf = __pyx_t_1;

  /* "pyorama/math3d/mat3.pyx":13
 *     def __getbuffer__(self, Py_buffer *buffer, int flags):
 *         buffer.buf = self.ptr
 *         buffer.len = 9             # <<<<<<<<<<<<<<
 *         buffer.readonly = 0
 *         buffer.format = "f"
 */
  __pyx_v_buffer->len = 9;

  /* "pyorama/math3d/mat3.pyx":14
 *         buffer.buf = self.ptr
 *         buffer.len = 9
 *         buffer.readonly = 0             # <<<<<<<<<<<<<<
 *         buffer.format = "f"
 *         buffer.ndim = 1
 */
  __pyx_v_buffer->readonly = 0;

  /* "pyorama/math3d/mat3.pyx":15
 *         buffer.len = 9
 *         buffer.readonly = 0
 *         buffer.format = "f"             # <<<<<<<<<<<<<<
 *         buffer.ndim = 1
 *         buffer.shape = <Py_ssize_t *>&buffer.len
 */
  __pyx_v_buffer->format = ((char *)"f");

  /* "pyorama/math3d/mat3.pyx":16
 *         buffer.readonly = 0
 *         buffer.format = "f"
 *         buffer.ndim = 1             # <<<<<<<<<<<<<<
 *         buffer.shape = <Py_ssize_t *>&buffer.len
 *         buffer.strides = NULL
 */
  __pyx_v_buffer->ndim = 1;

  /* "pyorama/math3d/mat3.pyx":17
 *         buffer.format = "f"
 *         buffer.ndim = 1
 *         buffer.shape = <Py_ssize_t *>&buffer.len             # <<<<<<<<<<<<<<
 *         buffer.strides = NULL
 *         buffer.suboffsets = NULL
 */
  __pyx_v_buffer->shape = ((Py_ssize_t *)(&__pyx_v_buffer->len));

  /* "pyorama/math3d/mat3.pyx":18
 *         buffer.ndim = 1
 *         buffer.shape = <Py_ssize_t *>&buffer.len
 *         buffer.strides = NULL             # <<<<<<<<<<<<<<
 *         buffer.suboffsets = NULL
 *         buffer.itemsize = sizeof(float)
 */
  __pyx_v_buffer->strides = NULL;

  /* "pyorama/math3d/mat3.pyx":19
 *         buffer.shape = <Py_ssize_t *>&buffer.len
 *         buffer.strides = NULL
 *         buffer.suboffsets = NULL             # <<<<<<<<<<<<<<
 *         buffer.itemsize = sizeof(float)
 *         buffer.internal = NULL
 */
  __pyx_v_buffer->suboffsets = NULL;

  /* "pyorama/math3d/mat3.pyx":20
 *         buffer.strides = NULL
 *         buffer.suboffsets = NULL
 *         buffer.itemsize = sizeof(float)             # <<<<<<<<<<<<<<
 *         buffer.internal = NULL
 * 
 */
  __pyx_v_buffer->itemsize = (sizeof(float));

  /* "pyorama/math3d/mat3.pyx":21
 *         buffer.suboffsets = NULL
 *         buffer.itemsize = sizeof(float)
 *         buffer.internal = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __releasebuffer__(self, Py_buffer *buffer):
 */
  __pyx_v_buffer->internal = NULL;

  /* "pyorama/math3d/mat3.pyx":11
 *         self.ptr = NULL
 * 
 *     def __getbuffer__(self, Py_buffer *buffer, int flags):             # <<<<<<<<<<<<<<
 *         buffer.buf = self.ptr
 *         buffer.len = 9
 */

  /* function exit code */
  __pyx_r = 0;
  if (__pyx_v_buffer->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_buffer->obj);
    __Pyx_DECREF(__pyx_v_buffer->obj); __pyx_v_buffer->obj = 0;
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":23
 *         buffer.internal = NULL
 * 
 *     def __releasebuffer__(self, Py_buffer *buffer):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_7pyorama_6math3d_4mat3_4Mat3_7__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_buffer); /*proto*/
static CYTHON_UNUSED void __pyx_pw_7pyorama_6math3d_4mat3_4Mat3_7__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_buffer) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_6__releasebuffer__(((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)__pyx_v_self), ((Py_buffer *)__pyx_v_buffer));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_6__releasebuffer__(CYTHON_UNUSED struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_self, CYTHON_UNUSED Py_buffer *__pyx_v_buffer) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pyorama/math3d/mat3.pyx":26
 *         pass
 * 
 *     def __getitem__(self, size_t i):             # <<<<<<<<<<<<<<
 *         cdef size_t size = 9
 *         if i < 0 or i >= size:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_size_t(__pyx_arg_i); if (unlikely((__pyx_v_i == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 26, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_8__getitem__(((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)__pyx_v_self), ((size_t)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_8__getitem__(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_self, size_t __pyx_v_i) {
  size_t __pyx_v_size;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pyorama/math3d/mat3.pyx":27
 * 
 *     def __getitem__(self, size_t i):
 *         cdef size_t size = 9             # <<<<<<<<<<<<<<
 *         if i < 0 or i >= size:
 *             raise ValueError("invalid index")
 */
  __pyx_v_size = 9;

  /* "pyorama/math3d/mat3.pyx":28
 *     def __getitem__(self, size_t i):
 *         cdef size_t size = 9
 *         if i < 0 or i >= size:             # <<<<<<<<<<<<<<
 *             raise ValueError("invalid index")
 *         return self.ptr[0][i]
 */
  __pyx_t_2 = ((__pyx_v_i < 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_i >= __pyx_v_size) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "pyorama/math3d/mat3.pyx":29
 *         cdef size_t size = 9
 *         if i < 0 or i >= size:
 *             raise ValueError("invalid index")             # <<<<<<<<<<<<<<
 *         return self.ptr[0][i]
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 29, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 29, __pyx_L1_error)

    /* "pyorama/math3d/mat3.pyx":28
 *     def __getitem__(self, size_t i):
 *         cdef size_t size = 9
 *         if i < 0 or i >= size:             # <<<<<<<<<<<<<<
 *             raise ValueError("invalid index")
 *         return self.ptr[0][i]
 */
  }

  /* "pyorama/math3d/mat3.pyx":30
 *         if i < 0 or i >= size:
 *             raise ValueError("invalid index")
 *         return self.ptr[0][i]             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, size_t i, float value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyFloat_FromDouble(((__pyx_v_self->ptr[0])[__pyx_v_i])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pyorama/math3d/mat3.pyx":26
 *         pass
 * 
 *     def __getitem__(self, size_t i):             # <<<<<<<<<<<<<<
 *         cdef size_t size = 9
 *         if i < 0 or i >= size:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":32
 *         return self.ptr[0][i]
 * 
 *     def __setitem__(self, size_t i, float value):             # <<<<<<<<<<<<<<
 *         cdef size_t size = 9
 *         if i < 0 or i >= size:
 */

/* Python wrapper */
static int __pyx_pw_7pyorama_6math3d_4mat3_4Mat3_11__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_7pyorama_6math3d_4mat3_4Mat3_11__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i, PyObject *__pyx_arg_value) {
  size_t __pyx_v_i;
  float __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_size_t(__pyx_arg_i); if (unlikely((__pyx_v_i == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 32, __pyx_L3_error)
  }
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsFloat(__pyx_arg_value); if (unlikely((__pyx_v_value == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 32, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_10__setitem__(((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)__pyx_v_self), ((size_t)__pyx_v_i), ((float)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_10__setitem__(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_self, size_t __pyx_v_i, float __pyx_v_value) {
  size_t __pyx_v_size;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "pyorama/math3d/mat3.pyx":33
 * 
 *     def __setitem__(self, size_t i, float value):
 *         cdef size_t size = 9             # <<<<<<<<<<<<<<
 *         if i < 0 or i >= size:
 *             raise ValueError("invalid index")
 */
  __pyx_v_size = 9;

  /* "pyorama/math3d/mat3.pyx":34
 *     def __setitem__(self, size_t i, float value):
 *         cdef size_t size = 9
 *         if i < 0 or i >= size:             # <<<<<<<<<<<<<<
 *             raise ValueError("invalid index")
 *         self.ptr[0][i] = value
 */
  __pyx_t_2 = ((__pyx_v_i < 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_i >= __pyx_v_size) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "pyorama/math3d/mat3.pyx":35
 *         cdef size_t size = 9
 *         if i < 0 or i >= size:
 *             raise ValueError("invalid index")             # <<<<<<<<<<<<<<
 *         self.ptr[0][i] = value
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 35, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 35, __pyx_L1_error)

    /* "pyorama/math3d/mat3.pyx":34
 *     def __setitem__(self, size_t i, float value):
 *         cdef size_t size = 9
 *         if i < 0 or i >= size:             # <<<<<<<<<<<<<<
 *             raise ValueError("invalid index")
 *         self.ptr[0][i] = value
 */
  }

  /* "pyorama/math3d/mat3.pyx":36
 *         if i < 0 or i >= size:
 *             raise ValueError("invalid index")
 *         self.ptr[0][i] = value             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  ((__pyx_v_self->ptr[0])[__pyx_v_i]) = __pyx_v_value;

  /* "pyorama/math3d/mat3.pyx":32
 *         return self.ptr[0][i]
 * 
 *     def __setitem__(self, size_t i, float value):             # <<<<<<<<<<<<<<
 *         cdef size_t size = 9
 *         if i < 0 or i >= size:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":39
 * 
 *     @staticmethod
 *     def add(Mat3 out, Mat3 a, Mat3 b):             # <<<<<<<<<<<<<<
 *         Mat3.c_add(out.ptr, a.ptr, b.ptr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_13add(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_13add = {"add", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_13add, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_13add(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out = 0;
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a = 0;
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_b = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_out,&__pyx_n_s_a,&__pyx_n_s_b,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add", 1, 3, 3, 1); __PYX_ERR(0, 39, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add", 1, 3, 3, 2); __PYX_ERR(0, 39, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add") < 0)) __PYX_ERR(0, 39, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_out = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[0]);
    __pyx_v_a = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[1]);
    __pyx_v_b = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 39, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_out), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "out", 0))) __PYX_ERR(0, 39, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "a", 0))) __PYX_ERR(0, 39, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "b", 0))) __PYX_ERR(0, 39, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_12add(__pyx_v_out, __pyx_v_a, __pyx_v_b);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_12add(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add", 0);

  /* "pyorama/math3d/mat3.pyx":40
 *     @staticmethod
 *     def add(Mat3 out, Mat3 a, Mat3 b):
 *         Mat3.c_add(out.ptr, a.ptr, b.ptr)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_add(__pyx_v_out->ptr, __pyx_v_a->ptr, __pyx_v_b->ptr);

  /* "pyorama/math3d/mat3.pyx":39
 * 
 *     @staticmethod
 *     def add(Mat3 out, Mat3 a, Mat3 b):             # <<<<<<<<<<<<<<
 *         Mat3.c_add(out.ptr, a.ptr, b.ptr)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":43
 * 
 *     @staticmethod
 *     def copy(Mat3 out, Mat3 a):             # <<<<<<<<<<<<<<
 *         Mat3.c_copy(out.ptr, a.ptr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_15copy(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_15copy = {"copy", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_15copy, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_15copy(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out = 0;
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_out,&__pyx_n_s_a,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("copy", 1, 2, 2, 1); __PYX_ERR(0, 43, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "copy") < 0)) __PYX_ERR(0, 43, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_out = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[0]);
    __pyx_v_a = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("copy", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 43, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_out), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "out", 0))) __PYX_ERR(0, 43, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "a", 0))) __PYX_ERR(0, 43, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_14copy(__pyx_v_out, __pyx_v_a);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_14copy(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy", 0);

  /* "pyorama/math3d/mat3.pyx":44
 *     @staticmethod
 *     def copy(Mat3 out, Mat3 a):
 *         Mat3.c_copy(out.ptr, a.ptr)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_copy(__pyx_v_out->ptr, __pyx_v_a->ptr);

  /* "pyorama/math3d/mat3.pyx":43
 * 
 *     @staticmethod
 *     def copy(Mat3 out, Mat3 a):             # <<<<<<<<<<<<<<
 *         Mat3.c_copy(out.ptr, a.ptr)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":47
 * 
 *     @staticmethod
 *     def det(Mat3 a):             # <<<<<<<<<<<<<<
 *         return Mat3.c_det(a.ptr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_17det(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_17det = {"det", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_17det, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_17det(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("det (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "det") < 0)) __PYX_ERR(0, 47, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_a = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("det", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 47, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.det", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "a", 0))) __PYX_ERR(0, 47, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_16det(__pyx_v_a);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_16det(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("det", 0);

  /* "pyorama/math3d/mat3.pyx":48
 *     @staticmethod
 *     def det(Mat3 a):
 *         return Mat3.c_det(a.ptr)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_det(__pyx_v_a->ptr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyorama/math3d/mat3.pyx":47
 * 
 *     @staticmethod
 *     def det(Mat3 a):             # <<<<<<<<<<<<<<
 *         return Mat3.c_det(a.ptr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.det", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":51
 * 
 *     @staticmethod
 *     def div(Mat3 out, Mat3 a, Mat3 b):             # <<<<<<<<<<<<<<
 *         Mat3.c_div(out.ptr, a.ptr, b.ptr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_19div(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_19div = {"div", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_19div, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_19div(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out = 0;
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a = 0;
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_b = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("div (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_out,&__pyx_n_s_a,&__pyx_n_s_b,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("div", 1, 3, 3, 1); __PYX_ERR(0, 51, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("div", 1, 3, 3, 2); __PYX_ERR(0, 51, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "div") < 0)) __PYX_ERR(0, 51, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_out = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[0]);
    __pyx_v_a = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[1]);
    __pyx_v_b = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("div", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 51, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.div", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_out), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "out", 0))) __PYX_ERR(0, 51, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "a", 0))) __PYX_ERR(0, 51, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "b", 0))) __PYX_ERR(0, 51, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_18div(__pyx_v_out, __pyx_v_a, __pyx_v_b);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_18div(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("div", 0);

  /* "pyorama/math3d/mat3.pyx":52
 *     @staticmethod
 *     def div(Mat3 out, Mat3 a, Mat3 b):
 *         Mat3.c_div(out.ptr, a.ptr, b.ptr)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_div(__pyx_v_out->ptr, __pyx_v_a->ptr, __pyx_v_b->ptr);

  /* "pyorama/math3d/mat3.pyx":51
 * 
 *     @staticmethod
 *     def div(Mat3 out, Mat3 a, Mat3 b):             # <<<<<<<<<<<<<<
 *         Mat3.c_div(out.ptr, a.ptr, b.ptr)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":55
 * 
 *     @staticmethod
 *     def dot(Mat3 out, Mat3 a, Mat3 b):             # <<<<<<<<<<<<<<
 *         Mat3.c_dot(out.ptr, a.ptr, b.ptr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_21dot(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_21dot = {"dot", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_21dot, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_21dot(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out = 0;
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a = 0;
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_b = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dot (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_out,&__pyx_n_s_a,&__pyx_n_s_b,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dot", 1, 3, 3, 1); __PYX_ERR(0, 55, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dot", 1, 3, 3, 2); __PYX_ERR(0, 55, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dot") < 0)) __PYX_ERR(0, 55, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_out = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[0]);
    __pyx_v_a = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[1]);
    __pyx_v_b = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dot", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 55, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_out), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "out", 0))) __PYX_ERR(0, 55, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "a", 0))) __PYX_ERR(0, 55, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "b", 0))) __PYX_ERR(0, 55, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_20dot(__pyx_v_out, __pyx_v_a, __pyx_v_b);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_20dot(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dot", 0);

  /* "pyorama/math3d/mat3.pyx":56
 *     @staticmethod
 *     def dot(Mat3 out, Mat3 a, Mat3 b):
 *         Mat3.c_dot(out.ptr, a.ptr, b.ptr)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_dot(__pyx_v_out->ptr, __pyx_v_a->ptr, __pyx_v_b->ptr);

  /* "pyorama/math3d/mat3.pyx":55
 * 
 *     @staticmethod
 *     def dot(Mat3 out, Mat3 a, Mat3 b):             # <<<<<<<<<<<<<<
 *         Mat3.c_dot(out.ptr, a.ptr, b.ptr)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":59
 * 
 *     @staticmethod
 *     def equals(Mat3 a, Mat3 b):             # <<<<<<<<<<<<<<
 *         return Mat3.c_equals(a.ptr, b.ptr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_23equals(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_23equals = {"equals", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_23equals, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_23equals(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a = 0;
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_b = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("equals (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("equals", 1, 2, 2, 1); __PYX_ERR(0, 59, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "equals") < 0)) __PYX_ERR(0, 59, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_a = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[0]);
    __pyx_v_b = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("equals", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 59, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.equals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "a", 0))) __PYX_ERR(0, 59, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "b", 0))) __PYX_ERR(0, 59, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_22equals(__pyx_v_a, __pyx_v_b);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_22equals(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("equals", 0);

  /* "pyorama/math3d/mat3.pyx":60
 *     @staticmethod
 *     def equals(Mat3 a, Mat3 b):
 *         return Mat3.c_equals(a.ptr, b.ptr)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_equals(__pyx_v_a->ptr, __pyx_v_b->ptr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyorama/math3d/mat3.pyx":59
 * 
 *     @staticmethod
 *     def equals(Mat3 a, Mat3 b):             # <<<<<<<<<<<<<<
 *         return Mat3.c_equals(a.ptr, b.ptr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.equals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":63
 * 
 *     @staticmethod
 *     def from_mat4(Mat3 out, Mat4 a):             # <<<<<<<<<<<<<<
 *         Mat3.c_from_mat4(out.ptr, a.ptr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_25from_mat4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_25from_mat4 = {"from_mat4", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_25from_mat4, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_25from_mat4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out = 0;
  struct __pyx_obj_7pyorama_6math3d_4mat4_Mat4 *__pyx_v_a = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_mat4 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_out,&__pyx_n_s_a,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("from_mat4", 1, 2, 2, 1); __PYX_ERR(0, 63, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_mat4") < 0)) __PYX_ERR(0, 63, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_out = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[0]);
    __pyx_v_a = ((struct __pyx_obj_7pyorama_6math3d_4mat4_Mat4 *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_mat4", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 63, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.from_mat4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_out), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "out", 0))) __PYX_ERR(0, 63, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), __pyx_ptype_7pyorama_6math3d_4mat4_Mat4, 1, "a", 0))) __PYX_ERR(0, 63, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_24from_mat4(__pyx_v_out, __pyx_v_a);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_24from_mat4(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat4_Mat4 *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_mat4", 0);

  /* "pyorama/math3d/mat3.pyx":64
 *     @staticmethod
 *     def from_mat4(Mat3 out, Mat4 a):
 *         Mat3.c_from_mat4(out.ptr, a.ptr)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_mat4(__pyx_v_out->ptr, __pyx_v_a->ptr);

  /* "pyorama/math3d/mat3.pyx":63
 * 
 *     @staticmethod
 *     def from_mat4(Mat3 out, Mat4 a):             # <<<<<<<<<<<<<<
 *         Mat3.c_from_mat4(out.ptr, a.ptr)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":67
 * 
 *     @staticmethod
 *     def from_quat(Mat3 out, Quat a):             # <<<<<<<<<<<<<<
 *         Mat3.c_from_quat(out.ptr, a.ptr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_27from_quat(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_27from_quat = {"from_quat", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_27from_quat, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_27from_quat(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out = 0;
  struct __pyx_obj_7pyorama_6math3d_4quat_Quat *__pyx_v_a = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_quat (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_out,&__pyx_n_s_a,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("from_quat", 1, 2, 2, 1); __PYX_ERR(0, 67, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_quat") < 0)) __PYX_ERR(0, 67, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_out = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[0]);
    __pyx_v_a = ((struct __pyx_obj_7pyorama_6math3d_4quat_Quat *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_quat", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 67, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.from_quat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_out), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "out", 0))) __PYX_ERR(0, 67, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), __pyx_ptype_7pyorama_6math3d_4quat_Quat, 1, "a", 0))) __PYX_ERR(0, 67, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_26from_quat(__pyx_v_out, __pyx_v_a);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_26from_quat(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4quat_Quat *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_quat", 0);

  /* "pyorama/math3d/mat3.pyx":68
 *     @staticmethod
 *     def from_quat(Mat3 out, Quat a):
 *         Mat3.c_from_quat(out.ptr, a.ptr)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_quat(__pyx_v_out->ptr, __pyx_v_a->ptr);

  /* "pyorama/math3d/mat3.pyx":67
 * 
 *     @staticmethod
 *     def from_quat(Mat3 out, Quat a):             # <<<<<<<<<<<<<<
 *         Mat3.c_from_quat(out.ptr, a.ptr)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":71
 * 
 *     @staticmethod
 *     def from_rotation(Mat3 out, float radians):             # <<<<<<<<<<<<<<
 *         Mat3.c_from_rotation(out.ptr, radians)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_29from_rotation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_29from_rotation = {"from_rotation", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_29from_rotation, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_29from_rotation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out = 0;
  float __pyx_v_radians;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_rotation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_out,&__pyx_n_s_radians,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_radians)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("from_rotation", 1, 2, 2, 1); __PYX_ERR(0, 71, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_rotation") < 0)) __PYX_ERR(0, 71, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_out = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[0]);
    __pyx_v_radians = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_radians == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 71, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_rotation", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 71, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.from_rotation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_out), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "out", 0))) __PYX_ERR(0, 71, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_28from_rotation(__pyx_v_out, __pyx_v_radians);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_28from_rotation(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, float __pyx_v_radians) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_rotation", 0);

  /* "pyorama/math3d/mat3.pyx":72
 *     @staticmethod
 *     def from_rotation(Mat3 out, float radians):
 *         Mat3.c_from_rotation(out.ptr, radians)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_rotation(__pyx_v_out->ptr, __pyx_v_radians);

  /* "pyorama/math3d/mat3.pyx":71
 * 
 *     @staticmethod
 *     def from_rotation(Mat3 out, float radians):             # <<<<<<<<<<<<<<
 *         Mat3.c_from_rotation(out.ptr, radians)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":75
 * 
 *     @staticmethod
 *     def from_scaling(Mat3 out, Vec2 scale):             # <<<<<<<<<<<<<<
 *         Mat3.c_from_scaling(out.ptr, scale.ptr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_31from_scaling(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_31from_scaling = {"from_scaling", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_31from_scaling, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_31from_scaling(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out = 0;
  struct __pyx_obj_7pyorama_6math3d_4vec2_Vec2 *__pyx_v_scale = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_scaling (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_out,&__pyx_n_s_scale,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_scale)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("from_scaling", 1, 2, 2, 1); __PYX_ERR(0, 75, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_scaling") < 0)) __PYX_ERR(0, 75, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_out = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[0]);
    __pyx_v_scale = ((struct __pyx_obj_7pyorama_6math3d_4vec2_Vec2 *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_scaling", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 75, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.from_scaling", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_out), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "out", 0))) __PYX_ERR(0, 75, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_scale), __pyx_ptype_7pyorama_6math3d_4vec2_Vec2, 1, "scale", 0))) __PYX_ERR(0, 75, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_30from_scaling(__pyx_v_out, __pyx_v_scale);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_30from_scaling(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4vec2_Vec2 *__pyx_v_scale) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_scaling", 0);

  /* "pyorama/math3d/mat3.pyx":76
 *     @staticmethod
 *     def from_scaling(Mat3 out, Vec2 scale):
 *         Mat3.c_from_scaling(out.ptr, scale.ptr)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_scaling(__pyx_v_out->ptr, __pyx_v_scale->ptr);

  /* "pyorama/math3d/mat3.pyx":75
 * 
 *     @staticmethod
 *     def from_scaling(Mat3 out, Vec2 scale):             # <<<<<<<<<<<<<<
 *         Mat3.c_from_scaling(out.ptr, scale.ptr)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":79
 * 
 *     @staticmethod
 *     def from_skewing(Mat3 out, Vec2 factor):             # <<<<<<<<<<<<<<
 *         Mat3.c_from_skewing(out.ptr, factor.ptr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_33from_skewing(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_33from_skewing = {"from_skewing", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_33from_skewing, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_33from_skewing(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out = 0;
  struct __pyx_obj_7pyorama_6math3d_4vec2_Vec2 *__pyx_v_factor = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_skewing (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_out,&__pyx_n_s_factor,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_factor)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("from_skewing", 1, 2, 2, 1); __PYX_ERR(0, 79, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_skewing") < 0)) __PYX_ERR(0, 79, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_out = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[0]);
    __pyx_v_factor = ((struct __pyx_obj_7pyorama_6math3d_4vec2_Vec2 *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_skewing", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 79, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.from_skewing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_out), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "out", 0))) __PYX_ERR(0, 79, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_factor), __pyx_ptype_7pyorama_6math3d_4vec2_Vec2, 1, "factor", 0))) __PYX_ERR(0, 79, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_32from_skewing(__pyx_v_out, __pyx_v_factor);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_32from_skewing(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4vec2_Vec2 *__pyx_v_factor) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_skewing", 0);

  /* "pyorama/math3d/mat3.pyx":80
 *     @staticmethod
 *     def from_skewing(Mat3 out, Vec2 factor):
 *         Mat3.c_from_skewing(out.ptr, factor.ptr)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_skewing(__pyx_v_out->ptr, __pyx_v_factor->ptr);

  /* "pyorama/math3d/mat3.pyx":79
 * 
 *     @staticmethod
 *     def from_skewing(Mat3 out, Vec2 factor):             # <<<<<<<<<<<<<<
 *         Mat3.c_from_skewing(out.ptr, factor.ptr)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":83
 * 
 *     @staticmethod
 *     def from_skewing_x(Mat3 out, float radians):             # <<<<<<<<<<<<<<
 *         Mat3.c_from_skewing_x(out.ptr, radians.ptr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_35from_skewing_x(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_35from_skewing_x = {"from_skewing_x", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_35from_skewing_x, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_35from_skewing_x(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out = 0;
  float __pyx_v_radians;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_skewing_x (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_out,&__pyx_n_s_radians,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_radians)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("from_skewing_x", 1, 2, 2, 1); __PYX_ERR(0, 83, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_skewing_x") < 0)) __PYX_ERR(0, 83, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_out = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[0]);
    __pyx_v_radians = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_radians == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 83, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_skewing_x", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 83, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.from_skewing_x", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_out), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "out", 0))) __PYX_ERR(0, 83, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_34from_skewing_x(__pyx_v_out, __pyx_v_radians);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_34from_skewing_x(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, float __pyx_v_radians) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  float __pyx_t_3;
  __Pyx_RefNannySetupContext("from_skewing_x", 0);

  /* "pyorama/math3d/mat3.pyx":84
 *     @staticmethod
 *     def from_skewing_x(Mat3 out, float radians):
 *         Mat3.c_from_skewing_x(out.ptr, radians.ptr)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_radians); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ptr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_skewing_x(__pyx_v_out->ptr, __pyx_t_3);

  /* "pyorama/math3d/mat3.pyx":83
 * 
 *     @staticmethod
 *     def from_skewing_x(Mat3 out, float radians):             # <<<<<<<<<<<<<<
 *         Mat3.c_from_skewing_x(out.ptr, radians.ptr)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.from_skewing_x", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":87
 * 
 *     @staticmethod
 *     def from_skewing_y(Mat3 out, float radians):             # <<<<<<<<<<<<<<
 *         Mat3.c_from_skewing_y(out.ptr, radians.ptr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_37from_skewing_y(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_37from_skewing_y = {"from_skewing_y", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_37from_skewing_y, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_37from_skewing_y(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out = 0;
  float __pyx_v_radians;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_skewing_y (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_out,&__pyx_n_s_radians,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_radians)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("from_skewing_y", 1, 2, 2, 1); __PYX_ERR(0, 87, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_skewing_y") < 0)) __PYX_ERR(0, 87, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_out = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[0]);
    __pyx_v_radians = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_radians == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 87, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_skewing_y", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 87, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.from_skewing_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_out), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "out", 0))) __PYX_ERR(0, 87, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_36from_skewing_y(__pyx_v_out, __pyx_v_radians);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_36from_skewing_y(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, float __pyx_v_radians) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  float __pyx_t_3;
  __Pyx_RefNannySetupContext("from_skewing_y", 0);

  /* "pyorama/math3d/mat3.pyx":88
 *     @staticmethod
 *     def from_skewing_y(Mat3 out, float radians):
 *         Mat3.c_from_skewing_y(out.ptr, radians.ptr)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_radians); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ptr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_skewing_y(__pyx_v_out->ptr, __pyx_t_3);

  /* "pyorama/math3d/mat3.pyx":87
 * 
 *     @staticmethod
 *     def from_skewing_y(Mat3 out, float radians):             # <<<<<<<<<<<<<<
 *         Mat3.c_from_skewing_y(out.ptr, radians.ptr)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.from_skewing_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":91
 * 
 *     @staticmethod
 *     def from_translation(Mat3 out, Vec2 shift):             # <<<<<<<<<<<<<<
 *         Mat3.c_from_translation(out.ptr, shift.ptr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_39from_translation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_39from_translation = {"from_translation", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_39from_translation, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_39from_translation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out = 0;
  struct __pyx_obj_7pyorama_6math3d_4vec2_Vec2 *__pyx_v_shift = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_translation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_out,&__pyx_n_s_shift,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shift)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("from_translation", 1, 2, 2, 1); __PYX_ERR(0, 91, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_translation") < 0)) __PYX_ERR(0, 91, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_out = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[0]);
    __pyx_v_shift = ((struct __pyx_obj_7pyorama_6math3d_4vec2_Vec2 *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_translation", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 91, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.from_translation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_out), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "out", 0))) __PYX_ERR(0, 91, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shift), __pyx_ptype_7pyorama_6math3d_4vec2_Vec2, 1, "shift", 0))) __PYX_ERR(0, 91, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_38from_translation(__pyx_v_out, __pyx_v_shift);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_38from_translation(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4vec2_Vec2 *__pyx_v_shift) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_translation", 0);

  /* "pyorama/math3d/mat3.pyx":92
 *     @staticmethod
 *     def from_translation(Mat3 out, Vec2 shift):
 *         Mat3.c_from_translation(out.ptr, shift.ptr)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_translation(__pyx_v_out->ptr, __pyx_v_shift->ptr);

  /* "pyorama/math3d/mat3.pyx":91
 * 
 *     @staticmethod
 *     def from_translation(Mat3 out, Vec2 shift):             # <<<<<<<<<<<<<<
 *         Mat3.c_from_translation(out.ptr, shift.ptr)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":95
 * 
 *     @staticmethod
 *     def identity(Mat3 out):             # <<<<<<<<<<<<<<
 *         Mat3.c_identity(out.ptr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_41identity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_41identity = {"identity", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_41identity, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_41identity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("identity (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_out,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "identity") < 0)) __PYX_ERR(0, 95, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_out = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("identity", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 95, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.identity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_out), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "out", 0))) __PYX_ERR(0, 95, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_40identity(__pyx_v_out);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_40identity(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("identity", 0);

  /* "pyorama/math3d/mat3.pyx":96
 *     @staticmethod
 *     def identity(Mat3 out):
 *         Mat3.c_identity(out.ptr)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_identity(__pyx_v_out->ptr);

  /* "pyorama/math3d/mat3.pyx":95
 * 
 *     @staticmethod
 *     def identity(Mat3 out):             # <<<<<<<<<<<<<<
 *         Mat3.c_identity(out.ptr)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":99
 * 
 *     @staticmethod
 *     def inv(Mat3 out, Mat3 a):             # <<<<<<<<<<<<<<
 *         Mat3.c_inv(out.ptr, a.ptr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_43inv(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_43inv = {"inv", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_43inv, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_43inv(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out = 0;
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inv (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_out,&__pyx_n_s_a,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("inv", 1, 2, 2, 1); __PYX_ERR(0, 99, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "inv") < 0)) __PYX_ERR(0, 99, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_out = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[0]);
    __pyx_v_a = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("inv", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 99, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.inv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_out), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "out", 0))) __PYX_ERR(0, 99, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "a", 0))) __PYX_ERR(0, 99, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_42inv(__pyx_v_out, __pyx_v_a);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_42inv(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inv", 0);

  /* "pyorama/math3d/mat3.pyx":100
 *     @staticmethod
 *     def inv(Mat3 out, Mat3 a):
 *         Mat3.c_inv(out.ptr, a.ptr)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_inv(__pyx_v_out->ptr, __pyx_v_a->ptr);

  /* "pyorama/math3d/mat3.pyx":99
 * 
 *     @staticmethod
 *     def inv(Mat3 out, Mat3 a):             # <<<<<<<<<<<<<<
 *         Mat3.c_inv(out.ptr, a.ptr)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":103
 * 
 *     @staticmethod
 *     def mul(Mat3 out, Mat3 a, Mat3 b):             # <<<<<<<<<<<<<<
 *         Mat3.c_mul(out.ptr, a.ptr, b.ptr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_45mul(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_45mul = {"mul", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_45mul, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_45mul(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out = 0;
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a = 0;
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_b = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mul (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_out,&__pyx_n_s_a,&__pyx_n_s_b,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mul", 1, 3, 3, 1); __PYX_ERR(0, 103, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mul", 1, 3, 3, 2); __PYX_ERR(0, 103, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "mul") < 0)) __PYX_ERR(0, 103, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_out = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[0]);
    __pyx_v_a = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[1]);
    __pyx_v_b = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mul", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 103, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.mul", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_out), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "out", 0))) __PYX_ERR(0, 103, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "a", 0))) __PYX_ERR(0, 103, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "b", 0))) __PYX_ERR(0, 103, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_44mul(__pyx_v_out, __pyx_v_a, __pyx_v_b);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_44mul(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mul", 0);

  /* "pyorama/math3d/mat3.pyx":104
 *     @staticmethod
 *     def mul(Mat3 out, Mat3 a, Mat3 b):
 *         Mat3.c_mul(out.ptr, a.ptr, b.ptr)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_mul(__pyx_v_out->ptr, __pyx_v_a->ptr, __pyx_v_b->ptr);

  /* "pyorama/math3d/mat3.pyx":103
 * 
 *     @staticmethod
 *     def mul(Mat3 out, Mat3 a, Mat3 b):             # <<<<<<<<<<<<<<
 *         Mat3.c_mul(out.ptr, a.ptr, b.ptr)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":107
 * 
 *     @staticmethod
 *     def nearly_equals(Mat3 a, Mat3 b, float epsilon=epsilon):             # <<<<<<<<<<<<<<
 *         return Mat3.c_nearly_equals(a.ptr, b.ptr, epsilon)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_47nearly_equals(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_47nearly_equals = {"nearly_equals", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_47nearly_equals, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_47nearly_equals(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a = 0;
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_b = 0;
  float __pyx_v_epsilon;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("nearly_equals (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_epsilon,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("nearly_equals", 0, 2, 3, 1); __PYX_ERR(0, 107, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_epsilon);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "nearly_equals") < 0)) __PYX_ERR(0, 107, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_a = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[0]);
    __pyx_v_b = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[1]);
    if (values[2]) {
      __pyx_v_epsilon = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_epsilon == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 107, __pyx_L3_error)
    } else {
      __pyx_v_epsilon = __pyx_k__2;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("nearly_equals", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 107, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.nearly_equals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "a", 0))) __PYX_ERR(0, 107, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "b", 0))) __PYX_ERR(0, 107, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_46nearly_equals(__pyx_v_a, __pyx_v_b, __pyx_v_epsilon);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_46nearly_equals(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_b, float __pyx_v_epsilon) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  struct __pyx_opt_args_7pyorama_6math3d_4mat3_4Mat3_c_nearly_equals __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("nearly_equals", 0);

  /* "pyorama/math3d/mat3.pyx":108
 *     @staticmethod
 *     def nearly_equals(Mat3 a, Mat3 b, float epsilon=epsilon):
 *         return Mat3.c_nearly_equals(a.ptr, b.ptr, epsilon)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.epsilon = __pyx_v_epsilon;
  __pyx_t_1 = __pyx_vtabptr_7pyorama_6math3d_4mat3_Mat3->c_nearly_equals(__pyx_v_a->ptr, __pyx_v_b->ptr, &__pyx_t_2); 
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pyorama/math3d/mat3.pyx":107
 * 
 *     @staticmethod
 *     def nearly_equals(Mat3 a, Mat3 b, float epsilon=epsilon):             # <<<<<<<<<<<<<<
 *         return Mat3.c_nearly_equals(a.ptr, b.ptr, epsilon)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.nearly_equals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":111
 * 
 *     @staticmethod
 *     def normal_from_mat4(Mat3 out, Mat4 a):             # <<<<<<<<<<<<<<
 *         Mat3.c_normal_from_mat4(out.ptr, a.ptr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_49normal_from_mat4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_49normal_from_mat4 = {"normal_from_mat4", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_49normal_from_mat4, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_49normal_from_mat4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out = 0;
  struct __pyx_obj_7pyorama_6math3d_4mat4_Mat4 *__pyx_v_a = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normal_from_mat4 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_out,&__pyx_n_s_a,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("normal_from_mat4", 1, 2, 2, 1); __PYX_ERR(0, 111, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "normal_from_mat4") < 0)) __PYX_ERR(0, 111, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_out = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[0]);
    __pyx_v_a = ((struct __pyx_obj_7pyorama_6math3d_4mat4_Mat4 *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("normal_from_mat4", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 111, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.normal_from_mat4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_out), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "out", 0))) __PYX_ERR(0, 111, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), __pyx_ptype_7pyorama_6math3d_4mat4_Mat4, 1, "a", 0))) __PYX_ERR(0, 111, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_48normal_from_mat4(__pyx_v_out, __pyx_v_a);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_48normal_from_mat4(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat4_Mat4 *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normal_from_mat4", 0);

  /* "pyorama/math3d/mat3.pyx":112
 *     @staticmethod
 *     def normal_from_mat4(Mat3 out, Mat4 a):
 *         Mat3.c_normal_from_mat4(out.ptr, a.ptr)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_normal_from_mat4(__pyx_v_out->ptr, __pyx_v_a->ptr);

  /* "pyorama/math3d/mat3.pyx":111
 * 
 *     @staticmethod
 *     def normal_from_mat4(Mat3 out, Mat4 a):             # <<<<<<<<<<<<<<
 *         Mat3.c_normal_from_mat4(out.ptr, a.ptr)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":115
 * 
 *     @staticmethod
 *     def random(Mat3 out):             # <<<<<<<<<<<<<<
 *         Mat3.c_random(out.ptr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_51random(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_51random = {"random", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_51random, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_51random(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("random (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_out,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "random") < 0)) __PYX_ERR(0, 115, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_out = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("random", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 115, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.random", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_out), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "out", 0))) __PYX_ERR(0, 115, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_50random(__pyx_v_out);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_50random(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("random", 0);

  /* "pyorama/math3d/mat3.pyx":116
 *     @staticmethod
 *     def random(Mat3 out):
 *         Mat3.c_random(out.ptr)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_random(__pyx_v_out->ptr);

  /* "pyorama/math3d/mat3.pyx":115
 * 
 *     @staticmethod
 *     def random(Mat3 out):             # <<<<<<<<<<<<<<
 *         Mat3.c_random(out.ptr)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":119
 * 
 *     @staticmethod
 *     def rotate(Mat3 out, Mat3 a, float radians):             # <<<<<<<<<<<<<<
 *         Mat3.c_rotate(out.ptr, a.ptr, radians)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_53rotate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_53rotate = {"rotate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_53rotate, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_53rotate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out = 0;
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a = 0;
  float __pyx_v_radians;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rotate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_out,&__pyx_n_s_a,&__pyx_n_s_radians,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rotate", 1, 3, 3, 1); __PYX_ERR(0, 119, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_radians)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rotate", 1, 3, 3, 2); __PYX_ERR(0, 119, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rotate") < 0)) __PYX_ERR(0, 119, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_out = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[0]);
    __pyx_v_a = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[1]);
    __pyx_v_radians = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_radians == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 119, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rotate", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 119, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.rotate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_out), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "out", 0))) __PYX_ERR(0, 119, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "a", 0))) __PYX_ERR(0, 119, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_52rotate(__pyx_v_out, __pyx_v_a, __pyx_v_radians);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_52rotate(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a, float __pyx_v_radians) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rotate", 0);

  /* "pyorama/math3d/mat3.pyx":120
 *     @staticmethod
 *     def rotate(Mat3 out, Mat3 a, float radians):
 *         Mat3.c_rotate(out.ptr, a.ptr, radians)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_rotate(__pyx_v_out->ptr, __pyx_v_a->ptr, __pyx_v_radians);

  /* "pyorama/math3d/mat3.pyx":119
 * 
 *     @staticmethod
 *     def rotate(Mat3 out, Mat3 a, float radians):             # <<<<<<<<<<<<<<
 *         Mat3.c_rotate(out.ptr, a.ptr, radians)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":123
 * 
 *     @staticmethod
 *     def scale(Mat3 out, Mat3 a, Vec2 factor):             # <<<<<<<<<<<<<<
 *         Mat3.c_scale(out.ptr, a.ptr, factor.ptr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_55scale(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_55scale = {"scale", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_55scale, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_55scale(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out = 0;
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a = 0;
  struct __pyx_obj_7pyorama_6math3d_4vec2_Vec2 *__pyx_v_factor = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scale (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_out,&__pyx_n_s_a,&__pyx_n_s_factor,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scale", 1, 3, 3, 1); __PYX_ERR(0, 123, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_factor)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scale", 1, 3, 3, 2); __PYX_ERR(0, 123, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "scale") < 0)) __PYX_ERR(0, 123, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_out = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[0]);
    __pyx_v_a = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[1]);
    __pyx_v_factor = ((struct __pyx_obj_7pyorama_6math3d_4vec2_Vec2 *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("scale", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 123, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.scale", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_out), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "out", 0))) __PYX_ERR(0, 123, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "a", 0))) __PYX_ERR(0, 123, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_factor), __pyx_ptype_7pyorama_6math3d_4vec2_Vec2, 1, "factor", 0))) __PYX_ERR(0, 123, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_54scale(__pyx_v_out, __pyx_v_a, __pyx_v_factor);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_54scale(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a, struct __pyx_obj_7pyorama_6math3d_4vec2_Vec2 *__pyx_v_factor) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scale", 0);

  /* "pyorama/math3d/mat3.pyx":124
 *     @staticmethod
 *     def scale(Mat3 out, Mat3 a, Vec2 factor):
 *         Mat3.c_scale(out.ptr, a.ptr, factor.ptr)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_scale(__pyx_v_out->ptr, __pyx_v_a->ptr, __pyx_v_factor->ptr);

  /* "pyorama/math3d/mat3.pyx":123
 * 
 *     @staticmethod
 *     def scale(Mat3 out, Mat3 a, Vec2 factor):             # <<<<<<<<<<<<<<
 *         Mat3.c_scale(out.ptr, a.ptr, factor.ptr)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":127
 * 
 *     @staticmethod
 *     def scale_add(Mat3 out, Mat3 a, float scale=1.0, float add=0.0):             # <<<<<<<<<<<<<<
 *         Mat3.c_scale_add(out.ptr, a.ptr, scale, add)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_57scale_add(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_57scale_add = {"scale_add", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_57scale_add, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_57scale_add(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out = 0;
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a = 0;
  float __pyx_v_scale;
  float __pyx_v_add;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scale_add (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_out,&__pyx_n_s_a,&__pyx_n_s_scale,&__pyx_n_s_add,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scale_add", 0, 2, 4, 1); __PYX_ERR(0, 127, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_scale);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_add);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "scale_add") < 0)) __PYX_ERR(0, 127, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_out = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[0]);
    __pyx_v_a = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[1]);
    if (values[2]) {
      __pyx_v_scale = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_scale == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 127, __pyx_L3_error)
    } else {
      __pyx_v_scale = ((float)1.0);
    }
    if (values[3]) {
      __pyx_v_add = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_add == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 127, __pyx_L3_error)
    } else {
      __pyx_v_add = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("scale_add", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 127, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.scale_add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_out), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "out", 0))) __PYX_ERR(0, 127, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "a", 0))) __PYX_ERR(0, 127, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_56scale_add(__pyx_v_out, __pyx_v_a, __pyx_v_scale, __pyx_v_add);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_56scale_add(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a, float __pyx_v_scale, float __pyx_v_add) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  struct __pyx_opt_args_7pyorama_6math3d_4mat3_4Mat3_c_scale_add __pyx_t_1;
  __Pyx_RefNannySetupContext("scale_add", 0);

  /* "pyorama/math3d/mat3.pyx":128
 *     @staticmethod
 *     def scale_add(Mat3 out, Mat3 a, float scale=1.0, float add=0.0):
 *         Mat3.c_scale_add(out.ptr, a.ptr, scale, add)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_1.__pyx_n = 2;
  __pyx_t_1.scale = __pyx_v_scale;
  __pyx_t_1.add = __pyx_v_add;
  __pyx_vtabptr_7pyorama_6math3d_4mat3_Mat3->c_scale_add(__pyx_v_out->ptr, __pyx_v_a->ptr, &__pyx_t_1); 

  /* "pyorama/math3d/mat3.pyx":127
 * 
 *     @staticmethod
 *     def scale_add(Mat3 out, Mat3 a, float scale=1.0, float add=0.0):             # <<<<<<<<<<<<<<
 *         Mat3.c_scale_add(out.ptr, a.ptr, scale, add)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":131
 * 
 *     @staticmethod
 *     def set_data(Mat3 out, float m00=0.0, float m01=0.0, float m02=0.0,             # <<<<<<<<<<<<<<
 *             float m10=0.0, float m11=0.0, float m12=0.0,
 *             float m20=0.0, float m21=0.0, float m22=0.0):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_59set_data(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_59set_data = {"set_data", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_59set_data, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_59set_data(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out = 0;
  float __pyx_v_m00;
  float __pyx_v_m01;
  float __pyx_v_m02;
  float __pyx_v_m10;
  float __pyx_v_m11;
  float __pyx_v_m12;
  float __pyx_v_m20;
  float __pyx_v_m21;
  float __pyx_v_m22;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_data (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_out,&__pyx_n_s_m00,&__pyx_n_s_m01,&__pyx_n_s_m02,&__pyx_n_s_m10,&__pyx_n_s_m11,&__pyx_n_s_m12,&__pyx_n_s_m20,&__pyx_n_s_m21,&__pyx_n_s_m22,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m00);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m01);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m02);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m10);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m11);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m12);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m20);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m21);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m22);
          if (value) { values[9] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_data") < 0)) __PYX_ERR(0, 131, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_out = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[0]);
    if (values[1]) {
      __pyx_v_m00 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_m00 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 131, __pyx_L3_error)
    } else {
      __pyx_v_m00 = ((float)0.0);
    }
    if (values[2]) {
      __pyx_v_m01 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_m01 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 131, __pyx_L3_error)
    } else {
      __pyx_v_m01 = ((float)0.0);
    }
    if (values[3]) {
      __pyx_v_m02 = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_m02 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 131, __pyx_L3_error)
    } else {
      __pyx_v_m02 = ((float)0.0);
    }
    if (values[4]) {
      __pyx_v_m10 = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_m10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 132, __pyx_L3_error)
    } else {
      __pyx_v_m10 = ((float)0.0);
    }
    if (values[5]) {
      __pyx_v_m11 = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_m11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 132, __pyx_L3_error)
    } else {
      __pyx_v_m11 = ((float)0.0);
    }
    if (values[6]) {
      __pyx_v_m12 = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_m12 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 132, __pyx_L3_error)
    } else {
      __pyx_v_m12 = ((float)0.0);
    }
    if (values[7]) {
      __pyx_v_m20 = __pyx_PyFloat_AsFloat(values[7]); if (unlikely((__pyx_v_m20 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 133, __pyx_L3_error)
    } else {
      __pyx_v_m20 = ((float)0.0);
    }
    if (values[8]) {
      __pyx_v_m21 = __pyx_PyFloat_AsFloat(values[8]); if (unlikely((__pyx_v_m21 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 133, __pyx_L3_error)
    } else {
      __pyx_v_m21 = ((float)0.0);
    }
    if (values[9]) {
      __pyx_v_m22 = __pyx_PyFloat_AsFloat(values[9]); if (unlikely((__pyx_v_m22 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 133, __pyx_L3_error)
    } else {
      __pyx_v_m22 = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_data", 0, 1, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 131, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.set_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_out), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "out", 0))) __PYX_ERR(0, 131, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_58set_data(__pyx_v_out, __pyx_v_m00, __pyx_v_m01, __pyx_v_m02, __pyx_v_m10, __pyx_v_m11, __pyx_v_m12, __pyx_v_m20, __pyx_v_m21, __pyx_v_m22);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_58set_data(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, float __pyx_v_m00, float __pyx_v_m01, float __pyx_v_m02, float __pyx_v_m10, float __pyx_v_m11, float __pyx_v_m12, float __pyx_v_m20, float __pyx_v_m21, float __pyx_v_m22) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  struct __pyx_opt_args_7pyorama_6math3d_4mat3_4Mat3_c_set_data __pyx_t_1;
  __Pyx_RefNannySetupContext("set_data", 0);

  /* "pyorama/math3d/mat3.pyx":134
 *             float m10=0.0, float m11=0.0, float m12=0.0,
 *             float m20=0.0, float m21=0.0, float m22=0.0):
 *         Mat3.c_set_data(out.ptr,             # <<<<<<<<<<<<<<
 *                 m00, m01, m02,
 *                 m10, m11, m12,
 */
  __pyx_t_1.__pyx_n = 9;
  __pyx_t_1.m00 = __pyx_v_m00;
  __pyx_t_1.m01 = __pyx_v_m01;
  __pyx_t_1.m02 = __pyx_v_m02;
  __pyx_t_1.m10 = __pyx_v_m10;
  __pyx_t_1.m11 = __pyx_v_m11;
  __pyx_t_1.m12 = __pyx_v_m12;
  __pyx_t_1.m20 = __pyx_v_m20;
  __pyx_t_1.m21 = __pyx_v_m21;
  __pyx_t_1.m22 = __pyx_v_m22;
  __pyx_vtabptr_7pyorama_6math3d_4mat3_Mat3->c_set_data(__pyx_v_out->ptr, &__pyx_t_1); 

  /* "pyorama/math3d/mat3.pyx":131
 * 
 *     @staticmethod
 *     def set_data(Mat3 out, float m00=0.0, float m01=0.0, float m02=0.0,             # <<<<<<<<<<<<<<
 *             float m10=0.0, float m11=0.0, float m12=0.0,
 *             float m20=0.0, float m21=0.0, float m22=0.0):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":140
 * 
 *     @staticmethod
 *     def skew(Mat3 out, Mat3 a, Vec2 factor):             # <<<<<<<<<<<<<<
 *         Mat3.c_skew(out.ptr, a.ptr, factor.ptr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_61skew(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_61skew = {"skew", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_61skew, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_61skew(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out = 0;
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a = 0;
  struct __pyx_obj_7pyorama_6math3d_4vec2_Vec2 *__pyx_v_factor = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("skew (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_out,&__pyx_n_s_a,&__pyx_n_s_factor,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("skew", 1, 3, 3, 1); __PYX_ERR(0, 140, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_factor)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("skew", 1, 3, 3, 2); __PYX_ERR(0, 140, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "skew") < 0)) __PYX_ERR(0, 140, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_out = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[0]);
    __pyx_v_a = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[1]);
    __pyx_v_factor = ((struct __pyx_obj_7pyorama_6math3d_4vec2_Vec2 *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("skew", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 140, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.skew", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_out), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "out", 0))) __PYX_ERR(0, 140, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "a", 0))) __PYX_ERR(0, 140, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_factor), __pyx_ptype_7pyorama_6math3d_4vec2_Vec2, 1, "factor", 0))) __PYX_ERR(0, 140, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_60skew(__pyx_v_out, __pyx_v_a, __pyx_v_factor);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_60skew(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a, struct __pyx_obj_7pyorama_6math3d_4vec2_Vec2 *__pyx_v_factor) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("skew", 0);

  /* "pyorama/math3d/mat3.pyx":141
 *     @staticmethod
 *     def skew(Mat3 out, Mat3 a, Vec2 factor):
 *         Mat3.c_skew(out.ptr, a.ptr, factor.ptr)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_skew(__pyx_v_out->ptr, __pyx_v_a->ptr, __pyx_v_factor->ptr);

  /* "pyorama/math3d/mat3.pyx":140
 * 
 *     @staticmethod
 *     def skew(Mat3 out, Mat3 a, Vec2 factor):             # <<<<<<<<<<<<<<
 *         Mat3.c_skew(out.ptr, a.ptr, factor.ptr)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":144
 * 
 *     @staticmethod
 *     def skew_x(Mat3 out, Mat3 a, float radians):             # <<<<<<<<<<<<<<
 *         Mat3.c_skew_x(out.ptr, a.ptr, radians)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_63skew_x(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_63skew_x = {"skew_x", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_63skew_x, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_63skew_x(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out = 0;
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a = 0;
  float __pyx_v_radians;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("skew_x (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_out,&__pyx_n_s_a,&__pyx_n_s_radians,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("skew_x", 1, 3, 3, 1); __PYX_ERR(0, 144, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_radians)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("skew_x", 1, 3, 3, 2); __PYX_ERR(0, 144, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "skew_x") < 0)) __PYX_ERR(0, 144, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_out = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[0]);
    __pyx_v_a = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[1]);
    __pyx_v_radians = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_radians == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 144, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("skew_x", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 144, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.skew_x", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_out), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "out", 0))) __PYX_ERR(0, 144, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "a", 0))) __PYX_ERR(0, 144, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_62skew_x(__pyx_v_out, __pyx_v_a, __pyx_v_radians);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_62skew_x(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a, float __pyx_v_radians) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("skew_x", 0);

  /* "pyorama/math3d/mat3.pyx":145
 *     @staticmethod
 *     def skew_x(Mat3 out, Mat3 a, float radians):
 *         Mat3.c_skew_x(out.ptr, a.ptr, radians)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_skew_x(__pyx_v_out->ptr, __pyx_v_a->ptr, __pyx_v_radians);

  /* "pyorama/math3d/mat3.pyx":144
 * 
 *     @staticmethod
 *     def skew_x(Mat3 out, Mat3 a, float radians):             # <<<<<<<<<<<<<<
 *         Mat3.c_skew_x(out.ptr, a.ptr, radians)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":148
 * 
 *     @staticmethod
 *     def skew_y(Mat3 out, Mat3 a, float radians):             # <<<<<<<<<<<<<<
 *         Mat3.c_skew_y(out.ptr, a.ptr, radians)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_65skew_y(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_65skew_y = {"skew_y", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_65skew_y, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_65skew_y(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out = 0;
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a = 0;
  float __pyx_v_radians;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("skew_y (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_out,&__pyx_n_s_a,&__pyx_n_s_radians,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("skew_y", 1, 3, 3, 1); __PYX_ERR(0, 148, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_radians)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("skew_y", 1, 3, 3, 2); __PYX_ERR(0, 148, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "skew_y") < 0)) __PYX_ERR(0, 148, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_out = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[0]);
    __pyx_v_a = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[1]);
    __pyx_v_radians = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_radians == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 148, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("skew_y", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 148, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.skew_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_out), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "out", 0))) __PYX_ERR(0, 148, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "a", 0))) __PYX_ERR(0, 148, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_64skew_y(__pyx_v_out, __pyx_v_a, __pyx_v_radians);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_64skew_y(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a, float __pyx_v_radians) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("skew_y", 0);

  /* "pyorama/math3d/mat3.pyx":149
 *     @staticmethod
 *     def skew_y(Mat3 out, Mat3 a, float radians):
 *         Mat3.c_skew_y(out.ptr, a.ptr, radians)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_skew_y(__pyx_v_out->ptr, __pyx_v_a->ptr, __pyx_v_radians);

  /* "pyorama/math3d/mat3.pyx":148
 * 
 *     @staticmethod
 *     def skew_y(Mat3 out, Mat3 a, float radians):             # <<<<<<<<<<<<<<
 *         Mat3.c_skew_y(out.ptr, a.ptr, radians)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":152
 * 
 *     @staticmethod
 *     def sub(Mat3 out, Mat3 a, Mat3 b):             # <<<<<<<<<<<<<<
 *         Mat3.c_sub(out.ptr, a.ptr, b.ptr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_67sub(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_67sub = {"sub", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_67sub, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_67sub(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out = 0;
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a = 0;
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_b = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sub (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_out,&__pyx_n_s_a,&__pyx_n_s_b,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sub", 1, 3, 3, 1); __PYX_ERR(0, 152, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sub", 1, 3, 3, 2); __PYX_ERR(0, 152, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sub") < 0)) __PYX_ERR(0, 152, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_out = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[0]);
    __pyx_v_a = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[1]);
    __pyx_v_b = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sub", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 152, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_out), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "out", 0))) __PYX_ERR(0, 152, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "a", 0))) __PYX_ERR(0, 152, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "b", 0))) __PYX_ERR(0, 152, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_66sub(__pyx_v_out, __pyx_v_a, __pyx_v_b);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_66sub(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sub", 0);

  /* "pyorama/math3d/mat3.pyx":153
 *     @staticmethod
 *     def sub(Mat3 out, Mat3 a, Mat3 b):
 *         Mat3.c_sub(out.ptr, a.ptr, b.ptr)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_sub(__pyx_v_out->ptr, __pyx_v_a->ptr, __pyx_v_b->ptr);

  /* "pyorama/math3d/mat3.pyx":152
 * 
 *     @staticmethod
 *     def sub(Mat3 out, Mat3 a, Mat3 b):             # <<<<<<<<<<<<<<
 *         Mat3.c_sub(out.ptr, a.ptr, b.ptr)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":156
 * 
 *     @staticmethod
 *     def transpose(Mat3 out, Mat3 a):             # <<<<<<<<<<<<<<
 *         Mat3.c_transpose(out.ptr, a.ptr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_69transpose(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_69transpose = {"transpose", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_69transpose, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_69transpose(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out = 0;
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transpose (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_out,&__pyx_n_s_a,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("transpose", 1, 2, 2, 1); __PYX_ERR(0, 156, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "transpose") < 0)) __PYX_ERR(0, 156, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_out = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[0]);
    __pyx_v_a = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("transpose", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 156, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.transpose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_out), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "out", 0))) __PYX_ERR(0, 156, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "a", 0))) __PYX_ERR(0, 156, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_68transpose(__pyx_v_out, __pyx_v_a);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_68transpose(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transpose", 0);

  /* "pyorama/math3d/mat3.pyx":157
 *     @staticmethod
 *     def transpose(Mat3 out, Mat3 a):
 *         Mat3.c_transpose(out.ptr, a.ptr)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_transpose(__pyx_v_out->ptr, __pyx_v_a->ptr);

  /* "pyorama/math3d/mat3.pyx":156
 * 
 *     @staticmethod
 *     def transpose(Mat3 out, Mat3 a):             # <<<<<<<<<<<<<<
 *         Mat3.c_transpose(out.ptr, a.ptr)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":160
 * 
 *     @staticmethod
 *     def translate(Mat3 out, Mat3 a, Vec2 shift):             # <<<<<<<<<<<<<<
 *         Mat3.c_translate(out.ptr, a.ptr, shift.ptr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_71translate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_71translate = {"translate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_71translate, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_71translate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out = 0;
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a = 0;
  struct __pyx_obj_7pyorama_6math3d_4vec2_Vec2 *__pyx_v_shift = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("translate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_out,&__pyx_n_s_a,&__pyx_n_s_shift,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("translate", 1, 3, 3, 1); __PYX_ERR(0, 160, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shift)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("translate", 1, 3, 3, 2); __PYX_ERR(0, 160, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "translate") < 0)) __PYX_ERR(0, 160, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_out = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[0]);
    __pyx_v_a = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)values[1]);
    __pyx_v_shift = ((struct __pyx_obj_7pyorama_6math3d_4vec2_Vec2 *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("translate", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 160, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.translate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_out), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "out", 0))) __PYX_ERR(0, 160, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), __pyx_ptype_7pyorama_6math3d_4mat3_Mat3, 1, "a", 0))) __PYX_ERR(0, 160, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shift), __pyx_ptype_7pyorama_6math3d_4vec2_Vec2, 1, "shift", 0))) __PYX_ERR(0, 160, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_70translate(__pyx_v_out, __pyx_v_a, __pyx_v_shift);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_70translate(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_out, struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_a, struct __pyx_obj_7pyorama_6math3d_4vec2_Vec2 *__pyx_v_shift) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("translate", 0);

  /* "pyorama/math3d/mat3.pyx":161
 *     @staticmethod
 *     def translate(Mat3 out, Mat3 a, Vec2 shift):
 *         Mat3.c_translate(out.ptr, a.ptr, shift.ptr)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_translate(__pyx_v_out->ptr, __pyx_v_a->ptr, __pyx_v_shift->ptr);

  /* "pyorama/math3d/mat3.pyx":160
 * 
 *     @staticmethod
 *     def translate(Mat3 out, Mat3 a, Vec2 shift):             # <<<<<<<<<<<<<<
 *         Mat3.c_translate(out.ptr, a.ptr, shift.ptr)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":164
 * 
 *     @staticmethod
 *     cdef inline void c_add(Mat3C *out, Mat3C *a, Mat3C *b) nogil:             # <<<<<<<<<<<<<<
 *         cdef size_t i = 0
 *         cdef size_t size = 9
 */

static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_add(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_b) {
  size_t __pyx_v_i;
  size_t __pyx_v_size;
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;

  /* "pyorama/math3d/mat3.pyx":165
 *     @staticmethod
 *     cdef inline void c_add(Mat3C *out, Mat3C *a, Mat3C *b) nogil:
 *         cdef size_t i = 0             # <<<<<<<<<<<<<<
 *         cdef size_t size = 9
 *         for i in xrange(size):
 */
  __pyx_v_i = 0;

  /* "pyorama/math3d/mat3.pyx":166
 *     cdef inline void c_add(Mat3C *out, Mat3C *a, Mat3C *b) nogil:
 *         cdef size_t i = 0
 *         cdef size_t size = 9             # <<<<<<<<<<<<<<
 *         for i in xrange(size):
 *             out[0][i] = a[0][i] + b[0][i]
 */
  __pyx_v_size = 9;

  /* "pyorama/math3d/mat3.pyx":167
 *         cdef size_t i = 0
 *         cdef size_t size = 9
 *         for i in xrange(size):             # <<<<<<<<<<<<<<
 *             out[0][i] = a[0][i] + b[0][i]
 * 
 */
  __pyx_t_1 = __pyx_v_size;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "pyorama/math3d/mat3.pyx":168
 *         cdef size_t size = 9
 *         for i in xrange(size):
 *             out[0][i] = a[0][i] + b[0][i]             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    ((__pyx_v_out[0])[__pyx_v_i]) = (((__pyx_v_a[0])[__pyx_v_i]) + ((__pyx_v_b[0])[__pyx_v_i]));
  }

  /* "pyorama/math3d/mat3.pyx":164
 * 
 *     @staticmethod
 *     cdef inline void c_add(Mat3C *out, Mat3C *a, Mat3C *b) nogil:             # <<<<<<<<<<<<<<
 *         cdef size_t i = 0
 *         cdef size_t size = 9
 */

  /* function exit code */
}

/* "pyorama/math3d/mat3.pyx":171
 * 
 *     @staticmethod
 *     cdef inline void c_copy(Mat3C *out, Mat3C *a) nogil:             # <<<<<<<<<<<<<<
 *         cdef size_t i = 0
 *         cdef size_t size = 9
 */

static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_copy(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a) {
  size_t __pyx_v_i;
  size_t __pyx_v_size;
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;

  /* "pyorama/math3d/mat3.pyx":172
 *     @staticmethod
 *     cdef inline void c_copy(Mat3C *out, Mat3C *a) nogil:
 *         cdef size_t i = 0             # <<<<<<<<<<<<<<
 *         cdef size_t size = 9
 *         for i in xrange(size):
 */
  __pyx_v_i = 0;

  /* "pyorama/math3d/mat3.pyx":173
 *     cdef inline void c_copy(Mat3C *out, Mat3C *a) nogil:
 *         cdef size_t i = 0
 *         cdef size_t size = 9             # <<<<<<<<<<<<<<
 *         for i in xrange(size):
 *             out[0][i] = a[0][i]
 */
  __pyx_v_size = 9;

  /* "pyorama/math3d/mat3.pyx":174
 *         cdef size_t i = 0
 *         cdef size_t size = 9
 *         for i in xrange(size):             # <<<<<<<<<<<<<<
 *             out[0][i] = a[0][i]
 * 
 */
  __pyx_t_1 = __pyx_v_size;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "pyorama/math3d/mat3.pyx":175
 *         cdef size_t size = 9
 *         for i in xrange(size):
 *             out[0][i] = a[0][i]             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    ((__pyx_v_out[0])[__pyx_v_i]) = ((__pyx_v_a[0])[__pyx_v_i]);
  }

  /* "pyorama/math3d/mat3.pyx":171
 * 
 *     @staticmethod
 *     cdef inline void c_copy(Mat3C *out, Mat3C *a) nogil:             # <<<<<<<<<<<<<<
 *         cdef size_t i = 0
 *         cdef size_t size = 9
 */

  /* function exit code */
}

/* "pyorama/math3d/mat3.pyx":178
 * 
 *     @staticmethod
 *     cdef inline float c_det(Mat3C *a) nogil:             # <<<<<<<<<<<<<<
 *         cdef float out = a[0][0] * (a[0][8] * a[0][4] - a[0][5] * a[0][7]) + \
 *             a[0][3] * (a[0][1] * a[0][8] - a[0][2] * a[0][7]) + \
 */

static CYTHON_INLINE float __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_det(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a) {
  float __pyx_v_out;
  float __pyx_r;

  /* "pyorama/math3d/mat3.pyx":180
 *     cdef inline float c_det(Mat3C *a) nogil:
 *         cdef float out = a[0][0] * (a[0][8] * a[0][4] - a[0][5] * a[0][7]) + \
 *             a[0][3] * (a[0][1] * a[0][8] - a[0][2] * a[0][7]) + \             # <<<<<<<<<<<<<<
 *             a[0][6] * (a[0][1] * a[0][5] - a[0][2] * a[0][4])
 *         return out
 */
  __pyx_v_out = (((((__pyx_v_a[0])[0]) * ((((__pyx_v_a[0])[8]) * ((__pyx_v_a[0])[4])) - (((__pyx_v_a[0])[5]) * ((__pyx_v_a[0])[7])))) + (((__pyx_v_a[0])[3]) * ((((__pyx_v_a[0])[1]) * ((__pyx_v_a[0])[8])) - (((__pyx_v_a[0])[2]) * ((__pyx_v_a[0])[7]))))) + (((__pyx_v_a[0])[6]) * ((((__pyx_v_a[0])[1]) * ((__pyx_v_a[0])[5])) - (((__pyx_v_a[0])[2]) * ((__pyx_v_a[0])[4])))));

  /* "pyorama/math3d/mat3.pyx":182
 *             a[0][3] * (a[0][1] * a[0][8] - a[0][2] * a[0][7]) + \
 *             a[0][6] * (a[0][1] * a[0][5] - a[0][2] * a[0][4])
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "pyorama/math3d/mat3.pyx":178
 * 
 *     @staticmethod
 *     cdef inline float c_det(Mat3C *a) nogil:             # <<<<<<<<<<<<<<
 *         cdef float out = a[0][0] * (a[0][8] * a[0][4] - a[0][5] * a[0][7]) + \
 *             a[0][3] * (a[0][1] * a[0][8] - a[0][2] * a[0][7]) + \
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":185
 * 
 *     @staticmethod
 *     cdef inline void c_div(Mat3C *out, Mat3C *a, Mat3C *b) nogil:             # <<<<<<<<<<<<<<
 *         cdef size_t i = 0
 *         cdef size_t size = 9
 */

static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_div(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_b) {
  size_t __pyx_v_i;
  size_t __pyx_v_size;
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;

  /* "pyorama/math3d/mat3.pyx":186
 *     @staticmethod
 *     cdef inline void c_div(Mat3C *out, Mat3C *a, Mat3C *b) nogil:
 *         cdef size_t i = 0             # <<<<<<<<<<<<<<
 *         cdef size_t size = 9
 *         for i in xrange(size):
 */
  __pyx_v_i = 0;

  /* "pyorama/math3d/mat3.pyx":187
 *     cdef inline void c_div(Mat3C *out, Mat3C *a, Mat3C *b) nogil:
 *         cdef size_t i = 0
 *         cdef size_t size = 9             # <<<<<<<<<<<<<<
 *         for i in xrange(size):
 *             out[0][i] = a[0][i] / b[0][i]
 */
  __pyx_v_size = 9;

  /* "pyorama/math3d/mat3.pyx":188
 *         cdef size_t i = 0
 *         cdef size_t size = 9
 *         for i in xrange(size):             # <<<<<<<<<<<<<<
 *             out[0][i] = a[0][i] / b[0][i]
 * 
 */
  __pyx_t_1 = __pyx_v_size;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "pyorama/math3d/mat3.pyx":189
 *         cdef size_t size = 9
 *         for i in xrange(size):
 *             out[0][i] = a[0][i] / b[0][i]             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    ((__pyx_v_out[0])[__pyx_v_i]) = (((__pyx_v_a[0])[__pyx_v_i]) / ((__pyx_v_b[0])[__pyx_v_i]));
  }

  /* "pyorama/math3d/mat3.pyx":185
 * 
 *     @staticmethod
 *     cdef inline void c_div(Mat3C *out, Mat3C *a, Mat3C *b) nogil:             # <<<<<<<<<<<<<<
 *         cdef size_t i = 0
 *         cdef size_t size = 9
 */

  /* function exit code */
}

/* "pyorama/math3d/mat3.pyx":192
 * 
 *     @staticmethod
 *     cdef inline void c_dot(Mat3C *out, Mat3C *a, Mat3C *b) nogil:             # <<<<<<<<<<<<<<
 *         cdef float a0, a1, a2, a3, a4, a5, a6, a7, a8
 *         cdef float b0, b1, b2, b3, b4, b5, b6, b7, b8
 */

static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_dot(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_b) {
  float __pyx_v_a0;
  float __pyx_v_a1;
  float __pyx_v_a2;
  float __pyx_v_a3;
  float __pyx_v_a4;
  float __pyx_v_a5;
  float __pyx_v_a6;
  float __pyx_v_a7;
  float __pyx_v_a8;
  float __pyx_v_b0;
  float __pyx_v_b1;
  float __pyx_v_b2;
  float __pyx_v_b3;
  float __pyx_v_b4;
  float __pyx_v_b5;
  float __pyx_v_b6;
  float __pyx_v_b7;
  float __pyx_v_b8;

  /* "pyorama/math3d/mat3.pyx":195
 *         cdef float a0, a1, a2, a3, a4, a5, a6, a7, a8
 *         cdef float b0, b1, b2, b3, b4, b5, b6, b7, b8
 *         a0 = a[0][0]; a1 = a[0][1]; a2 = a[0][2];             # <<<<<<<<<<<<<<
 *         a3 = a[0][3]; a4 = a[0][4]; a5 = a[0][5];
 *         a6 = a[0][6]; a7 = a[0][7]; a8 = a[0][8];
 */
  __pyx_v_a0 = ((__pyx_v_a[0])[0]);
  __pyx_v_a1 = ((__pyx_v_a[0])[1]);
  __pyx_v_a2 = ((__pyx_v_a[0])[2]);

  /* "pyorama/math3d/mat3.pyx":196
 *         cdef float b0, b1, b2, b3, b4, b5, b6, b7, b8
 *         a0 = a[0][0]; a1 = a[0][1]; a2 = a[0][2];
 *         a3 = a[0][3]; a4 = a[0][4]; a5 = a[0][5];             # <<<<<<<<<<<<<<
 *         a6 = a[0][6]; a7 = a[0][7]; a8 = a[0][8];
 *         b0 = b[0][0]; b1 = b[0][1]; b2 = b[0][2];
 */
  __pyx_v_a3 = ((__pyx_v_a[0])[3]);
  __pyx_v_a4 = ((__pyx_v_a[0])[4]);
  __pyx_v_a5 = ((__pyx_v_a[0])[5]);

  /* "pyorama/math3d/mat3.pyx":197
 *         a0 = a[0][0]; a1 = a[0][1]; a2 = a[0][2];
 *         a3 = a[0][3]; a4 = a[0][4]; a5 = a[0][5];
 *         a6 = a[0][6]; a7 = a[0][7]; a8 = a[0][8];             # <<<<<<<<<<<<<<
 *         b0 = b[0][0]; b1 = b[0][1]; b2 = b[0][2];
 *         b3 = b[0][3]; b4 = b[0][4]; b5 = b[0][5];
 */
  __pyx_v_a6 = ((__pyx_v_a[0])[6]);
  __pyx_v_a7 = ((__pyx_v_a[0])[7]);
  __pyx_v_a8 = ((__pyx_v_a[0])[8]);

  /* "pyorama/math3d/mat3.pyx":198
 *         a3 = a[0][3]; a4 = a[0][4]; a5 = a[0][5];
 *         a6 = a[0][6]; a7 = a[0][7]; a8 = a[0][8];
 *         b0 = b[0][0]; b1 = b[0][1]; b2 = b[0][2];             # <<<<<<<<<<<<<<
 *         b3 = b[0][3]; b4 = b[0][4]; b5 = b[0][5];
 *         b6 = b[0][6]; b7 = b[0][7]; b8 = b[0][8];
 */
  __pyx_v_b0 = ((__pyx_v_b[0])[0]);
  __pyx_v_b1 = ((__pyx_v_b[0])[1]);
  __pyx_v_b2 = ((__pyx_v_b[0])[2]);

  /* "pyorama/math3d/mat3.pyx":199
 *         a6 = a[0][6]; a7 = a[0][7]; a8 = a[0][8];
 *         b0 = b[0][0]; b1 = b[0][1]; b2 = b[0][2];
 *         b3 = b[0][3]; b4 = b[0][4]; b5 = b[0][5];             # <<<<<<<<<<<<<<
 *         b6 = b[0][6]; b7 = b[0][7]; b8 = b[0][8];
 *         out[0][0] = a0*b0 + a3*b1 + a6*b2
 */
  __pyx_v_b3 = ((__pyx_v_b[0])[3]);
  __pyx_v_b4 = ((__pyx_v_b[0])[4]);
  __pyx_v_b5 = ((__pyx_v_b[0])[5]);

  /* "pyorama/math3d/mat3.pyx":200
 *         b0 = b[0][0]; b1 = b[0][1]; b2 = b[0][2];
 *         b3 = b[0][3]; b4 = b[0][4]; b5 = b[0][5];
 *         b6 = b[0][6]; b7 = b[0][7]; b8 = b[0][8];             # <<<<<<<<<<<<<<
 *         out[0][0] = a0*b0 + a3*b1 + a6*b2
 *         out[0][1] = a1*b0 + a4*b1 + a7*b2
 */
  __pyx_v_b6 = ((__pyx_v_b[0])[6]);
  __pyx_v_b7 = ((__pyx_v_b[0])[7]);
  __pyx_v_b8 = ((__pyx_v_b[0])[8]);

  /* "pyorama/math3d/mat3.pyx":201
 *         b3 = b[0][3]; b4 = b[0][4]; b5 = b[0][5];
 *         b6 = b[0][6]; b7 = b[0][7]; b8 = b[0][8];
 *         out[0][0] = a0*b0 + a3*b1 + a6*b2             # <<<<<<<<<<<<<<
 *         out[0][1] = a1*b0 + a4*b1 + a7*b2
 *         out[0][2] = a2*b0 + a5*b1 + a8*b2
 */
  ((__pyx_v_out[0])[0]) = (((__pyx_v_a0 * __pyx_v_b0) + (__pyx_v_a3 * __pyx_v_b1)) + (__pyx_v_a6 * __pyx_v_b2));

  /* "pyorama/math3d/mat3.pyx":202
 *         b6 = b[0][6]; b7 = b[0][7]; b8 = b[0][8];
 *         out[0][0] = a0*b0 + a3*b1 + a6*b2
 *         out[0][1] = a1*b0 + a4*b1 + a7*b2             # <<<<<<<<<<<<<<
 *         out[0][2] = a2*b0 + a5*b1 + a8*b2
 *         out[0][3] = a0*b3 + a3*b4 + a6*b5
 */
  ((__pyx_v_out[0])[1]) = (((__pyx_v_a1 * __pyx_v_b0) + (__pyx_v_a4 * __pyx_v_b1)) + (__pyx_v_a7 * __pyx_v_b2));

  /* "pyorama/math3d/mat3.pyx":203
 *         out[0][0] = a0*b0 + a3*b1 + a6*b2
 *         out[0][1] = a1*b0 + a4*b1 + a7*b2
 *         out[0][2] = a2*b0 + a5*b1 + a8*b2             # <<<<<<<<<<<<<<
 *         out[0][3] = a0*b3 + a3*b4 + a6*b5
 *         out[0][4] = a1*b3 + a4*b4 + a7*b5
 */
  ((__pyx_v_out[0])[2]) = (((__pyx_v_a2 * __pyx_v_b0) + (__pyx_v_a5 * __pyx_v_b1)) + (__pyx_v_a8 * __pyx_v_b2));

  /* "pyorama/math3d/mat3.pyx":204
 *         out[0][1] = a1*b0 + a4*b1 + a7*b2
 *         out[0][2] = a2*b0 + a5*b1 + a8*b2
 *         out[0][3] = a0*b3 + a3*b4 + a6*b5             # <<<<<<<<<<<<<<
 *         out[0][4] = a1*b3 + a4*b4 + a7*b5
 *         out[0][5] = a2*b3 + a5*b4 + a8*b5
 */
  ((__pyx_v_out[0])[3]) = (((__pyx_v_a0 * __pyx_v_b3) + (__pyx_v_a3 * __pyx_v_b4)) + (__pyx_v_a6 * __pyx_v_b5));

  /* "pyorama/math3d/mat3.pyx":205
 *         out[0][2] = a2*b0 + a5*b1 + a8*b2
 *         out[0][3] = a0*b3 + a3*b4 + a6*b5
 *         out[0][4] = a1*b3 + a4*b4 + a7*b5             # <<<<<<<<<<<<<<
 *         out[0][5] = a2*b3 + a5*b4 + a8*b5
 *         out[0][6] = a0*b6 + a3*b7 + a6*b8
 */
  ((__pyx_v_out[0])[4]) = (((__pyx_v_a1 * __pyx_v_b3) + (__pyx_v_a4 * __pyx_v_b4)) + (__pyx_v_a7 * __pyx_v_b5));

  /* "pyorama/math3d/mat3.pyx":206
 *         out[0][3] = a0*b3 + a3*b4 + a6*b5
 *         out[0][4] = a1*b3 + a4*b4 + a7*b5
 *         out[0][5] = a2*b3 + a5*b4 + a8*b5             # <<<<<<<<<<<<<<
 *         out[0][6] = a0*b6 + a3*b7 + a6*b8
 *         out[0][7] = a1*b6 + a4*b7 + a7*b8
 */
  ((__pyx_v_out[0])[5]) = (((__pyx_v_a2 * __pyx_v_b3) + (__pyx_v_a5 * __pyx_v_b4)) + (__pyx_v_a8 * __pyx_v_b5));

  /* "pyorama/math3d/mat3.pyx":207
 *         out[0][4] = a1*b3 + a4*b4 + a7*b5
 *         out[0][5] = a2*b3 + a5*b4 + a8*b5
 *         out[0][6] = a0*b6 + a3*b7 + a6*b8             # <<<<<<<<<<<<<<
 *         out[0][7] = a1*b6 + a4*b7 + a7*b8
 *         out[0][8] = a2*b6 + a5*b7 + a8*b8
 */
  ((__pyx_v_out[0])[6]) = (((__pyx_v_a0 * __pyx_v_b6) + (__pyx_v_a3 * __pyx_v_b7)) + (__pyx_v_a6 * __pyx_v_b8));

  /* "pyorama/math3d/mat3.pyx":208
 *         out[0][5] = a2*b3 + a5*b4 + a8*b5
 *         out[0][6] = a0*b6 + a3*b7 + a6*b8
 *         out[0][7] = a1*b6 + a4*b7 + a7*b8             # <<<<<<<<<<<<<<
 *         out[0][8] = a2*b6 + a5*b7 + a8*b8
 * 
 */
  ((__pyx_v_out[0])[7]) = (((__pyx_v_a1 * __pyx_v_b6) + (__pyx_v_a4 * __pyx_v_b7)) + (__pyx_v_a7 * __pyx_v_b8));

  /* "pyorama/math3d/mat3.pyx":209
 *         out[0][6] = a0*b6 + a3*b7 + a6*b8
 *         out[0][7] = a1*b6 + a4*b7 + a7*b8
 *         out[0][8] = a2*b6 + a5*b7 + a8*b8             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  ((__pyx_v_out[0])[8]) = (((__pyx_v_a2 * __pyx_v_b6) + (__pyx_v_a5 * __pyx_v_b7)) + (__pyx_v_a8 * __pyx_v_b8));

  /* "pyorama/math3d/mat3.pyx":192
 * 
 *     @staticmethod
 *     cdef inline void c_dot(Mat3C *out, Mat3C *a, Mat3C *b) nogil:             # <<<<<<<<<<<<<<
 *         cdef float a0, a1, a2, a3, a4, a5, a6, a7, a8
 *         cdef float b0, b1, b2, b3, b4, b5, b6, b7, b8
 */

  /* function exit code */
}

/* "pyorama/math3d/mat3.pyx":212
 * 
 *     @staticmethod
 *     cdef inline bint c_equals(Mat3C *a, Mat3C *b) nogil:             # <<<<<<<<<<<<<<
 *         cdef size_t i = 0
 *         cdef size_t size = 9
 */

static CYTHON_INLINE int __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_equals(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_b) {
  size_t __pyx_v_i;
  size_t __pyx_v_size;
  int __pyx_r;
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  int __pyx_t_4;

  /* "pyorama/math3d/mat3.pyx":213
 *     @staticmethod
 *     cdef inline bint c_equals(Mat3C *a, Mat3C *b) nogil:
 *         cdef size_t i = 0             # <<<<<<<<<<<<<<
 *         cdef size_t size = 9
 *         for i in xrange(size):
 */
  __pyx_v_i = 0;

  /* "pyorama/math3d/mat3.pyx":214
 *     cdef inline bint c_equals(Mat3C *a, Mat3C *b) nogil:
 *         cdef size_t i = 0
 *         cdef size_t size = 9             # <<<<<<<<<<<<<<
 *         for i in xrange(size):
 *             if a[0][i] != b[0][i]:
 */
  __pyx_v_size = 9;

  /* "pyorama/math3d/mat3.pyx":215
 *         cdef size_t i = 0
 *         cdef size_t size = 9
 *         for i in xrange(size):             # <<<<<<<<<<<<<<
 *             if a[0][i] != b[0][i]:
 *                 return False
 */
  __pyx_t_1 = __pyx_v_size;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "pyorama/math3d/mat3.pyx":216
 *         cdef size_t size = 9
 *         for i in xrange(size):
 *             if a[0][i] != b[0][i]:             # <<<<<<<<<<<<<<
 *                 return False
 *         return True
 */
    __pyx_t_4 = ((((__pyx_v_a[0])[__pyx_v_i]) != ((__pyx_v_b[0])[__pyx_v_i])) != 0);
    if (__pyx_t_4) {

      /* "pyorama/math3d/mat3.pyx":217
 *         for i in xrange(size):
 *             if a[0][i] != b[0][i]:
 *                 return False             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "pyorama/math3d/mat3.pyx":216
 *         cdef size_t size = 9
 *         for i in xrange(size):
 *             if a[0][i] != b[0][i]:             # <<<<<<<<<<<<<<
 *                 return False
 *         return True
 */
    }
  }

  /* "pyorama/math3d/mat3.pyx":218
 *             if a[0][i] != b[0][i]:
 *                 return False
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "pyorama/math3d/mat3.pyx":212
 * 
 *     @staticmethod
 *     cdef inline bint c_equals(Mat3C *a, Mat3C *b) nogil:             # <<<<<<<<<<<<<<
 *         cdef size_t i = 0
 *         cdef size_t size = 9
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":221
 * 
 *     @staticmethod
 *     cdef inline void c_from_mat4(Mat3C *out, Mat4C *a) nogil:             # <<<<<<<<<<<<<<
 *         cdef int *indices = [0, 1, 2, 4, 5, 6, 8, 9, 10]
 *         cdef size_t i = 0
 */

static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_mat4(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat4C *__pyx_v_a) {
  int *__pyx_v_indices;
  size_t __pyx_v_i;
  size_t __pyx_v_size;
  int __pyx_t_1[9];
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;

  /* "pyorama/math3d/mat3.pyx":222
 *     @staticmethod
 *     cdef inline void c_from_mat4(Mat3C *out, Mat4C *a) nogil:
 *         cdef int *indices = [0, 1, 2, 4, 5, 6, 8, 9, 10]             # <<<<<<<<<<<<<<
 *         cdef size_t i = 0
 *         cdef size_t size = 9
 */
  __pyx_t_1[0] = 0;
  __pyx_t_1[1] = 1;
  __pyx_t_1[2] = 2;
  __pyx_t_1[3] = 4;
  __pyx_t_1[4] = 5;
  __pyx_t_1[5] = 6;
  __pyx_t_1[6] = 8;
  __pyx_t_1[7] = 9;
  __pyx_t_1[8] = 10;
  __pyx_v_indices = __pyx_t_1;

  /* "pyorama/math3d/mat3.pyx":223
 *     cdef inline void c_from_mat4(Mat3C *out, Mat4C *a) nogil:
 *         cdef int *indices = [0, 1, 2, 4, 5, 6, 8, 9, 10]
 *         cdef size_t i = 0             # <<<<<<<<<<<<<<
 *         cdef size_t size = 9
 *         for i in xrange(size):
 */
  __pyx_v_i = 0;

  /* "pyorama/math3d/mat3.pyx":224
 *         cdef int *indices = [0, 1, 2, 4, 5, 6, 8, 9, 10]
 *         cdef size_t i = 0
 *         cdef size_t size = 9             # <<<<<<<<<<<<<<
 *         for i in xrange(size):
 *             out[0][i] = a[0][indices[i]]
 */
  __pyx_v_size = 9;

  /* "pyorama/math3d/mat3.pyx":225
 *         cdef size_t i = 0
 *         cdef size_t size = 9
 *         for i in xrange(size):             # <<<<<<<<<<<<<<
 *             out[0][i] = a[0][indices[i]]
 * 
 */
  __pyx_t_2 = __pyx_v_size;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "pyorama/math3d/mat3.pyx":226
 *         cdef size_t size = 9
 *         for i in xrange(size):
 *             out[0][i] = a[0][indices[i]]             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    ((__pyx_v_out[0])[__pyx_v_i]) = ((__pyx_v_a[0])[(__pyx_v_indices[__pyx_v_i])]);
  }

  /* "pyorama/math3d/mat3.pyx":221
 * 
 *     @staticmethod
 *     cdef inline void c_from_mat4(Mat3C *out, Mat4C *a) nogil:             # <<<<<<<<<<<<<<
 *         cdef int *indices = [0, 1, 2, 4, 5, 6, 8, 9, 10]
 *         cdef size_t i = 0
 */

  /* function exit code */
}

/* "pyorama/math3d/mat3.pyx":229
 * 
 *     @staticmethod
 *     cdef inline void c_from_quat(Mat3C *out, QuatC *a) nogil:             # <<<<<<<<<<<<<<
 *         cdef float x = a[0][0]
 *         cdef float y = a[0][1]
 */

static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_quat(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_QuatC *__pyx_v_a) {
  float __pyx_v_x;
  float __pyx_v_y;
  float __pyx_v_z;
  float __pyx_v_w;
  float __pyx_v_x2;
  float __pyx_v_y2;
  float __pyx_v_z2;
  float __pyx_v_xx;
  float __pyx_v_yx;
  float __pyx_v_yy;
  float __pyx_v_zx;
  float __pyx_v_zy;
  float __pyx_v_zz;
  float __pyx_v_wx;
  float __pyx_v_wy;
  float __pyx_v_wz;

  /* "pyorama/math3d/mat3.pyx":230
 *     @staticmethod
 *     cdef inline void c_from_quat(Mat3C *out, QuatC *a) nogil:
 *         cdef float x = a[0][0]             # <<<<<<<<<<<<<<
 *         cdef float y = a[0][1]
 *         cdef float z = a[0][2]
 */
  __pyx_v_x = ((__pyx_v_a[0])[0]);

  /* "pyorama/math3d/mat3.pyx":231
 *     cdef inline void c_from_quat(Mat3C *out, QuatC *a) nogil:
 *         cdef float x = a[0][0]
 *         cdef float y = a[0][1]             # <<<<<<<<<<<<<<
 *         cdef float z = a[0][2]
 *         cdef float w = a[0][3]
 */
  __pyx_v_y = ((__pyx_v_a[0])[1]);

  /* "pyorama/math3d/mat3.pyx":232
 *         cdef float x = a[0][0]
 *         cdef float y = a[0][1]
 *         cdef float z = a[0][2]             # <<<<<<<<<<<<<<
 *         cdef float w = a[0][3]
 * 
 */
  __pyx_v_z = ((__pyx_v_a[0])[2]);

  /* "pyorama/math3d/mat3.pyx":233
 *         cdef float y = a[0][1]
 *         cdef float z = a[0][2]
 *         cdef float w = a[0][3]             # <<<<<<<<<<<<<<
 * 
 *         cdef float x2 = x + x
 */
  __pyx_v_w = ((__pyx_v_a[0])[3]);

  /* "pyorama/math3d/mat3.pyx":235
 *         cdef float w = a[0][3]
 * 
 *         cdef float x2 = x + x             # <<<<<<<<<<<<<<
 *         cdef float y2 = y + y
 *         cdef float z2 = z + z
 */
  __pyx_v_x2 = (__pyx_v_x + __pyx_v_x);

  /* "pyorama/math3d/mat3.pyx":236
 * 
 *         cdef float x2 = x + x
 *         cdef float y2 = y + y             # <<<<<<<<<<<<<<
 *         cdef float z2 = z + z
 *         cdef float xx = x * x2
 */
  __pyx_v_y2 = (__pyx_v_y + __pyx_v_y);

  /* "pyorama/math3d/mat3.pyx":237
 *         cdef float x2 = x + x
 *         cdef float y2 = y + y
 *         cdef float z2 = z + z             # <<<<<<<<<<<<<<
 *         cdef float xx = x * x2
 *         cdef float yx = y * x2
 */
  __pyx_v_z2 = (__pyx_v_z + __pyx_v_z);

  /* "pyorama/math3d/mat3.pyx":238
 *         cdef float y2 = y + y
 *         cdef float z2 = z + z
 *         cdef float xx = x * x2             # <<<<<<<<<<<<<<
 *         cdef float yx = y * x2
 *         cdef float yy = y * y2
 */
  __pyx_v_xx = (__pyx_v_x * __pyx_v_x2);

  /* "pyorama/math3d/mat3.pyx":239
 *         cdef float z2 = z + z
 *         cdef float xx = x * x2
 *         cdef float yx = y * x2             # <<<<<<<<<<<<<<
 *         cdef float yy = y * y2
 *         cdef float zx = z * x2
 */
  __pyx_v_yx = (__pyx_v_y * __pyx_v_x2);

  /* "pyorama/math3d/mat3.pyx":240
 *         cdef float xx = x * x2
 *         cdef float yx = y * x2
 *         cdef float yy = y * y2             # <<<<<<<<<<<<<<
 *         cdef float zx = z * x2
 *         cdef float zy = z * y2
 */
  __pyx_v_yy = (__pyx_v_y * __pyx_v_y2);

  /* "pyorama/math3d/mat3.pyx":241
 *         cdef float yx = y * x2
 *         cdef float yy = y * y2
 *         cdef float zx = z * x2             # <<<<<<<<<<<<<<
 *         cdef float zy = z * y2
 *         cdef float zz = z * z2
 */
  __pyx_v_zx = (__pyx_v_z * __pyx_v_x2);

  /* "pyorama/math3d/mat3.pyx":242
 *         cdef float yy = y * y2
 *         cdef float zx = z * x2
 *         cdef float zy = z * y2             # <<<<<<<<<<<<<<
 *         cdef float zz = z * z2
 *         cdef float wx = w * x2
 */
  __pyx_v_zy = (__pyx_v_z * __pyx_v_y2);

  /* "pyorama/math3d/mat3.pyx":243
 *         cdef float zx = z * x2
 *         cdef float zy = z * y2
 *         cdef float zz = z * z2             # <<<<<<<<<<<<<<
 *         cdef float wx = w * x2
 *         cdef float wy = w * y2
 */
  __pyx_v_zz = (__pyx_v_z * __pyx_v_z2);

  /* "pyorama/math3d/mat3.pyx":244
 *         cdef float zy = z * y2
 *         cdef float zz = z * z2
 *         cdef float wx = w * x2             # <<<<<<<<<<<<<<
 *         cdef float wy = w * y2
 *         cdef float wz = w * z2
 */
  __pyx_v_wx = (__pyx_v_w * __pyx_v_x2);

  /* "pyorama/math3d/mat3.pyx":245
 *         cdef float zz = z * z2
 *         cdef float wx = w * x2
 *         cdef float wy = w * y2             # <<<<<<<<<<<<<<
 *         cdef float wz = w * z2
 * 
 */
  __pyx_v_wy = (__pyx_v_w * __pyx_v_y2);

  /* "pyorama/math3d/mat3.pyx":246
 *         cdef float wx = w * x2
 *         cdef float wy = w * y2
 *         cdef float wz = w * z2             # <<<<<<<<<<<<<<
 * 
 *         out[0][0] = 1 - yy - zz
 */
  __pyx_v_wz = (__pyx_v_w * __pyx_v_z2);

  /* "pyorama/math3d/mat3.pyx":248
 *         cdef float wz = w * z2
 * 
 *         out[0][0] = 1 - yy - zz             # <<<<<<<<<<<<<<
 *         out[0][3] = yx - wz
 *         out[0][6] = zx + wy
 */
  ((__pyx_v_out[0])[0]) = ((1.0 - __pyx_v_yy) - __pyx_v_zz);

  /* "pyorama/math3d/mat3.pyx":249
 * 
 *         out[0][0] = 1 - yy - zz
 *         out[0][3] = yx - wz             # <<<<<<<<<<<<<<
 *         out[0][6] = zx + wy
 *         out[0][1] = yx + wz
 */
  ((__pyx_v_out[0])[3]) = (__pyx_v_yx - __pyx_v_wz);

  /* "pyorama/math3d/mat3.pyx":250
 *         out[0][0] = 1 - yy - zz
 *         out[0][3] = yx - wz
 *         out[0][6] = zx + wy             # <<<<<<<<<<<<<<
 *         out[0][1] = yx + wz
 *         out[0][4] = 1 - xx - zz
 */
  ((__pyx_v_out[0])[6]) = (__pyx_v_zx + __pyx_v_wy);

  /* "pyorama/math3d/mat3.pyx":251
 *         out[0][3] = yx - wz
 *         out[0][6] = zx + wy
 *         out[0][1] = yx + wz             # <<<<<<<<<<<<<<
 *         out[0][4] = 1 - xx - zz
 *         out[0][7] = zy - wx
 */
  ((__pyx_v_out[0])[1]) = (__pyx_v_yx + __pyx_v_wz);

  /* "pyorama/math3d/mat3.pyx":252
 *         out[0][6] = zx + wy
 *         out[0][1] = yx + wz
 *         out[0][4] = 1 - xx - zz             # <<<<<<<<<<<<<<
 *         out[0][7] = zy - wx
 *         out[0][2] = zx - wy
 */
  ((__pyx_v_out[0])[4]) = ((1.0 - __pyx_v_xx) - __pyx_v_zz);

  /* "pyorama/math3d/mat3.pyx":253
 *         out[0][1] = yx + wz
 *         out[0][4] = 1 - xx - zz
 *         out[0][7] = zy - wx             # <<<<<<<<<<<<<<
 *         out[0][2] = zx - wy
 *         out[0][5] = zy + wx
 */
  ((__pyx_v_out[0])[7]) = (__pyx_v_zy - __pyx_v_wx);

  /* "pyorama/math3d/mat3.pyx":254
 *         out[0][4] = 1 - xx - zz
 *         out[0][7] = zy - wx
 *         out[0][2] = zx - wy             # <<<<<<<<<<<<<<
 *         out[0][5] = zy + wx
 *         out[0][8] = 1 - xx - yy
 */
  ((__pyx_v_out[0])[2]) = (__pyx_v_zx - __pyx_v_wy);

  /* "pyorama/math3d/mat3.pyx":255
 *         out[0][7] = zy - wx
 *         out[0][2] = zx - wy
 *         out[0][5] = zy + wx             # <<<<<<<<<<<<<<
 *         out[0][8] = 1 - xx - yy
 * 
 */
  ((__pyx_v_out[0])[5]) = (__pyx_v_zy + __pyx_v_wx);

  /* "pyorama/math3d/mat3.pyx":256
 *         out[0][2] = zx - wy
 *         out[0][5] = zy + wx
 *         out[0][8] = 1 - xx - yy             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  ((__pyx_v_out[0])[8]) = ((1.0 - __pyx_v_xx) - __pyx_v_yy);

  /* "pyorama/math3d/mat3.pyx":229
 * 
 *     @staticmethod
 *     cdef inline void c_from_quat(Mat3C *out, QuatC *a) nogil:             # <<<<<<<<<<<<<<
 *         cdef float x = a[0][0]
 *         cdef float y = a[0][1]
 */

  /* function exit code */
}

/* "pyorama/math3d/mat3.pyx":259
 * 
 *     @staticmethod
 *     cdef inline void c_from_rotation(Mat3C *out, float radians) nogil:             # <<<<<<<<<<<<<<
 *         cdef float c = c_math.cos(radians)
 *         cdef float s = c_math.sin(radians)
 */

static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_rotation(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, float __pyx_v_radians) {
  float __pyx_v_c;
  float __pyx_v_s;

  /* "pyorama/math3d/mat3.pyx":260
 *     @staticmethod
 *     cdef inline void c_from_rotation(Mat3C *out, float radians) nogil:
 *         cdef float c = c_math.cos(radians)             # <<<<<<<<<<<<<<
 *         cdef float s = c_math.sin(radians)
 *         out[0][0] = c
 */
  __pyx_v_c = cos(__pyx_v_radians);

  /* "pyorama/math3d/mat3.pyx":261
 *     cdef inline void c_from_rotation(Mat3C *out, float radians) nogil:
 *         cdef float c = c_math.cos(radians)
 *         cdef float s = c_math.sin(radians)             # <<<<<<<<<<<<<<
 *         out[0][0] = c
 *         out[0][1] = s
 */
  __pyx_v_s = sin(__pyx_v_radians);

  /* "pyorama/math3d/mat3.pyx":262
 *         cdef float c = c_math.cos(radians)
 *         cdef float s = c_math.sin(radians)
 *         out[0][0] = c             # <<<<<<<<<<<<<<
 *         out[0][1] = s
 *         out[0][2] = 0
 */
  ((__pyx_v_out[0])[0]) = __pyx_v_c;

  /* "pyorama/math3d/mat3.pyx":263
 *         cdef float s = c_math.sin(radians)
 *         out[0][0] = c
 *         out[0][1] = s             # <<<<<<<<<<<<<<
 *         out[0][2] = 0
 *         out[0][3] = -s
 */
  ((__pyx_v_out[0])[1]) = __pyx_v_s;

  /* "pyorama/math3d/mat3.pyx":264
 *         out[0][0] = c
 *         out[0][1] = s
 *         out[0][2] = 0             # <<<<<<<<<<<<<<
 *         out[0][3] = -s
 *         out[0][4] = c
 */
  ((__pyx_v_out[0])[2]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":265
 *         out[0][1] = s
 *         out[0][2] = 0
 *         out[0][3] = -s             # <<<<<<<<<<<<<<
 *         out[0][4] = c
 *         out[0][5] = 0
 */
  ((__pyx_v_out[0])[3]) = (-__pyx_v_s);

  /* "pyorama/math3d/mat3.pyx":266
 *         out[0][2] = 0
 *         out[0][3] = -s
 *         out[0][4] = c             # <<<<<<<<<<<<<<
 *         out[0][5] = 0
 *         out[0][6] = 0
 */
  ((__pyx_v_out[0])[4]) = __pyx_v_c;

  /* "pyorama/math3d/mat3.pyx":267
 *         out[0][3] = -s
 *         out[0][4] = c
 *         out[0][5] = 0             # <<<<<<<<<<<<<<
 *         out[0][6] = 0
 *         out[0][7] = 0
 */
  ((__pyx_v_out[0])[5]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":268
 *         out[0][4] = c
 *         out[0][5] = 0
 *         out[0][6] = 0             # <<<<<<<<<<<<<<
 *         out[0][7] = 0
 *         out[0][8] = 1
 */
  ((__pyx_v_out[0])[6]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":269
 *         out[0][5] = 0
 *         out[0][6] = 0
 *         out[0][7] = 0             # <<<<<<<<<<<<<<
 *         out[0][8] = 1
 * 
 */
  ((__pyx_v_out[0])[7]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":270
 *         out[0][6] = 0
 *         out[0][7] = 0
 *         out[0][8] = 1             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  ((__pyx_v_out[0])[8]) = 1.0;

  /* "pyorama/math3d/mat3.pyx":259
 * 
 *     @staticmethod
 *     cdef inline void c_from_rotation(Mat3C *out, float radians) nogil:             # <<<<<<<<<<<<<<
 *         cdef float c = c_math.cos(radians)
 *         cdef float s = c_math.sin(radians)
 */

  /* function exit code */
}

/* "pyorama/math3d/mat3.pyx":273
 * 
 *     @staticmethod
 *     cdef inline void c_from_scaling(Mat3C *out, Vec2C *scale) nogil:             # <<<<<<<<<<<<<<
 *         out[0][0] = scale[0][0]
 *         out[0][1] = 0
 */

static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_scaling(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Vec2C *__pyx_v_scale) {

  /* "pyorama/math3d/mat3.pyx":274
 *     @staticmethod
 *     cdef inline void c_from_scaling(Mat3C *out, Vec2C *scale) nogil:
 *         out[0][0] = scale[0][0]             # <<<<<<<<<<<<<<
 *         out[0][1] = 0
 *         out[0][2] = 0
 */
  ((__pyx_v_out[0])[0]) = ((__pyx_v_scale[0])[0]);

  /* "pyorama/math3d/mat3.pyx":275
 *     cdef inline void c_from_scaling(Mat3C *out, Vec2C *scale) nogil:
 *         out[0][0] = scale[0][0]
 *         out[0][1] = 0             # <<<<<<<<<<<<<<
 *         out[0][2] = 0
 *         out[0][3] = 0
 */
  ((__pyx_v_out[0])[1]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":276
 *         out[0][0] = scale[0][0]
 *         out[0][1] = 0
 *         out[0][2] = 0             # <<<<<<<<<<<<<<
 *         out[0][3] = 0
 *         out[0][4] = scale[0][1]
 */
  ((__pyx_v_out[0])[2]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":277
 *         out[0][1] = 0
 *         out[0][2] = 0
 *         out[0][3] = 0             # <<<<<<<<<<<<<<
 *         out[0][4] = scale[0][1]
 *         out[0][5] = 0
 */
  ((__pyx_v_out[0])[3]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":278
 *         out[0][2] = 0
 *         out[0][3] = 0
 *         out[0][4] = scale[0][1]             # <<<<<<<<<<<<<<
 *         out[0][5] = 0
 *         out[0][6] = 0
 */
  ((__pyx_v_out[0])[4]) = ((__pyx_v_scale[0])[1]);

  /* "pyorama/math3d/mat3.pyx":279
 *         out[0][3] = 0
 *         out[0][4] = scale[0][1]
 *         out[0][5] = 0             # <<<<<<<<<<<<<<
 *         out[0][6] = 0
 *         out[0][7] = 0
 */
  ((__pyx_v_out[0])[5]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":280
 *         out[0][4] = scale[0][1]
 *         out[0][5] = 0
 *         out[0][6] = 0             # <<<<<<<<<<<<<<
 *         out[0][7] = 0
 *         out[0][8] = 1
 */
  ((__pyx_v_out[0])[6]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":281
 *         out[0][5] = 0
 *         out[0][6] = 0
 *         out[0][7] = 0             # <<<<<<<<<<<<<<
 *         out[0][8] = 1
 * 
 */
  ((__pyx_v_out[0])[7]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":282
 *         out[0][6] = 0
 *         out[0][7] = 0
 *         out[0][8] = 1             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  ((__pyx_v_out[0])[8]) = 1.0;

  /* "pyorama/math3d/mat3.pyx":273
 * 
 *     @staticmethod
 *     cdef inline void c_from_scaling(Mat3C *out, Vec2C *scale) nogil:             # <<<<<<<<<<<<<<
 *         out[0][0] = scale[0][0]
 *         out[0][1] = 0
 */

  /* function exit code */
}

/* "pyorama/math3d/mat3.pyx":285
 * 
 *     @staticmethod
 *     cdef inline void c_from_skewing(Mat3C *out, Vec2C *factor) nogil:             # <<<<<<<<<<<<<<
 *         out[0][0] = 1
 *         out[0][1] = c_math.tan(factor[0][0])
 */

static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_skewing(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Vec2C *__pyx_v_factor) {

  /* "pyorama/math3d/mat3.pyx":286
 *     @staticmethod
 *     cdef inline void c_from_skewing(Mat3C *out, Vec2C *factor) nogil:
 *         out[0][0] = 1             # <<<<<<<<<<<<<<
 *         out[0][1] = c_math.tan(factor[0][0])
 *         out[0][2] = 0
 */
  ((__pyx_v_out[0])[0]) = 1.0;

  /* "pyorama/math3d/mat3.pyx":287
 *     cdef inline void c_from_skewing(Mat3C *out, Vec2C *factor) nogil:
 *         out[0][0] = 1
 *         out[0][1] = c_math.tan(factor[0][0])             # <<<<<<<<<<<<<<
 *         out[0][2] = 0
 *         out[0][3] = c_math.tan(factor[0][1])
 */
  ((__pyx_v_out[0])[1]) = tan(((__pyx_v_factor[0])[0]));

  /* "pyorama/math3d/mat3.pyx":288
 *         out[0][0] = 1
 *         out[0][1] = c_math.tan(factor[0][0])
 *         out[0][2] = 0             # <<<<<<<<<<<<<<
 *         out[0][3] = c_math.tan(factor[0][1])
 *         out[0][4] = 1
 */
  ((__pyx_v_out[0])[2]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":289
 *         out[0][1] = c_math.tan(factor[0][0])
 *         out[0][2] = 0
 *         out[0][3] = c_math.tan(factor[0][1])             # <<<<<<<<<<<<<<
 *         out[0][4] = 1
 *         out[0][5] = 0
 */
  ((__pyx_v_out[0])[3]) = tan(((__pyx_v_factor[0])[1]));

  /* "pyorama/math3d/mat3.pyx":290
 *         out[0][2] = 0
 *         out[0][3] = c_math.tan(factor[0][1])
 *         out[0][4] = 1             # <<<<<<<<<<<<<<
 *         out[0][5] = 0
 *         out[0][6] = 0
 */
  ((__pyx_v_out[0])[4]) = 1.0;

  /* "pyorama/math3d/mat3.pyx":291
 *         out[0][3] = c_math.tan(factor[0][1])
 *         out[0][4] = 1
 *         out[0][5] = 0             # <<<<<<<<<<<<<<
 *         out[0][6] = 0
 *         out[0][7] = 0
 */
  ((__pyx_v_out[0])[5]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":292
 *         out[0][4] = 1
 *         out[0][5] = 0
 *         out[0][6] = 0             # <<<<<<<<<<<<<<
 *         out[0][7] = 0
 *         out[0][8] = 1
 */
  ((__pyx_v_out[0])[6]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":293
 *         out[0][5] = 0
 *         out[0][6] = 0
 *         out[0][7] = 0             # <<<<<<<<<<<<<<
 *         out[0][8] = 1
 * 
 */
  ((__pyx_v_out[0])[7]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":294
 *         out[0][6] = 0
 *         out[0][7] = 0
 *         out[0][8] = 1             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  ((__pyx_v_out[0])[8]) = 1.0;

  /* "pyorama/math3d/mat3.pyx":285
 * 
 *     @staticmethod
 *     cdef inline void c_from_skewing(Mat3C *out, Vec2C *factor) nogil:             # <<<<<<<<<<<<<<
 *         out[0][0] = 1
 *         out[0][1] = c_math.tan(factor[0][0])
 */

  /* function exit code */
}

/* "pyorama/math3d/mat3.pyx":297
 * 
 *     @staticmethod
 *     cdef inline void c_from_skewing_x(Mat3C *out, float radians) nogil:             # <<<<<<<<<<<<<<
 *         out[0][0] = 1
 *         out[0][1] = 0
 */

static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_skewing_x(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, float __pyx_v_radians) {

  /* "pyorama/math3d/mat3.pyx":298
 *     @staticmethod
 *     cdef inline void c_from_skewing_x(Mat3C *out, float radians) nogil:
 *         out[0][0] = 1             # <<<<<<<<<<<<<<
 *         out[0][1] = 0
 *         out[0][2] = 0
 */
  ((__pyx_v_out[0])[0]) = 1.0;

  /* "pyorama/math3d/mat3.pyx":299
 *     cdef inline void c_from_skewing_x(Mat3C *out, float radians) nogil:
 *         out[0][0] = 1
 *         out[0][1] = 0             # <<<<<<<<<<<<<<
 *         out[0][2] = 0
 *         out[0][3] = c_math.tan(radians)
 */
  ((__pyx_v_out[0])[1]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":300
 *         out[0][0] = 1
 *         out[0][1] = 0
 *         out[0][2] = 0             # <<<<<<<<<<<<<<
 *         out[0][3] = c_math.tan(radians)
 *         out[0][4] = 1
 */
  ((__pyx_v_out[0])[2]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":301
 *         out[0][1] = 0
 *         out[0][2] = 0
 *         out[0][3] = c_math.tan(radians)             # <<<<<<<<<<<<<<
 *         out[0][4] = 1
 *         out[0][5] = 0
 */
  ((__pyx_v_out[0])[3]) = tan(__pyx_v_radians);

  /* "pyorama/math3d/mat3.pyx":302
 *         out[0][2] = 0
 *         out[0][3] = c_math.tan(radians)
 *         out[0][4] = 1             # <<<<<<<<<<<<<<
 *         out[0][5] = 0
 *         out[0][6] = 0
 */
  ((__pyx_v_out[0])[4]) = 1.0;

  /* "pyorama/math3d/mat3.pyx":303
 *         out[0][3] = c_math.tan(radians)
 *         out[0][4] = 1
 *         out[0][5] = 0             # <<<<<<<<<<<<<<
 *         out[0][6] = 0
 *         out[0][7] = 0
 */
  ((__pyx_v_out[0])[5]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":304
 *         out[0][4] = 1
 *         out[0][5] = 0
 *         out[0][6] = 0             # <<<<<<<<<<<<<<
 *         out[0][7] = 0
 *         out[0][8] = 1
 */
  ((__pyx_v_out[0])[6]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":305
 *         out[0][5] = 0
 *         out[0][6] = 0
 *         out[0][7] = 0             # <<<<<<<<<<<<<<
 *         out[0][8] = 1
 * 
 */
  ((__pyx_v_out[0])[7]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":306
 *         out[0][6] = 0
 *         out[0][7] = 0
 *         out[0][8] = 1             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  ((__pyx_v_out[0])[8]) = 1.0;

  /* "pyorama/math3d/mat3.pyx":297
 * 
 *     @staticmethod
 *     cdef inline void c_from_skewing_x(Mat3C *out, float radians) nogil:             # <<<<<<<<<<<<<<
 *         out[0][0] = 1
 *         out[0][1] = 0
 */

  /* function exit code */
}

/* "pyorama/math3d/mat3.pyx":309
 * 
 *     @staticmethod
 *     cdef inline void c_from_skewing_y(Mat3C *out, float radians) nogil:             # <<<<<<<<<<<<<<
 *         out[0][0] = 1
 *         out[0][1] = c_math.tan(radians)
 */

static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_skewing_y(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, float __pyx_v_radians) {

  /* "pyorama/math3d/mat3.pyx":310
 *     @staticmethod
 *     cdef inline void c_from_skewing_y(Mat3C *out, float radians) nogil:
 *         out[0][0] = 1             # <<<<<<<<<<<<<<
 *         out[0][1] = c_math.tan(radians)
 *         out[0][2] = 0
 */
  ((__pyx_v_out[0])[0]) = 1.0;

  /* "pyorama/math3d/mat3.pyx":311
 *     cdef inline void c_from_skewing_y(Mat3C *out, float radians) nogil:
 *         out[0][0] = 1
 *         out[0][1] = c_math.tan(radians)             # <<<<<<<<<<<<<<
 *         out[0][2] = 0
 *         out[0][3] = 0
 */
  ((__pyx_v_out[0])[1]) = tan(__pyx_v_radians);

  /* "pyorama/math3d/mat3.pyx":312
 *         out[0][0] = 1
 *         out[0][1] = c_math.tan(radians)
 *         out[0][2] = 0             # <<<<<<<<<<<<<<
 *         out[0][3] = 0
 *         out[0][4] = 1
 */
  ((__pyx_v_out[0])[2]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":313
 *         out[0][1] = c_math.tan(radians)
 *         out[0][2] = 0
 *         out[0][3] = 0             # <<<<<<<<<<<<<<
 *         out[0][4] = 1
 *         out[0][5] = 0
 */
  ((__pyx_v_out[0])[3]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":314
 *         out[0][2] = 0
 *         out[0][3] = 0
 *         out[0][4] = 1             # <<<<<<<<<<<<<<
 *         out[0][5] = 0
 *         out[0][6] = 0
 */
  ((__pyx_v_out[0])[4]) = 1.0;

  /* "pyorama/math3d/mat3.pyx":315
 *         out[0][3] = 0
 *         out[0][4] = 1
 *         out[0][5] = 0             # <<<<<<<<<<<<<<
 *         out[0][6] = 0
 *         out[0][7] = 0
 */
  ((__pyx_v_out[0])[5]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":316
 *         out[0][4] = 1
 *         out[0][5] = 0
 *         out[0][6] = 0             # <<<<<<<<<<<<<<
 *         out[0][7] = 0
 *         out[0][8] = 1
 */
  ((__pyx_v_out[0])[6]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":317
 *         out[0][5] = 0
 *         out[0][6] = 0
 *         out[0][7] = 0             # <<<<<<<<<<<<<<
 *         out[0][8] = 1
 * 
 */
  ((__pyx_v_out[0])[7]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":318
 *         out[0][6] = 0
 *         out[0][7] = 0
 *         out[0][8] = 1             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  ((__pyx_v_out[0])[8]) = 1.0;

  /* "pyorama/math3d/mat3.pyx":309
 * 
 *     @staticmethod
 *     cdef inline void c_from_skewing_y(Mat3C *out, float radians) nogil:             # <<<<<<<<<<<<<<
 *         out[0][0] = 1
 *         out[0][1] = c_math.tan(radians)
 */

  /* function exit code */
}

/* "pyorama/math3d/mat3.pyx":321
 * 
 *     @staticmethod
 *     cdef inline void c_from_translation(Mat3C *out, Vec2C *shift) nogil:             # <<<<<<<<<<<<<<
 *         out[0][0] = 1
 *         out[0][1] = 0
 */

static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_translation(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Vec2C *__pyx_v_shift) {

  /* "pyorama/math3d/mat3.pyx":322
 *     @staticmethod
 *     cdef inline void c_from_translation(Mat3C *out, Vec2C *shift) nogil:
 *         out[0][0] = 1             # <<<<<<<<<<<<<<
 *         out[0][1] = 0
 *         out[0][2] = 0
 */
  ((__pyx_v_out[0])[0]) = 1.0;

  /* "pyorama/math3d/mat3.pyx":323
 *     cdef inline void c_from_translation(Mat3C *out, Vec2C *shift) nogil:
 *         out[0][0] = 1
 *         out[0][1] = 0             # <<<<<<<<<<<<<<
 *         out[0][2] = 0
 *         out[0][3] = 0
 */
  ((__pyx_v_out[0])[1]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":324
 *         out[0][0] = 1
 *         out[0][1] = 0
 *         out[0][2] = 0             # <<<<<<<<<<<<<<
 *         out[0][3] = 0
 *         out[0][4] = 1
 */
  ((__pyx_v_out[0])[2]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":325
 *         out[0][1] = 0
 *         out[0][2] = 0
 *         out[0][3] = 0             # <<<<<<<<<<<<<<
 *         out[0][4] = 1
 *         out[0][5] = 0
 */
  ((__pyx_v_out[0])[3]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":326
 *         out[0][2] = 0
 *         out[0][3] = 0
 *         out[0][4] = 1             # <<<<<<<<<<<<<<
 *         out[0][5] = 0
 *         out[0][6] = shift[0][0]
 */
  ((__pyx_v_out[0])[4]) = 1.0;

  /* "pyorama/math3d/mat3.pyx":327
 *         out[0][3] = 0
 *         out[0][4] = 1
 *         out[0][5] = 0             # <<<<<<<<<<<<<<
 *         out[0][6] = shift[0][0]
 *         out[0][7] = shift[0][1]
 */
  ((__pyx_v_out[0])[5]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":328
 *         out[0][4] = 1
 *         out[0][5] = 0
 *         out[0][6] = shift[0][0]             # <<<<<<<<<<<<<<
 *         out[0][7] = shift[0][1]
 *         out[0][8] = 1
 */
  ((__pyx_v_out[0])[6]) = ((__pyx_v_shift[0])[0]);

  /* "pyorama/math3d/mat3.pyx":329
 *         out[0][5] = 0
 *         out[0][6] = shift[0][0]
 *         out[0][7] = shift[0][1]             # <<<<<<<<<<<<<<
 *         out[0][8] = 1
 * 
 */
  ((__pyx_v_out[0])[7]) = ((__pyx_v_shift[0])[1]);

  /* "pyorama/math3d/mat3.pyx":330
 *         out[0][6] = shift[0][0]
 *         out[0][7] = shift[0][1]
 *         out[0][8] = 1             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  ((__pyx_v_out[0])[8]) = 1.0;

  /* "pyorama/math3d/mat3.pyx":321
 * 
 *     @staticmethod
 *     cdef inline void c_from_translation(Mat3C *out, Vec2C *shift) nogil:             # <<<<<<<<<<<<<<
 *         out[0][0] = 1
 *         out[0][1] = 0
 */

  /* function exit code */
}

/* "pyorama/math3d/mat3.pyx":333
 * 
 *     @staticmethod
 *     cdef inline void c_identity(Mat3C *out) nogil:             # <<<<<<<<<<<<<<
 *         out[0][0] = 1
 *         out[0][1] = 0
 */

static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_identity(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out) {

  /* "pyorama/math3d/mat3.pyx":334
 *     @staticmethod
 *     cdef inline void c_identity(Mat3C *out) nogil:
 *         out[0][0] = 1             # <<<<<<<<<<<<<<
 *         out[0][1] = 0
 *         out[0][2] = 0
 */
  ((__pyx_v_out[0])[0]) = 1.0;

  /* "pyorama/math3d/mat3.pyx":335
 *     cdef inline void c_identity(Mat3C *out) nogil:
 *         out[0][0] = 1
 *         out[0][1] = 0             # <<<<<<<<<<<<<<
 *         out[0][2] = 0
 *         out[0][3] = 0
 */
  ((__pyx_v_out[0])[1]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":336
 *         out[0][0] = 1
 *         out[0][1] = 0
 *         out[0][2] = 0             # <<<<<<<<<<<<<<
 *         out[0][3] = 0
 *         out[0][4] = 1
 */
  ((__pyx_v_out[0])[2]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":337
 *         out[0][1] = 0
 *         out[0][2] = 0
 *         out[0][3] = 0             # <<<<<<<<<<<<<<
 *         out[0][4] = 1
 *         out[0][5] = 0
 */
  ((__pyx_v_out[0])[3]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":338
 *         out[0][2] = 0
 *         out[0][3] = 0
 *         out[0][4] = 1             # <<<<<<<<<<<<<<
 *         out[0][5] = 0
 *         out[0][6] = 0
 */
  ((__pyx_v_out[0])[4]) = 1.0;

  /* "pyorama/math3d/mat3.pyx":339
 *         out[0][3] = 0
 *         out[0][4] = 1
 *         out[0][5] = 0             # <<<<<<<<<<<<<<
 *         out[0][6] = 0
 *         out[0][7] = 0
 */
  ((__pyx_v_out[0])[5]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":340
 *         out[0][4] = 1
 *         out[0][5] = 0
 *         out[0][6] = 0             # <<<<<<<<<<<<<<
 *         out[0][7] = 0
 *         out[0][8] = 1
 */
  ((__pyx_v_out[0])[6]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":341
 *         out[0][5] = 0
 *         out[0][6] = 0
 *         out[0][7] = 0             # <<<<<<<<<<<<<<
 *         out[0][8] = 1
 * 
 */
  ((__pyx_v_out[0])[7]) = 0.0;

  /* "pyorama/math3d/mat3.pyx":342
 *         out[0][6] = 0
 *         out[0][7] = 0
 *         out[0][8] = 1             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  ((__pyx_v_out[0])[8]) = 1.0;

  /* "pyorama/math3d/mat3.pyx":333
 * 
 *     @staticmethod
 *     cdef inline void c_identity(Mat3C *out) nogil:             # <<<<<<<<<<<<<<
 *         out[0][0] = 1
 *         out[0][1] = 0
 */

  /* function exit code */
}

/* "pyorama/math3d/mat3.pyx":345
 * 
 *     @staticmethod
 *     cdef inline void c_inv(Mat3C *out, Mat3C *a) nogil:             # <<<<<<<<<<<<<<
 *         cdef float a0, a1, a2, a3, a4, a5, a6, a7, a8
 *         a0 = a[0][0]; a1 = a[0][1]; a2 = a[0][2];
 */

static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_inv(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a) {
  float __pyx_v_a0;
  float __pyx_v_a1;
  float __pyx_v_a2;
  float __pyx_v_a3;
  float __pyx_v_a4;
  float __pyx_v_a5;
  float __pyx_v_a6;
  float __pyx_v_a7;
  float __pyx_v_a8;
  float __pyx_v_d;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_RefNannySetupContext("c_inv", 1);

  /* "pyorama/math3d/mat3.pyx":346
 *     @staticmethod
 *     cdef inline void c_inv(Mat3C *out, Mat3C *a) nogil:
 *         cdef float a0, a1, a2, a3, a4, a5, a6, a7, a8             # <<<<<<<<<<<<<<
 *         a0 = a[0][0]; a1 = a[0][1]; a2 = a[0][2];
 *         a3 = a[0][3]; a4 = a[0][4]; a5 = a[0][5];
 */
  /*try:*/ {

    /* "pyorama/math3d/mat3.pyx":347
 *     cdef inline void c_inv(Mat3C *out, Mat3C *a) nogil:
 *         cdef float a0, a1, a2, a3, a4, a5, a6, a7, a8
 *         a0 = a[0][0]; a1 = a[0][1]; a2 = a[0][2];             # <<<<<<<<<<<<<<
 *         a3 = a[0][3]; a4 = a[0][4]; a5 = a[0][5];
 *         a6 = a[0][6]; a7 = a[0][7]; a8 = a[0][8];
 */
    __pyx_v_a0 = ((__pyx_v_a[0])[0]);
    __pyx_v_a1 = ((__pyx_v_a[0])[1]);
    __pyx_v_a2 = ((__pyx_v_a[0])[2]);

    /* "pyorama/math3d/mat3.pyx":348
 *         cdef float a0, a1, a2, a3, a4, a5, a6, a7, a8
 *         a0 = a[0][0]; a1 = a[0][1]; a2 = a[0][2];
 *         a3 = a[0][3]; a4 = a[0][4]; a5 = a[0][5];             # <<<<<<<<<<<<<<
 *         a6 = a[0][6]; a7 = a[0][7]; a8 = a[0][8];
 *         cdef float d = Mat3.c_det(a)
 */
    __pyx_v_a3 = ((__pyx_v_a[0])[3]);
    __pyx_v_a4 = ((__pyx_v_a[0])[4]);
    __pyx_v_a5 = ((__pyx_v_a[0])[5]);

    /* "pyorama/math3d/mat3.pyx":349
 *         a0 = a[0][0]; a1 = a[0][1]; a2 = a[0][2];
 *         a3 = a[0][3]; a4 = a[0][4]; a5 = a[0][5];
 *         a6 = a[0][6]; a7 = a[0][7]; a8 = a[0][8];             # <<<<<<<<<<<<<<
 *         cdef float d = Mat3.c_det(a)
 *         if d == 0.0:
 */
    __pyx_v_a6 = ((__pyx_v_a[0])[6]);
    __pyx_v_a7 = ((__pyx_v_a[0])[7]);
    __pyx_v_a8 = ((__pyx_v_a[0])[8]);

    /* "pyorama/math3d/mat3.pyx":350
 *         a3 = a[0][3]; a4 = a[0][4]; a5 = a[0][5];
 *         a6 = a[0][6]; a7 = a[0][7]; a8 = a[0][8];
 *         cdef float d = Mat3.c_det(a)             # <<<<<<<<<<<<<<
 *         if d == 0.0:
 *             raise ValueError("{0} is not an invertible matrix".format(a[0]))
 */
    __pyx_v_d = __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_det(__pyx_v_a);

    /* "pyorama/math3d/mat3.pyx":351
 *         a6 = a[0][6]; a7 = a[0][7]; a8 = a[0][8];
 *         cdef float d = Mat3.c_det(a)
 *         if d == 0.0:             # <<<<<<<<<<<<<<
 *             raise ValueError("{0} is not an invertible matrix".format(a[0]))
 *         d = 1.0 / d
 */
    __pyx_t_1 = ((__pyx_v_d == 0.0) != 0);
    if (__pyx_t_1) {

      /* "pyorama/math3d/mat3.pyx":352
 *         cdef float d = Mat3.c_det(a)
 *         if d == 0.0:
 *             raise ValueError("{0} is not an invertible matrix".format(a[0]))             # <<<<<<<<<<<<<<
 *         d = 1.0 / d
 *         out[0][0] = (a8 * a4 - a5 * a7) * d
 */
      {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          /*try:*/ {
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_0_is_not_an_invertible_matrix, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 352, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_4 = __Pyx_carray_to_py_float((__pyx_v_a[0]), 9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 352, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_5 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
              __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
              if (likely(__pyx_t_5)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                __Pyx_INCREF(__pyx_t_5);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_3, function);
              }
            }
            __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 352, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 352, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_Raise(__pyx_t_3, 0, 0, 0);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __PYX_ERR(0, 352, __pyx_L8_error)
          }
          /*finally:*/ {
            __pyx_L8_error: {
              #ifdef WITH_THREAD
              __Pyx_PyGILState_Release(__pyx_gilstate_save);
              #endif
              goto __pyx_L4_error;
            }
          }
      }

      /* "pyorama/math3d/mat3.pyx":351
 *         a6 = a[0][6]; a7 = a[0][7]; a8 = a[0][8];
 *         cdef float d = Mat3.c_det(a)
 *         if d == 0.0:             # <<<<<<<<<<<<<<
 *             raise ValueError("{0} is not an invertible matrix".format(a[0]))
 *         d = 1.0 / d
 */
    }

    /* "pyorama/math3d/mat3.pyx":353
 *         if d == 0.0:
 *             raise ValueError("{0} is not an invertible matrix".format(a[0]))
 *         d = 1.0 / d             # <<<<<<<<<<<<<<
 *         out[0][0] = (a8 * a4 - a5 * a7) * d
 *         out[0][1] = (a2 * a7 - a8 * a1) * d
 */
    __pyx_v_d = (1.0 / ((double)__pyx_v_d));

    /* "pyorama/math3d/mat3.pyx":354
 *             raise ValueError("{0} is not an invertible matrix".format(a[0]))
 *         d = 1.0 / d
 *         out[0][0] = (a8 * a4 - a5 * a7) * d             # <<<<<<<<<<<<<<
 *         out[0][1] = (a2 * a7 - a8 * a1) * d
 *         out[0][2] = (a5 * a1 - a2 * a4) * d
 */
    ((__pyx_v_out[0])[0]) = (((__pyx_v_a8 * __pyx_v_a4) - (__pyx_v_a5 * __pyx_v_a7)) * __pyx_v_d);

    /* "pyorama/math3d/mat3.pyx":355
 *         d = 1.0 / d
 *         out[0][0] = (a8 * a4 - a5 * a7) * d
 *         out[0][1] = (a2 * a7 - a8 * a1) * d             # <<<<<<<<<<<<<<
 *         out[0][2] = (a5 * a1 - a2 * a4) * d
 *         out[0][3] = (a1 * a8 - a2 * a7) * d
 */
    ((__pyx_v_out[0])[1]) = (((__pyx_v_a2 * __pyx_v_a7) - (__pyx_v_a8 * __pyx_v_a1)) * __pyx_v_d);

    /* "pyorama/math3d/mat3.pyx":356
 *         out[0][0] = (a8 * a4 - a5 * a7) * d
 *         out[0][1] = (a2 * a7 - a8 * a1) * d
 *         out[0][2] = (a5 * a1 - a2 * a4) * d             # <<<<<<<<<<<<<<
 *         out[0][3] = (a1 * a8 - a2 * a7) * d
 *         out[0][4] = (a8 * a0 - a2 * a6) * d
 */
    ((__pyx_v_out[0])[2]) = (((__pyx_v_a5 * __pyx_v_a1) - (__pyx_v_a2 * __pyx_v_a4)) * __pyx_v_d);

    /* "pyorama/math3d/mat3.pyx":357
 *         out[0][1] = (a2 * a7 - a8 * a1) * d
 *         out[0][2] = (a5 * a1 - a2 * a4) * d
 *         out[0][3] = (a1 * a8 - a2 * a7) * d             # <<<<<<<<<<<<<<
 *         out[0][4] = (a8 * a0 - a2 * a6) * d
 *         out[0][5] = (a2 * a3 - a5 * a0) * d
 */
    ((__pyx_v_out[0])[3]) = (((__pyx_v_a1 * __pyx_v_a8) - (__pyx_v_a2 * __pyx_v_a7)) * __pyx_v_d);

    /* "pyorama/math3d/mat3.pyx":358
 *         out[0][2] = (a5 * a1 - a2 * a4) * d
 *         out[0][3] = (a1 * a8 - a2 * a7) * d
 *         out[0][4] = (a8 * a0 - a2 * a6) * d             # <<<<<<<<<<<<<<
 *         out[0][5] = (a2 * a3 - a5 * a0) * d
 *         out[0][6] = (a1 * a5 - a2 * a4) * d
 */
    ((__pyx_v_out[0])[4]) = (((__pyx_v_a8 * __pyx_v_a0) - (__pyx_v_a2 * __pyx_v_a6)) * __pyx_v_d);

    /* "pyorama/math3d/mat3.pyx":359
 *         out[0][3] = (a1 * a8 - a2 * a7) * d
 *         out[0][4] = (a8 * a0 - a2 * a6) * d
 *         out[0][5] = (a2 * a3 - a5 * a0) * d             # <<<<<<<<<<<<<<
 *         out[0][6] = (a1 * a5 - a2 * a4) * d
 *         out[0][7] = (a1 * a6 - a7 * a0) * d
 */
    ((__pyx_v_out[0])[5]) = (((__pyx_v_a2 * __pyx_v_a3) - (__pyx_v_a5 * __pyx_v_a0)) * __pyx_v_d);

    /* "pyorama/math3d/mat3.pyx":360
 *         out[0][4] = (a8 * a0 - a2 * a6) * d
 *         out[0][5] = (a2 * a3 - a5 * a0) * d
 *         out[0][6] = (a1 * a5 - a2 * a4) * d             # <<<<<<<<<<<<<<
 *         out[0][7] = (a1 * a6 - a7 * a0) * d
 *         out[0][8] = (a4 * a0 - a1 * a3) * d
 */
    ((__pyx_v_out[0])[6]) = (((__pyx_v_a1 * __pyx_v_a5) - (__pyx_v_a2 * __pyx_v_a4)) * __pyx_v_d);

    /* "pyorama/math3d/mat3.pyx":361
 *         out[0][5] = (a2 * a3 - a5 * a0) * d
 *         out[0][6] = (a1 * a5 - a2 * a4) * d
 *         out[0][7] = (a1 * a6 - a7 * a0) * d             # <<<<<<<<<<<<<<
 *         out[0][8] = (a4 * a0 - a1 * a3) * d
 * 
 */
    ((__pyx_v_out[0])[7]) = (((__pyx_v_a1 * __pyx_v_a6) - (__pyx_v_a7 * __pyx_v_a0)) * __pyx_v_d);

    /* "pyorama/math3d/mat3.pyx":362
 *         out[0][6] = (a1 * a5 - a2 * a4) * d
 *         out[0][7] = (a1 * a6 - a7 * a0) * d
 *         out[0][8] = (a4 * a0 - a1 * a3) * d             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    ((__pyx_v_out[0])[8]) = (((__pyx_v_a4 * __pyx_v_a0) - (__pyx_v_a1 * __pyx_v_a3)) * __pyx_v_d);
  }

  /* "pyorama/math3d/mat3.pyx":346
 *     @staticmethod
 *     cdef inline void c_inv(Mat3C *out, Mat3C *a) nogil:
 *         cdef float a0, a1, a2, a3, a4, a5, a6, a7, a8             # <<<<<<<<<<<<<<
 *         a0 = a[0][0]; a1 = a[0][1]; a2 = a[0][2];
 *         a3 = a[0][3]; a4 = a[0][4]; a5 = a[0][5];
 */
  /*finally:*/ {
    /*normal exit:*/{
      #ifdef WITH_THREAD
      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      goto __pyx_L5;
    }
    __pyx_L4_error: {
      #ifdef WITH_THREAD
      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      goto __pyx_L1_error;
    }
    __pyx_L5:;
  }

  /* "pyorama/math3d/mat3.pyx":345
 * 
 *     @staticmethod
 *     cdef inline void c_inv(Mat3C *out, Mat3C *a) nogil:             # <<<<<<<<<<<<<<
 *         cdef float a0, a1, a2, a3, a4, a5, a6, a7, a8
 *         a0 = a[0][0]; a1 = a[0][1]; a2 = a[0][2];
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("pyorama.math3d.mat3.Mat3.c_inv", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "pyorama/math3d/mat3.pyx":365
 * 
 *     @staticmethod
 *     cdef inline void c_mul(Mat3C *out, Mat3C *a, Mat3C *b) nogil:             # <<<<<<<<<<<<<<
 *         cdef size_t i = 0
 *         cdef size_t size = 9
 */

static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_mul(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_b) {
  size_t __pyx_v_i;
  size_t __pyx_v_size;
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;

  /* "pyorama/math3d/mat3.pyx":366
 *     @staticmethod
 *     cdef inline void c_mul(Mat3C *out, Mat3C *a, Mat3C *b) nogil:
 *         cdef size_t i = 0             # <<<<<<<<<<<<<<
 *         cdef size_t size = 9
 *         for i in xrange(size):
 */
  __pyx_v_i = 0;

  /* "pyorama/math3d/mat3.pyx":367
 *     cdef inline void c_mul(Mat3C *out, Mat3C *a, Mat3C *b) nogil:
 *         cdef size_t i = 0
 *         cdef size_t size = 9             # <<<<<<<<<<<<<<
 *         for i in xrange(size):
 *             out[0][i] = a[0][i] * b[0][i]
 */
  __pyx_v_size = 9;

  /* "pyorama/math3d/mat3.pyx":368
 *         cdef size_t i = 0
 *         cdef size_t size = 9
 *         for i in xrange(size):             # <<<<<<<<<<<<<<
 *             out[0][i] = a[0][i] * b[0][i]
 * 
 */
  __pyx_t_1 = __pyx_v_size;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "pyorama/math3d/mat3.pyx":369
 *         cdef size_t size = 9
 *         for i in xrange(size):
 *             out[0][i] = a[0][i] * b[0][i]             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    ((__pyx_v_out[0])[__pyx_v_i]) = (((__pyx_v_a[0])[__pyx_v_i]) * ((__pyx_v_b[0])[__pyx_v_i]));
  }

  /* "pyorama/math3d/mat3.pyx":365
 * 
 *     @staticmethod
 *     cdef inline void c_mul(Mat3C *out, Mat3C *a, Mat3C *b) nogil:             # <<<<<<<<<<<<<<
 *         cdef size_t i = 0
 *         cdef size_t size = 9
 */

  /* function exit code */
}

/* "pyorama/math3d/mat3.pyx":372
 * 
 *     @staticmethod
 *     cdef inline bint c_nearly_equals(Mat3C *a, Mat3C *b, float epsilon=epsilon) nogil:             # <<<<<<<<<<<<<<
 *         cdef size_t i = 0
 *         cdef size_t size = 9
 */

static CYTHON_INLINE int __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_nearly_equals(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_b, struct __pyx_opt_args_7pyorama_6math3d_4mat3_4Mat3_c_nearly_equals *__pyx_optional_args) {
  float __pyx_v_epsilon = __pyx_k__3;
  size_t __pyx_v_i;
  size_t __pyx_v_size;
  int __pyx_r;
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  double __pyx_t_4;
  double __pyx_t_5;
  double __pyx_t_6;
  double __pyx_t_7;
  int __pyx_t_8;
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_epsilon = __pyx_optional_args->epsilon;
    }
  }

  /* "pyorama/math3d/mat3.pyx":373
 *     @staticmethod
 *     cdef inline bint c_nearly_equals(Mat3C *a, Mat3C *b, float epsilon=epsilon) nogil:
 *         cdef size_t i = 0             # <<<<<<<<<<<<<<
 *         cdef size_t size = 9
 *         for i in xrange(size):
 */
  __pyx_v_i = 0;

  /* "pyorama/math3d/mat3.pyx":374
 *     cdef inline bint c_nearly_equals(Mat3C *a, Mat3C *b, float epsilon=epsilon) nogil:
 *         cdef size_t i = 0
 *         cdef size_t size = 9             # <<<<<<<<<<<<<<
 *         for i in xrange(size):
 *             if c_math.fabs(a[0][i] - b[0][i]) > epsilon * max(1.0, c_math.fabs(a[0][i]), c_math.fabs(b[0][i])):
 */
  __pyx_v_size = 9;

  /* "pyorama/math3d/mat3.pyx":375
 *         cdef size_t i = 0
 *         cdef size_t size = 9
 *         for i in xrange(size):             # <<<<<<<<<<<<<<
 *             if c_math.fabs(a[0][i] - b[0][i]) > epsilon * max(1.0, c_math.fabs(a[0][i]), c_math.fabs(b[0][i])):
 *                 return False
 */
  __pyx_t_1 = __pyx_v_size;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "pyorama/math3d/mat3.pyx":376
 *         cdef size_t size = 9
 *         for i in xrange(size):
 *             if c_math.fabs(a[0][i] - b[0][i]) > epsilon * max(1.0, c_math.fabs(a[0][i]), c_math.fabs(b[0][i])):             # <<<<<<<<<<<<<<
 *                 return False
 *         return True
 */
    __pyx_t_4 = fabs(((__pyx_v_a[0])[__pyx_v_i]));
    __pyx_t_5 = fabs(((__pyx_v_b[0])[__pyx_v_i]));
    __pyx_t_6 = 1.0;
    if (((__pyx_t_4 > __pyx_t_6) != 0)) {
      __pyx_t_7 = __pyx_t_4;
    } else {
      __pyx_t_7 = __pyx_t_6;
    }
    __pyx_t_6 = __pyx_t_7;
    if (((__pyx_t_5 > __pyx_t_6) != 0)) {
      __pyx_t_7 = __pyx_t_5;
    } else {
      __pyx_t_7 = __pyx_t_6;
    }
    __pyx_t_8 = ((fabs((((__pyx_v_a[0])[__pyx_v_i]) - ((__pyx_v_b[0])[__pyx_v_i]))) > (__pyx_v_epsilon * __pyx_t_7)) != 0);
    if (__pyx_t_8) {

      /* "pyorama/math3d/mat3.pyx":377
 *         for i in xrange(size):
 *             if c_math.fabs(a[0][i] - b[0][i]) > epsilon * max(1.0, c_math.fabs(a[0][i]), c_math.fabs(b[0][i])):
 *                 return False             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "pyorama/math3d/mat3.pyx":376
 *         cdef size_t size = 9
 *         for i in xrange(size):
 *             if c_math.fabs(a[0][i] - b[0][i]) > epsilon * max(1.0, c_math.fabs(a[0][i]), c_math.fabs(b[0][i])):             # <<<<<<<<<<<<<<
 *                 return False
 *         return True
 */
    }
  }

  /* "pyorama/math3d/mat3.pyx":378
 *             if c_math.fabs(a[0][i] - b[0][i]) > epsilon * max(1.0, c_math.fabs(a[0][i]), c_math.fabs(b[0][i])):
 *                 return False
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "pyorama/math3d/mat3.pyx":372
 * 
 *     @staticmethod
 *     cdef inline bint c_nearly_equals(Mat3C *a, Mat3C *b, float epsilon=epsilon) nogil:             # <<<<<<<<<<<<<<
 *         cdef size_t i = 0
 *         cdef size_t size = 9
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "pyorama/math3d/mat3.pyx":381
 * 
 *     @staticmethod
 *     cdef inline void c_normal_from_mat4(Mat3C *out, Mat4C *a) nogil:             # <<<<<<<<<<<<<<
 *         cdef Mat4C a_t
 *         if Mat4.c_det(a) != 0:
 */

static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_normal_from_mat4(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat4C *__pyx_v_a) {
  __pyx_t_7pyorama_6math3d_6common_Mat4C __pyx_v_a_t;
  int __pyx_t_1;

  /* "pyorama/math3d/mat3.pyx":383
 *     cdef inline void c_normal_from_mat4(Mat3C *out, Mat4C *a) nogil:
 *         cdef Mat4C a_t
 *         if Mat4.c_det(a) != 0:             # <<<<<<<<<<<<<<
 *             Mat4.c_transpose(&a_t, a)
 *             Mat4.c_inv(&a_t, &a_t)
 */
  __pyx_t_1 = ((__pyx_vtabptr_7pyorama_6math3d_4mat4_Mat4->c_det(__pyx_v_a) != 0.0) != 0);
  if (__pyx_t_1) {

    /* "pyorama/math3d/mat3.pyx":384
 *         cdef Mat4C a_t
 *         if Mat4.c_det(a) != 0:
 *             Mat4.c_transpose(&a_t, a)             # <<<<<<<<<<<<<<
 *             Mat4.c_inv(&a_t, &a_t)
 *             Mat3.c_from_mat4(out, &a_t)
 */
    __pyx_vtabptr_7pyorama_6math3d_4mat4_Mat4->c_transpose((&__pyx_v_a_t), __pyx_v_a);

    /* "pyorama/math3d/mat3.pyx":385
 *         if Mat4.c_det(a) != 0:
 *             Mat4.c_transpose(&a_t, a)
 *             Mat4.c_inv(&a_t, &a_t)             # <<<<<<<<<<<<<<
 *             Mat3.c_from_mat4(out, &a_t)
 * 
 */
    __pyx_vtabptr_7pyorama_6math3d_4mat4_Mat4->c_inv((&__pyx_v_a_t), (&__pyx_v_a_t));

    /* "pyorama/math3d/mat3.pyx":386
 *             Mat4.c_transpose(&a_t, a)
 *             Mat4.c_inv(&a_t, &a_t)
 *             Mat3.c_from_mat4(out, &a_t)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_mat4(__pyx_v_out, (&__pyx_v_a_t));

    /* "pyorama/math3d/mat3.pyx":383
 *     cdef inline void c_normal_from_mat4(Mat3C *out, Mat4C *a) nogil:
 *         cdef Mat4C a_t
 *         if Mat4.c_det(a) != 0:             # <<<<<<<<<<<<<<
 *             Mat4.c_transpose(&a_t, a)
 *             Mat4.c_inv(&a_t, &a_t)
 */
  }

  /* "pyorama/math3d/mat3.pyx":381
 * 
 *     @staticmethod
 *     cdef inline void c_normal_from_mat4(Mat3C *out, Mat4C *a) nogil:             # <<<<<<<<<<<<<<
 *         cdef Mat4C a_t
 *         if Mat4.c_det(a) != 0:
 */

  /* function exit code */
}

/* "pyorama/math3d/mat3.pyx":389
 * 
 *     @staticmethod
 *     cdef inline void c_random(Mat3C *out) nogil:             # <<<<<<<<<<<<<<
 *         cdef size_t i = 0
 *         cdef size_t size = 9
 */

static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_random(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out) {
  size_t __pyx_v_i;
  size_t __pyx_v_size;
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;

  /* "pyorama/math3d/mat3.pyx":390
 *     @staticmethod
 *     cdef inline void c_random(Mat3C *out) nogil:
 *         cdef size_t i = 0             # <<<<<<<<<<<<<<
 *         cdef size_t size = 9
 *         for i in xrange(size):
 */
  __pyx_v_i = 0;

  /* "pyorama/math3d/mat3.pyx":391
 *     cdef inline void c_random(Mat3C *out) nogil:
 *         cdef size_t i = 0
 *         cdef size_t size = 9             # <<<<<<<<<<<<<<
 *         for i in xrange(size):
 *             out[0][i] = rand() / float(RAND_MAX)
 */
  __pyx_v_size = 9;

  /* "pyorama/math3d/mat3.pyx":392
 *         cdef size_t i = 0
 *         cdef size_t size = 9
 *         for i in xrange(size):             # <<<<<<<<<<<<<<
 *             out[0][i] = rand() / float(RAND_MAX)
 * 
 */
  __pyx_t_1 = __pyx_v_size;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "pyorama/math3d/mat3.pyx":393
 *         cdef size_t size = 9
 *         for i in xrange(size):
 *             out[0][i] = rand() / float(RAND_MAX)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    ((__pyx_v_out[0])[__pyx_v_i]) = (((double)rand()) / ((double)RAND_MAX));
  }

  /* "pyorama/math3d/mat3.pyx":389
 * 
 *     @staticmethod
 *     cdef inline void c_random(Mat3C *out) nogil:             # <<<<<<<<<<<<<<
 *         cdef size_t i = 0
 *         cdef size_t size = 9
 */

  /* function exit code */
}

/* "pyorama/math3d/mat3.pyx":396
 * 
 *     @staticmethod
 *     cdef inline void c_rotate(Mat3C *out, Mat3C *a, float radians) nogil:             # <<<<<<<<<<<<<<
 *         cdef Mat3C rot_mat
 *         Mat3.c_from_rotation(&rot_mat, radians)
 */

static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_rotate(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a, float __pyx_v_radians) {
  __pyx_t_7pyorama_6math3d_6common_Mat3C __pyx_v_rot_mat;

  /* "pyorama/math3d/mat3.pyx":398
 *     cdef inline void c_rotate(Mat3C *out, Mat3C *a, float radians) nogil:
 *         cdef Mat3C rot_mat
 *         Mat3.c_from_rotation(&rot_mat, radians)             # <<<<<<<<<<<<<<
 *         Mat3.c_dot(out, a, &rot_mat)
 * 
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_rotation((&__pyx_v_rot_mat), __pyx_v_radians);

  /* "pyorama/math3d/mat3.pyx":399
 *         cdef Mat3C rot_mat
 *         Mat3.c_from_rotation(&rot_mat, radians)
 *         Mat3.c_dot(out, a, &rot_mat)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_dot(__pyx_v_out, __pyx_v_a, (&__pyx_v_rot_mat));

  /* "pyorama/math3d/mat3.pyx":396
 * 
 *     @staticmethod
 *     cdef inline void c_rotate(Mat3C *out, Mat3C *a, float radians) nogil:             # <<<<<<<<<<<<<<
 *         cdef Mat3C rot_mat
 *         Mat3.c_from_rotation(&rot_mat, radians)
 */

  /* function exit code */
}

/* "pyorama/math3d/mat3.pyx":402
 * 
 *     @staticmethod
 *     cdef inline void c_scale(Mat3C *out, Mat3C *a, Vec2C *factor) nogil:             # <<<<<<<<<<<<<<
 *         cdef Mat3C scale_mat
 *         Mat3.c_from_scaling(&scale_mat, factor)
 */

static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_scale(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a, __pyx_t_7pyorama_6math3d_6common_Vec2C *__pyx_v_factor) {
  __pyx_t_7pyorama_6math3d_6common_Mat3C __pyx_v_scale_mat;

  /* "pyorama/math3d/mat3.pyx":404
 *     cdef inline void c_scale(Mat3C *out, Mat3C *a, Vec2C *factor) nogil:
 *         cdef Mat3C scale_mat
 *         Mat3.c_from_scaling(&scale_mat, factor)             # <<<<<<<<<<<<<<
 *         Mat3.c_dot(out, a, &scale_mat)
 * 
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_scaling((&__pyx_v_scale_mat), __pyx_v_factor);

  /* "pyorama/math3d/mat3.pyx":405
 *         cdef Mat3C scale_mat
 *         Mat3.c_from_scaling(&scale_mat, factor)
 *         Mat3.c_dot(out, a, &scale_mat)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_dot(__pyx_v_out, __pyx_v_a, (&__pyx_v_scale_mat));

  /* "pyorama/math3d/mat3.pyx":402
 * 
 *     @staticmethod
 *     cdef inline void c_scale(Mat3C *out, Mat3C *a, Vec2C *factor) nogil:             # <<<<<<<<<<<<<<
 *         cdef Mat3C scale_mat
 *         Mat3.c_from_scaling(&scale_mat, factor)
 */

  /* function exit code */
}

/* "pyorama/math3d/mat3.pyx":408
 * 
 *     @staticmethod
 *     cdef inline void c_scale_add(Mat3C *out, Mat3C *a, float scale=1.0, float add=0.0) nogil:             # <<<<<<<<<<<<<<
 *         cdef size_t i = 0
 *         cdef size_t size = 9
 */

static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_scale_add(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a, struct __pyx_opt_args_7pyorama_6math3d_4mat3_4Mat3_c_scale_add *__pyx_optional_args) {
  float __pyx_v_scale = ((float)1.0);
  float __pyx_v_add = ((float)0.0);
  size_t __pyx_v_i;
  size_t __pyx_v_size;
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_scale = __pyx_optional_args->scale;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_add = __pyx_optional_args->add;
      }
    }
  }

  /* "pyorama/math3d/mat3.pyx":409
 *     @staticmethod
 *     cdef inline void c_scale_add(Mat3C *out, Mat3C *a, float scale=1.0, float add=0.0) nogil:
 *         cdef size_t i = 0             # <<<<<<<<<<<<<<
 *         cdef size_t size = 9
 *         for i in xrange(size):
 */
  __pyx_v_i = 0;

  /* "pyorama/math3d/mat3.pyx":410
 *     cdef inline void c_scale_add(Mat3C *out, Mat3C *a, float scale=1.0, float add=0.0) nogil:
 *         cdef size_t i = 0
 *         cdef size_t size = 9             # <<<<<<<<<<<<<<
 *         for i in xrange(size):
 *             out[0][i] = scale * a[0][i] + add
 */
  __pyx_v_size = 9;

  /* "pyorama/math3d/mat3.pyx":411
 *         cdef size_t i = 0
 *         cdef size_t size = 9
 *         for i in xrange(size):             # <<<<<<<<<<<<<<
 *             out[0][i] = scale * a[0][i] + add
 * 
 */
  __pyx_t_1 = __pyx_v_size;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "pyorama/math3d/mat3.pyx":412
 *         cdef size_t size = 9
 *         for i in xrange(size):
 *             out[0][i] = scale * a[0][i] + add             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    ((__pyx_v_out[0])[__pyx_v_i]) = ((__pyx_v_scale * ((__pyx_v_a[0])[__pyx_v_i])) + __pyx_v_add);
  }

  /* "pyorama/math3d/mat3.pyx":408
 * 
 *     @staticmethod
 *     cdef inline void c_scale_add(Mat3C *out, Mat3C *a, float scale=1.0, float add=0.0) nogil:             # <<<<<<<<<<<<<<
 *         cdef size_t i = 0
 *         cdef size_t size = 9
 */

  /* function exit code */
}

/* "pyorama/math3d/mat3.pyx":415
 * 
 *     @staticmethod
 *     cdef inline void c_set_data(Mat3C *out, float m00=0.0, float m01=0.0, float m02=0.0,             # <<<<<<<<<<<<<<
 *             float m10=0.0, float m11=0.0, float m12=0.0,
 *             float m20=0.0, float m21=0.0, float m22=0.0) nogil:
 */

static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_set_data(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, struct __pyx_opt_args_7pyorama_6math3d_4mat3_4Mat3_c_set_data *__pyx_optional_args) {
  float __pyx_v_m00 = ((float)0.0);
  float __pyx_v_m01 = ((float)0.0);
  float __pyx_v_m02 = ((float)0.0);
  float __pyx_v_m10 = ((float)0.0);
  float __pyx_v_m11 = ((float)0.0);
  float __pyx_v_m12 = ((float)0.0);
  float __pyx_v_m20 = ((float)0.0);
  float __pyx_v_m21 = ((float)0.0);
  float __pyx_v_m22 = ((float)0.0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_m00 = __pyx_optional_args->m00;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_m01 = __pyx_optional_args->m01;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_m02 = __pyx_optional_args->m02;
          if (__pyx_optional_args->__pyx_n > 3) {
            __pyx_v_m10 = __pyx_optional_args->m10;
            if (__pyx_optional_args->__pyx_n > 4) {
              __pyx_v_m11 = __pyx_optional_args->m11;
              if (__pyx_optional_args->__pyx_n > 5) {
                __pyx_v_m12 = __pyx_optional_args->m12;
                if (__pyx_optional_args->__pyx_n > 6) {
                  __pyx_v_m20 = __pyx_optional_args->m20;
                  if (__pyx_optional_args->__pyx_n > 7) {
                    __pyx_v_m21 = __pyx_optional_args->m21;
                    if (__pyx_optional_args->__pyx_n > 8) {
                      __pyx_v_m22 = __pyx_optional_args->m22;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  /* "pyorama/math3d/mat3.pyx":418
 *             float m10=0.0, float m11=0.0, float m12=0.0,
 *             float m20=0.0, float m21=0.0, float m22=0.0) nogil:
 *         out[0][0] = m00             # <<<<<<<<<<<<<<
 *         out[0][1] = m01
 *         out[0][2] = m02
 */
  ((__pyx_v_out[0])[0]) = __pyx_v_m00;

  /* "pyorama/math3d/mat3.pyx":419
 *             float m20=0.0, float m21=0.0, float m22=0.0) nogil:
 *         out[0][0] = m00
 *         out[0][1] = m01             # <<<<<<<<<<<<<<
 *         out[0][2] = m02
 *         out[0][3] = m10
 */
  ((__pyx_v_out[0])[1]) = __pyx_v_m01;

  /* "pyorama/math3d/mat3.pyx":420
 *         out[0][0] = m00
 *         out[0][1] = m01
 *         out[0][2] = m02             # <<<<<<<<<<<<<<
 *         out[0][3] = m10
 *         out[0][4] = m11
 */
  ((__pyx_v_out[0])[2]) = __pyx_v_m02;

  /* "pyorama/math3d/mat3.pyx":421
 *         out[0][1] = m01
 *         out[0][2] = m02
 *         out[0][3] = m10             # <<<<<<<<<<<<<<
 *         out[0][4] = m11
 *         out[0][5] = m12
 */
  ((__pyx_v_out[0])[3]) = __pyx_v_m10;

  /* "pyorama/math3d/mat3.pyx":422
 *         out[0][2] = m02
 *         out[0][3] = m10
 *         out[0][4] = m11             # <<<<<<<<<<<<<<
 *         out[0][5] = m12
 *         out[0][6] = m20
 */
  ((__pyx_v_out[0])[4]) = __pyx_v_m11;

  /* "pyorama/math3d/mat3.pyx":423
 *         out[0][3] = m10
 *         out[0][4] = m11
 *         out[0][5] = m12             # <<<<<<<<<<<<<<
 *         out[0][6] = m20
 *         out[0][7] = m21
 */
  ((__pyx_v_out[0])[5]) = __pyx_v_m12;

  /* "pyorama/math3d/mat3.pyx":424
 *         out[0][4] = m11
 *         out[0][5] = m12
 *         out[0][6] = m20             # <<<<<<<<<<<<<<
 *         out[0][7] = m21
 *         out[0][8] = m22
 */
  ((__pyx_v_out[0])[6]) = __pyx_v_m20;

  /* "pyorama/math3d/mat3.pyx":425
 *         out[0][5] = m12
 *         out[0][6] = m20
 *         out[0][7] = m21             # <<<<<<<<<<<<<<
 *         out[0][8] = m22
 * 
 */
  ((__pyx_v_out[0])[7]) = __pyx_v_m21;

  /* "pyorama/math3d/mat3.pyx":426
 *         out[0][6] = m20
 *         out[0][7] = m21
 *         out[0][8] = m22             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  ((__pyx_v_out[0])[8]) = __pyx_v_m22;

  /* "pyorama/math3d/mat3.pyx":415
 * 
 *     @staticmethod
 *     cdef inline void c_set_data(Mat3C *out, float m00=0.0, float m01=0.0, float m02=0.0,             # <<<<<<<<<<<<<<
 *             float m10=0.0, float m11=0.0, float m12=0.0,
 *             float m20=0.0, float m21=0.0, float m22=0.0) nogil:
 */

  /* function exit code */
}

/* "pyorama/math3d/mat3.pyx":429
 * 
 *     @staticmethod
 *     cdef inline void c_skew(Mat3C *out, Mat3C *a, Vec2C *factor) nogil:             # <<<<<<<<<<<<<<
 *         cdef Mat3C skew_mat
 *         Mat3.c_from_skewing(&skew_mat, factor)
 */

static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_skew(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a, __pyx_t_7pyorama_6math3d_6common_Vec2C *__pyx_v_factor) {
  __pyx_t_7pyorama_6math3d_6common_Mat3C __pyx_v_skew_mat;

  /* "pyorama/math3d/mat3.pyx":431
 *     cdef inline void c_skew(Mat3C *out, Mat3C *a, Vec2C *factor) nogil:
 *         cdef Mat3C skew_mat
 *         Mat3.c_from_skewing(&skew_mat, factor)             # <<<<<<<<<<<<<<
 *         Mat3.c_dot(out, a, &skew_mat)
 * 
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_skewing((&__pyx_v_skew_mat), __pyx_v_factor);

  /* "pyorama/math3d/mat3.pyx":432
 *         cdef Mat3C skew_mat
 *         Mat3.c_from_skewing(&skew_mat, factor)
 *         Mat3.c_dot(out, a, &skew_mat)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_dot(__pyx_v_out, __pyx_v_a, (&__pyx_v_skew_mat));

  /* "pyorama/math3d/mat3.pyx":429
 * 
 *     @staticmethod
 *     cdef inline void c_skew(Mat3C *out, Mat3C *a, Vec2C *factor) nogil:             # <<<<<<<<<<<<<<
 *         cdef Mat3C skew_mat
 *         Mat3.c_from_skewing(&skew_mat, factor)
 */

  /* function exit code */
}

/* "pyorama/math3d/mat3.pyx":435
 * 
 *     @staticmethod
 *     cdef inline void c_skew_x(Mat3C *out, Mat3C *a, float radians) nogil:             # <<<<<<<<<<<<<<
 *         cdef Mat3C skew_mat
 *         Mat3.c_from_skewing_x(&skew_mat, radians)
 */

static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_skew_x(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a, float __pyx_v_radians) {
  __pyx_t_7pyorama_6math3d_6common_Mat3C __pyx_v_skew_mat;

  /* "pyorama/math3d/mat3.pyx":437
 *     cdef inline void c_skew_x(Mat3C *out, Mat3C *a, float radians) nogil:
 *         cdef Mat3C skew_mat
 *         Mat3.c_from_skewing_x(&skew_mat, radians)             # <<<<<<<<<<<<<<
 *         Mat3.c_dot(out, a, &skew_mat)
 * 
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_skewing_x((&__pyx_v_skew_mat), __pyx_v_radians);

  /* "pyorama/math3d/mat3.pyx":438
 *         cdef Mat3C skew_mat
 *         Mat3.c_from_skewing_x(&skew_mat, radians)
 *         Mat3.c_dot(out, a, &skew_mat)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_dot(__pyx_v_out, __pyx_v_a, (&__pyx_v_skew_mat));

  /* "pyorama/math3d/mat3.pyx":435
 * 
 *     @staticmethod
 *     cdef inline void c_skew_x(Mat3C *out, Mat3C *a, float radians) nogil:             # <<<<<<<<<<<<<<
 *         cdef Mat3C skew_mat
 *         Mat3.c_from_skewing_x(&skew_mat, radians)
 */

  /* function exit code */
}

/* "pyorama/math3d/mat3.pyx":441
 * 
 *     @staticmethod
 *     cdef inline void c_skew_y(Mat3C *out, Mat3C *a, float radians) nogil:             # <<<<<<<<<<<<<<
 *         cdef Mat3C skew_mat
 *         Mat3.c_from_skewing_y(&skew_mat, radians)
 */

static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_skew_y(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a, float __pyx_v_radians) {
  __pyx_t_7pyorama_6math3d_6common_Mat3C __pyx_v_skew_mat;

  /* "pyorama/math3d/mat3.pyx":443
 *     cdef inline void c_skew_y(Mat3C *out, Mat3C *a, float radians) nogil:
 *         cdef Mat3C skew_mat
 *         Mat3.c_from_skewing_y(&skew_mat, radians)             # <<<<<<<<<<<<<<
 *         Mat3.c_dot(out, a, &skew_mat)
 * 
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_skewing_y((&__pyx_v_skew_mat), __pyx_v_radians);

  /* "pyorama/math3d/mat3.pyx":444
 *         cdef Mat3C skew_mat
 *         Mat3.c_from_skewing_y(&skew_mat, radians)
 *         Mat3.c_dot(out, a, &skew_mat)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_dot(__pyx_v_out, __pyx_v_a, (&__pyx_v_skew_mat));

  /* "pyorama/math3d/mat3.pyx":441
 * 
 *     @staticmethod
 *     cdef inline void c_skew_y(Mat3C *out, Mat3C *a, float radians) nogil:             # <<<<<<<<<<<<<<
 *         cdef Mat3C skew_mat
 *         Mat3.c_from_skewing_y(&skew_mat, radians)
 */

  /* function exit code */
}

/* "pyorama/math3d/mat3.pyx":447
 * 
 *     @staticmethod
 *     cdef inline void c_sub(Mat3C *out, Mat3C *a, Mat3C *b) nogil:             # <<<<<<<<<<<<<<
 *         cdef size_t i = 0
 *         cdef size_t size = 9
 */

static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_sub(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_b) {
  size_t __pyx_v_i;
  size_t __pyx_v_size;
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;

  /* "pyorama/math3d/mat3.pyx":448
 *     @staticmethod
 *     cdef inline void c_sub(Mat3C *out, Mat3C *a, Mat3C *b) nogil:
 *         cdef size_t i = 0             # <<<<<<<<<<<<<<
 *         cdef size_t size = 9
 *         for i in xrange(size):
 */
  __pyx_v_i = 0;

  /* "pyorama/math3d/mat3.pyx":449
 *     cdef inline void c_sub(Mat3C *out, Mat3C *a, Mat3C *b) nogil:
 *         cdef size_t i = 0
 *         cdef size_t size = 9             # <<<<<<<<<<<<<<
 *         for i in xrange(size):
 *             out[0][i] = a[0][i] - b[0][i]
 */
  __pyx_v_size = 9;

  /* "pyorama/math3d/mat3.pyx":450
 *         cdef size_t i = 0
 *         cdef size_t size = 9
 *         for i in xrange(size):             # <<<<<<<<<<<<<<
 *             out[0][i] = a[0][i] - b[0][i]
 * 
 */
  __pyx_t_1 = __pyx_v_size;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "pyorama/math3d/mat3.pyx":451
 *         cdef size_t size = 9
 *         for i in xrange(size):
 *             out[0][i] = a[0][i] - b[0][i]             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    ((__pyx_v_out[0])[__pyx_v_i]) = (((__pyx_v_a[0])[__pyx_v_i]) - ((__pyx_v_b[0])[__pyx_v_i]));
  }

  /* "pyorama/math3d/mat3.pyx":447
 * 
 *     @staticmethod
 *     cdef inline void c_sub(Mat3C *out, Mat3C *a, Mat3C *b) nogil:             # <<<<<<<<<<<<<<
 *         cdef size_t i = 0
 *         cdef size_t size = 9
 */

  /* function exit code */
}

/* "pyorama/math3d/mat3.pyx":454
 * 
 *     @staticmethod
 *     cdef inline void c_transpose(Mat3C *out, Mat3C *a) nogil:             # <<<<<<<<<<<<<<
 *         cdef float a0, a1, a2, a3, a4, a5, a6, a7, a8
 *         a0 = a[0][0]; a1 = a[0][1]; a2 = a[0][2];
 */

static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_transpose(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a) {
  float __pyx_v_a0;
  float __pyx_v_a1;
  float __pyx_v_a2;
  float __pyx_v_a3;
  float __pyx_v_a4;
  float __pyx_v_a5;
  float __pyx_v_a6;
  float __pyx_v_a7;
  float __pyx_v_a8;

  /* "pyorama/math3d/mat3.pyx":456
 *     cdef inline void c_transpose(Mat3C *out, Mat3C *a) nogil:
 *         cdef float a0, a1, a2, a3, a4, a5, a6, a7, a8
 *         a0 = a[0][0]; a1 = a[0][1]; a2 = a[0][2];             # <<<<<<<<<<<<<<
 *         a3 = a[0][3]; a4 = a[0][4]; a5 = a[0][5];
 *         a6 = a[0][6]; a7 = a[0][7]; a8 = a[0][8];
 */
  __pyx_v_a0 = ((__pyx_v_a[0])[0]);
  __pyx_v_a1 = ((__pyx_v_a[0])[1]);
  __pyx_v_a2 = ((__pyx_v_a[0])[2]);

  /* "pyorama/math3d/mat3.pyx":457
 *         cdef float a0, a1, a2, a3, a4, a5, a6, a7, a8
 *         a0 = a[0][0]; a1 = a[0][1]; a2 = a[0][2];
 *         a3 = a[0][3]; a4 = a[0][4]; a5 = a[0][5];             # <<<<<<<<<<<<<<
 *         a6 = a[0][6]; a7 = a[0][7]; a8 = a[0][8];
 *         out[0][0] = a0
 */
  __pyx_v_a3 = ((__pyx_v_a[0])[3]);
  __pyx_v_a4 = ((__pyx_v_a[0])[4]);
  __pyx_v_a5 = ((__pyx_v_a[0])[5]);

  /* "pyorama/math3d/mat3.pyx":458
 *         a0 = a[0][0]; a1 = a[0][1]; a2 = a[0][2];
 *         a3 = a[0][3]; a4 = a[0][4]; a5 = a[0][5];
 *         a6 = a[0][6]; a7 = a[0][7]; a8 = a[0][8];             # <<<<<<<<<<<<<<
 *         out[0][0] = a0
 *         out[0][1] = a3
 */
  __pyx_v_a6 = ((__pyx_v_a[0])[6]);
  __pyx_v_a7 = ((__pyx_v_a[0])[7]);
  __pyx_v_a8 = ((__pyx_v_a[0])[8]);

  /* "pyorama/math3d/mat3.pyx":459
 *         a3 = a[0][3]; a4 = a[0][4]; a5 = a[0][5];
 *         a6 = a[0][6]; a7 = a[0][7]; a8 = a[0][8];
 *         out[0][0] = a0             # <<<<<<<<<<<<<<
 *         out[0][1] = a3
 *         out[0][2] = a6
 */
  ((__pyx_v_out[0])[0]) = __pyx_v_a0;

  /* "pyorama/math3d/mat3.pyx":460
 *         a6 = a[0][6]; a7 = a[0][7]; a8 = a[0][8];
 *         out[0][0] = a0
 *         out[0][1] = a3             # <<<<<<<<<<<<<<
 *         out[0][2] = a6
 *         out[0][3] = a1
 */
  ((__pyx_v_out[0])[1]) = __pyx_v_a3;

  /* "pyorama/math3d/mat3.pyx":461
 *         out[0][0] = a0
 *         out[0][1] = a3
 *         out[0][2] = a6             # <<<<<<<<<<<<<<
 *         out[0][3] = a1
 *         out[0][4] = a4
 */
  ((__pyx_v_out[0])[2]) = __pyx_v_a6;

  /* "pyorama/math3d/mat3.pyx":462
 *         out[0][1] = a3
 *         out[0][2] = a6
 *         out[0][3] = a1             # <<<<<<<<<<<<<<
 *         out[0][4] = a4
 *         out[0][5] = a7
 */
  ((__pyx_v_out[0])[3]) = __pyx_v_a1;

  /* "pyorama/math3d/mat3.pyx":463
 *         out[0][2] = a6
 *         out[0][3] = a1
 *         out[0][4] = a4             # <<<<<<<<<<<<<<
 *         out[0][5] = a7
 *         out[0][6] = a2
 */
  ((__pyx_v_out[0])[4]) = __pyx_v_a4;

  /* "pyorama/math3d/mat3.pyx":464
 *         out[0][3] = a1
 *         out[0][4] = a4
 *         out[0][5] = a7             # <<<<<<<<<<<<<<
 *         out[0][6] = a2
 *         out[0][7] = a5
 */
  ((__pyx_v_out[0])[5]) = __pyx_v_a7;

  /* "pyorama/math3d/mat3.pyx":465
 *         out[0][4] = a4
 *         out[0][5] = a7
 *         out[0][6] = a2             # <<<<<<<<<<<<<<
 *         out[0][7] = a5
 *         out[0][8] = a8
 */
  ((__pyx_v_out[0])[6]) = __pyx_v_a2;

  /* "pyorama/math3d/mat3.pyx":466
 *         out[0][5] = a7
 *         out[0][6] = a2
 *         out[0][7] = a5             # <<<<<<<<<<<<<<
 *         out[0][8] = a8
 * 
 */
  ((__pyx_v_out[0])[7]) = __pyx_v_a5;

  /* "pyorama/math3d/mat3.pyx":467
 *         out[0][6] = a2
 *         out[0][7] = a5
 *         out[0][8] = a8             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  ((__pyx_v_out[0])[8]) = __pyx_v_a8;

  /* "pyorama/math3d/mat3.pyx":454
 * 
 *     @staticmethod
 *     cdef inline void c_transpose(Mat3C *out, Mat3C *a) nogil:             # <<<<<<<<<<<<<<
 *         cdef float a0, a1, a2, a3, a4, a5, a6, a7, a8
 *         a0 = a[0][0]; a1 = a[0][1]; a2 = a[0][2];
 */

  /* function exit code */
}

/* "pyorama/math3d/mat3.pyx":470
 * 
 *     @staticmethod
 *     cdef inline void c_translate(Mat3C *out, Mat3C *a, Vec2C *shift) nogil:             # <<<<<<<<<<<<<<
 *         cdef Mat3C trans_mat
 *         Mat3.c_from_translation(&trans_mat, shift)
 */

static CYTHON_INLINE void __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_translate(__pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_out, __pyx_t_7pyorama_6math3d_6common_Mat3C *__pyx_v_a, __pyx_t_7pyorama_6math3d_6common_Vec2C *__pyx_v_shift) {
  __pyx_t_7pyorama_6math3d_6common_Mat3C __pyx_v_trans_mat;

  /* "pyorama/math3d/mat3.pyx":472
 *     cdef inline void c_translate(Mat3C *out, Mat3C *a, Vec2C *shift) nogil:
 *         cdef Mat3C trans_mat
 *         Mat3.c_from_translation(&trans_mat, shift)             # <<<<<<<<<<<<<<
 *         Mat3.c_dot(out, a, &trans_mat)
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_translation((&__pyx_v_trans_mat), __pyx_v_shift);

  /* "pyorama/math3d/mat3.pyx":473
 *         cdef Mat3C trans_mat
 *         Mat3.c_from_translation(&trans_mat, shift)
 *         Mat3.c_dot(out, a, &trans_mat)             # <<<<<<<<<<<<<<
 */
  __pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_dot(__pyx_v_out, __pyx_v_a, (&__pyx_v_trans_mat));

  /* "pyorama/math3d/mat3.pyx":470
 * 
 *     @staticmethod
 *     cdef inline void c_translate(Mat3C *out, Mat3C *a, Vec2C *shift) nogil:             # <<<<<<<<<<<<<<
 *         cdef Mat3C trans_mat
 *         Mat3.c_from_translation(&trans_mat, shift)
 */

  /* function exit code */
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_73__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_73__reduce_cython__ = {"__reduce_cython__", (PyCFunction)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_73__reduce_cython__, METH_NOARGS, 0};
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_73__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_72__reduce_cython__(((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_72__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_75__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyMethodDef __pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_75__setstate_cython__ = {"__setstate_cython__", (PyCFunction)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_75__setstate_cython__, METH_O, 0};
static PyObject *__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_75__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pyorama_6math3d_4mat3_4Mat3_74__setstate_cython__(((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pyorama_6math3d_4mat3_4Mat3_74__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyorama.math3d.mat3.Mat3.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "carray.to_py":112
 * 
 * @cname("__Pyx_carray_to_py_float")
 * cdef inline list __Pyx_carray_to_py_float(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

static CYTHON_INLINE PyObject *__Pyx_carray_to_py_float(float *__pyx_v_v, Py_ssize_t __pyx_v_length) {
  size_t __pyx_v_i;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_l = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  __Pyx_RefNannySetupContext("__Pyx_carray_to_py_float", 0);

  /* "carray.to_py":115
 *     cdef size_t i
 *     cdef object value
 *     l = PyList_New(length)             # <<<<<<<<<<<<<<
 *     for i in range(<size_t>length):
 *         value = v[i]
 */
  __pyx_t_1 = PyList_New(__pyx_v_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_l = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "carray.to_py":116
 *     cdef object value
 *     l = PyList_New(length)
 *     for i in range(<size_t>length):             # <<<<<<<<<<<<<<
 *         value = v[i]
 *         Py_INCREF(value)
 */
  __pyx_t_2 = ((size_t)__pyx_v_length);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "carray.to_py":117
 *     l = PyList_New(length)
 *     for i in range(<size_t>length):
 *         value = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(value)
 *         PyList_SET_ITEM(l, i, value)
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "carray.to_py":118
 *     for i in range(<size_t>length):
 *         value = v[i]
 *         Py_INCREF(value)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(l, i, value)
 *     return l
 */
    Py_INCREF(__pyx_v_value);

    /* "carray.to_py":119
 *         value = v[i]
 *         Py_INCREF(value)
 *         PyList_SET_ITEM(l, i, value)             # <<<<<<<<<<<<<<
 *     return l
 * 
 */
    PyList_SET_ITEM(__pyx_v_l, __pyx_v_i, __pyx_v_value);
  }

  /* "carray.to_py":120
 *         Py_INCREF(value)
 *         PyList_SET_ITEM(l, i, value)
 *     return l             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_l);
  __pyx_r = __pyx_v_l;
  goto __pyx_L0;

  /* "carray.to_py":112
 * 
 * @cname("__Pyx_carray_to_py_float")
 * cdef inline list __Pyx_carray_to_py_float(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("carray.to_py.__Pyx_carray_to_py_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_l);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "carray.to_py":124
 * 
 * @cname("__Pyx_carray_to_tuple_float")
 * cdef inline tuple __Pyx_carray_to_tuple_float(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

static CYTHON_INLINE PyObject *__Pyx_carray_to_tuple_float(float *__pyx_v_v, Py_ssize_t __pyx_v_length) {
  size_t __pyx_v_i;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  __Pyx_RefNannySetupContext("__Pyx_carray_to_tuple_float", 0);

  /* "carray.to_py":127
 *     cdef size_t i
 *     cdef object value
 *     t = PyTuple_New(length)             # <<<<<<<<<<<<<<
 *     for i in range(<size_t>length):
 *         value = v[i]
 */
  __pyx_t_1 = PyTuple_New(__pyx_v_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_t = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "carray.to_py":128
 *     cdef object value
 *     t = PyTuple_New(length)
 *     for i in range(<size_t>length):             # <<<<<<<<<<<<<<
 *         value = v[i]
 *         Py_INCREF(value)
 */
  __pyx_t_2 = ((size_t)__pyx_v_length);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "carray.to_py":129
 *     t = PyTuple_New(length)
 *     for i in range(<size_t>length):
 *         value = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(value)
 *         PyTuple_SET_ITEM(t, i, value)
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "carray.to_py":130
 *     for i in range(<size_t>length):
 *         value = v[i]
 *         Py_INCREF(value)             # <<<<<<<<<<<<<<
 *         PyTuple_SET_ITEM(t, i, value)
 *     return t
 */
    Py_INCREF(__pyx_v_value);

    /* "carray.to_py":131
 *         value = v[i]
 *         Py_INCREF(value)
 *         PyTuple_SET_ITEM(t, i, value)             # <<<<<<<<<<<<<<
 *     return t
 */
    PyTuple_SET_ITEM(__pyx_v_t, __pyx_v_i, __pyx_v_value);
  }

  /* "carray.to_py":132
 *         Py_INCREF(value)
 *         PyTuple_SET_ITEM(t, i, value)
 *     return t             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_t);
  __pyx_r = __pyx_v_t;
  goto __pyx_L0;

  /* "carray.to_py":124
 * 
 * @cname("__Pyx_carray_to_tuple_float")
 * cdef inline tuple __Pyx_carray_to_tuple_float(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("carray.to_py.__Pyx_carray_to_tuple_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_7pyorama_6math3d_4mat3_Mat3 __pyx_vtable_7pyorama_6math3d_4mat3_Mat3;

static PyObject *__pyx_tp_new_7pyorama_6math3d_4mat3_Mat3(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3 *)o);
  p->__pyx_vtab = __pyx_vtabptr_7pyorama_6math3d_4mat3_Mat3;
  return o;
}

static void __pyx_tp_dealloc_7pyorama_6math3d_4mat3_Mat3(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7pyorama_6math3d_4mat3_4Mat3_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_7pyorama_6math3d_4mat3_Mat3(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_7pyorama_6math3d_4mat3_Mat3(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_7pyorama_6math3d_4mat3_4Mat3_11__setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyMethodDef __pyx_methods_7pyorama_6math3d_4mat3_Mat3[] = {
  {"add", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_13add, METH_VARARGS|METH_KEYWORDS, 0},
  {"copy", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_15copy, METH_VARARGS|METH_KEYWORDS, 0},
  {"det", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_17det, METH_VARARGS|METH_KEYWORDS, 0},
  {"div", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_19div, METH_VARARGS|METH_KEYWORDS, 0},
  {"dot", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_21dot, METH_VARARGS|METH_KEYWORDS, 0},
  {"equals", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_23equals, METH_VARARGS|METH_KEYWORDS, 0},
  {"from_mat4", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_25from_mat4, METH_VARARGS|METH_KEYWORDS, 0},
  {"from_quat", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_27from_quat, METH_VARARGS|METH_KEYWORDS, 0},
  {"from_rotation", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_29from_rotation, METH_VARARGS|METH_KEYWORDS, 0},
  {"from_scaling", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_31from_scaling, METH_VARARGS|METH_KEYWORDS, 0},
  {"from_skewing", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_33from_skewing, METH_VARARGS|METH_KEYWORDS, 0},
  {"from_skewing_x", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_35from_skewing_x, METH_VARARGS|METH_KEYWORDS, 0},
  {"from_skewing_y", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_37from_skewing_y, METH_VARARGS|METH_KEYWORDS, 0},
  {"from_translation", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_39from_translation, METH_VARARGS|METH_KEYWORDS, 0},
  {"identity", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_41identity, METH_VARARGS|METH_KEYWORDS, 0},
  {"inv", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_43inv, METH_VARARGS|METH_KEYWORDS, 0},
  {"mul", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_45mul, METH_VARARGS|METH_KEYWORDS, 0},
  {"nearly_equals", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_47nearly_equals, METH_VARARGS|METH_KEYWORDS, 0},
  {"normal_from_mat4", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_49normal_from_mat4, METH_VARARGS|METH_KEYWORDS, 0},
  {"random", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_51random, METH_VARARGS|METH_KEYWORDS, 0},
  {"rotate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_53rotate, METH_VARARGS|METH_KEYWORDS, 0},
  {"scale", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_55scale, METH_VARARGS|METH_KEYWORDS, 0},
  {"scale_add", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_57scale_add, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_data", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_59set_data, METH_VARARGS|METH_KEYWORDS, 0},
  {"skew", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_61skew, METH_VARARGS|METH_KEYWORDS, 0},
  {"skew_x", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_63skew_x, METH_VARARGS|METH_KEYWORDS, 0},
  {"skew_y", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_65skew_y, METH_VARARGS|METH_KEYWORDS, 0},
  {"sub", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_67sub, METH_VARARGS|METH_KEYWORDS, 0},
  {"transpose", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_69transpose, METH_VARARGS|METH_KEYWORDS, 0},
  {"translate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_71translate, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_73__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7pyorama_6math3d_4mat3_4Mat3_75__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Mat3 = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_7pyorama_6math3d_4mat3_Mat3, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Mat3 = {
  0, /*mp_length*/
  __pyx_pw_7pyorama_6math3d_4mat3_4Mat3_9__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_7pyorama_6math3d_4mat3_Mat3, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Mat3 = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_pw_7pyorama_6math3d_4mat3_4Mat3_5__getbuffer__, /*bf_getbuffer*/
  __pyx_pw_7pyorama_6math3d_4mat3_4Mat3_7__releasebuffer__, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type_7pyorama_6math3d_4mat3_Mat3 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyorama.math3d.mat3.Mat3", /*tp_name*/
  sizeof(struct __pyx_obj_7pyorama_6math3d_4mat3_Mat3), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7pyorama_6math3d_4mat3_Mat3, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Mat3, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Mat3, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Mat3, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7pyorama_6math3d_4mat3_Mat3, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7pyorama_6math3d_4mat3_4Mat3_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7pyorama_6math3d_4mat3_Mat3, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_mat3(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_mat3},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "mat3",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_0_is_not_an_invertible_matrix, __pyx_k_0_is_not_an_invertible_matrix, sizeof(__pyx_k_0_is_not_an_invertible_matrix), 0, 1, 0, 0},
  {&__pyx_n_s_Mat3, __pyx_k_Mat3, sizeof(__pyx_k_Mat3), 0, 0, 1, 1},
  {&__pyx_n_s_Mat3___reduce_cython, __pyx_k_Mat3___reduce_cython, sizeof(__pyx_k_Mat3___reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_Mat3___setstate_cython, __pyx_k_Mat3___setstate_cython, sizeof(__pyx_k_Mat3___setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_Mat3_add, __pyx_k_Mat3_add, sizeof(__pyx_k_Mat3_add), 0, 0, 1, 1},
  {&__pyx_n_s_Mat3_copy, __pyx_k_Mat3_copy, sizeof(__pyx_k_Mat3_copy), 0, 0, 1, 1},
  {&__pyx_n_s_Mat3_det, __pyx_k_Mat3_det, sizeof(__pyx_k_Mat3_det), 0, 0, 1, 1},
  {&__pyx_n_s_Mat3_div, __pyx_k_Mat3_div, sizeof(__pyx_k_Mat3_div), 0, 0, 1, 1},
  {&__pyx_n_s_Mat3_dot, __pyx_k_Mat3_dot, sizeof(__pyx_k_Mat3_dot), 0, 0, 1, 1},
  {&__pyx_n_s_Mat3_equals, __pyx_k_Mat3_equals, sizeof(__pyx_k_Mat3_equals), 0, 0, 1, 1},
  {&__pyx_n_s_Mat3_from_mat4, __pyx_k_Mat3_from_mat4, sizeof(__pyx_k_Mat3_from_mat4), 0, 0, 1, 1},
  {&__pyx_n_s_Mat3_from_quat, __pyx_k_Mat3_from_quat, sizeof(__pyx_k_Mat3_from_quat), 0, 0, 1, 1},
  {&__pyx_n_s_Mat3_from_rotation, __pyx_k_Mat3_from_rotation, sizeof(__pyx_k_Mat3_from_rotation), 0, 0, 1, 1},
  {&__pyx_n_s_Mat3_from_scaling, __pyx_k_Mat3_from_scaling, sizeof(__pyx_k_Mat3_from_scaling), 0, 0, 1, 1},
  {&__pyx_n_s_Mat3_from_skewing, __pyx_k_Mat3_from_skewing, sizeof(__pyx_k_Mat3_from_skewing), 0, 0, 1, 1},
  {&__pyx_n_s_Mat3_from_skewing_x, __pyx_k_Mat3_from_skewing_x, sizeof(__pyx_k_Mat3_from_skewing_x), 0, 0, 1, 1},
  {&__pyx_n_s_Mat3_from_skewing_y, __pyx_k_Mat3_from_skewing_y, sizeof(__pyx_k_Mat3_from_skewing_y), 0, 0, 1, 1},
  {&__pyx_n_s_Mat3_from_translation, __pyx_k_Mat3_from_translation, sizeof(__pyx_k_Mat3_from_translation), 0, 0, 1, 1},
  {&__pyx_n_s_Mat3_identity, __pyx_k_Mat3_identity, sizeof(__pyx_k_Mat3_identity), 0, 0, 1, 1},
  {&__pyx_n_s_Mat3_inv, __pyx_k_Mat3_inv, sizeof(__pyx_k_Mat3_inv), 0, 0, 1, 1},
  {&__pyx_n_s_Mat3_mul, __pyx_k_Mat3_mul, sizeof(__pyx_k_Mat3_mul), 0, 0, 1, 1},
  {&__pyx_n_s_Mat3_nearly_equals, __pyx_k_Mat3_nearly_equals, sizeof(__pyx_k_Mat3_nearly_equals), 0, 0, 1, 1},
  {&__pyx_n_s_Mat3_normal_from_mat4, __pyx_k_Mat3_normal_from_mat4, sizeof(__pyx_k_Mat3_normal_from_mat4), 0, 0, 1, 1},
  {&__pyx_n_s_Mat3_random, __pyx_k_Mat3_random, sizeof(__pyx_k_Mat3_random), 0, 0, 1, 1},
  {&__pyx_n_s_Mat3_rotate, __pyx_k_Mat3_rotate, sizeof(__pyx_k_Mat3_rotate), 0, 0, 1, 1},
  {&__pyx_n_s_Mat3_scale, __pyx_k_Mat3_scale, sizeof(__pyx_k_Mat3_scale), 0, 0, 1, 1},
  {&__pyx_n_s_Mat3_scale_add, __pyx_k_Mat3_scale_add, sizeof(__pyx_k_Mat3_scale_add), 0, 0, 1, 1},
  {&__pyx_n_s_Mat3_set_data, __pyx_k_Mat3_set_data, sizeof(__pyx_k_Mat3_set_data), 0, 0, 1, 1},
  {&__pyx_n_s_Mat3_skew, __pyx_k_Mat3_skew, sizeof(__pyx_k_Mat3_skew), 0, 0, 1, 1},
  {&__pyx_n_s_Mat3_skew_x, __pyx_k_Mat3_skew_x, sizeof(__pyx_k_Mat3_skew_x), 0, 0, 1, 1},
  {&__pyx_n_s_Mat3_skew_y, __pyx_k_Mat3_skew_y, sizeof(__pyx_k_Mat3_skew_y), 0, 0, 1, 1},
  {&__pyx_n_s_Mat3_sub, __pyx_k_Mat3_sub, sizeof(__pyx_k_Mat3_sub), 0, 0, 1, 1},
  {&__pyx_n_s_Mat3_translate, __pyx_k_Mat3_translate, sizeof(__pyx_k_Mat3_translate), 0, 0, 1, 1},
  {&__pyx_n_s_Mat3_transpose, __pyx_k_Mat3_transpose, sizeof(__pyx_k_Mat3_transpose), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_add, __pyx_k_add, sizeof(__pyx_k_add), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_det, __pyx_k_det, sizeof(__pyx_k_det), 0, 0, 1, 1},
  {&__pyx_n_s_div, __pyx_k_div, sizeof(__pyx_k_div), 0, 0, 1, 1},
  {&__pyx_n_s_dot, __pyx_k_dot, sizeof(__pyx_k_dot), 0, 0, 1, 1},
  {&__pyx_n_s_epsilon, __pyx_k_epsilon, sizeof(__pyx_k_epsilon), 0, 0, 1, 1},
  {&__pyx_n_s_equals, __pyx_k_equals, sizeof(__pyx_k_equals), 0, 0, 1, 1},
  {&__pyx_n_s_factor, __pyx_k_factor, sizeof(__pyx_k_factor), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_from_mat4, __pyx_k_from_mat4, sizeof(__pyx_k_from_mat4), 0, 0, 1, 1},
  {&__pyx_n_s_from_quat, __pyx_k_from_quat, sizeof(__pyx_k_from_quat), 0, 0, 1, 1},
  {&__pyx_n_s_from_rotation, __pyx_k_from_rotation, sizeof(__pyx_k_from_rotation), 0, 0, 1, 1},
  {&__pyx_n_s_from_scaling, __pyx_k_from_scaling, sizeof(__pyx_k_from_scaling), 0, 0, 1, 1},
  {&__pyx_n_s_from_skewing, __pyx_k_from_skewing, sizeof(__pyx_k_from_skewing), 0, 0, 1, 1},
  {&__pyx_n_s_from_skewing_x, __pyx_k_from_skewing_x, sizeof(__pyx_k_from_skewing_x), 0, 0, 1, 1},
  {&__pyx_n_s_from_skewing_y, __pyx_k_from_skewing_y, sizeof(__pyx_k_from_skewing_y), 0, 0, 1, 1},
  {&__pyx_n_s_from_translation, __pyx_k_from_translation, sizeof(__pyx_k_from_translation), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_identity, __pyx_k_identity, sizeof(__pyx_k_identity), 0, 0, 1, 1},
  {&__pyx_n_s_inv, __pyx_k_inv, sizeof(__pyx_k_inv), 0, 0, 1, 1},
  {&__pyx_kp_u_invalid_index, __pyx_k_invalid_index, sizeof(__pyx_k_invalid_index), 0, 1, 0, 0},
  {&__pyx_n_s_m00, __pyx_k_m00, sizeof(__pyx_k_m00), 0, 0, 1, 1},
  {&__pyx_n_s_m01, __pyx_k_m01, sizeof(__pyx_k_m01), 0, 0, 1, 1},
  {&__pyx_n_s_m02, __pyx_k_m02, sizeof(__pyx_k_m02), 0, 0, 1, 1},
  {&__pyx_n_s_m10, __pyx_k_m10, sizeof(__pyx_k_m10), 0, 0, 1, 1},
  {&__pyx_n_s_m11, __pyx_k_m11, sizeof(__pyx_k_m11), 0, 0, 1, 1},
  {&__pyx_n_s_m12, __pyx_k_m12, sizeof(__pyx_k_m12), 0, 0, 1, 1},
  {&__pyx_n_s_m20, __pyx_k_m20, sizeof(__pyx_k_m20), 0, 0, 1, 1},
  {&__pyx_n_s_m21, __pyx_k_m21, sizeof(__pyx_k_m21), 0, 0, 1, 1},
  {&__pyx_n_s_m22, __pyx_k_m22, sizeof(__pyx_k_m22), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_mul, __pyx_k_mul, sizeof(__pyx_k_mul), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_nearly_equals, __pyx_k_nearly_equals, sizeof(__pyx_k_nearly_equals), 0, 0, 1, 1},
  {&__pyx_n_s_normal_from_mat4, __pyx_k_normal_from_mat4, sizeof(__pyx_k_normal_from_mat4), 0, 0, 1, 1},
  {&__pyx_n_s_out, __pyx_k_out, sizeof(__pyx_k_out), 0, 0, 1, 1},
  {&__pyx_n_s_ptr, __pyx_k_ptr, sizeof(__pyx_k_ptr), 0, 0, 1, 1},
  {&__pyx_n_s_pyorama_math3d_mat3, __pyx_k_pyorama_math3d_mat3, sizeof(__pyx_k_pyorama_math3d_mat3), 0, 0, 1, 1},
  {&__pyx_kp_s_pyorama_math3d_mat3_pyx, __pyx_k_pyorama_math3d_mat3_pyx, sizeof(__pyx_k_pyorama_math3d_mat3_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_radians, __pyx_k_radians, sizeof(__pyx_k_radians), 0, 0, 1, 1},
  {&__pyx_n_s_random, __pyx_k_random, sizeof(__pyx_k_random), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_rotate, __pyx_k_rotate, sizeof(__pyx_k_rotate), 0, 0, 1, 1},
  {&__pyx_n_s_scale, __pyx_k_scale, sizeof(__pyx_k_scale), 0, 0, 1, 1},
  {&__pyx_n_s_scale_add, __pyx_k_scale_add, sizeof(__pyx_k_scale_add), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_kp_s_self_ptr_cannot_be_converted_to, __pyx_k_self_ptr_cannot_be_converted_to, sizeof(__pyx_k_self_ptr_cannot_be_converted_to), 0, 0, 1, 0},
  {&__pyx_n_s_set_data, __pyx_k_set_data, sizeof(__pyx_k_set_data), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shift, __pyx_k_shift, sizeof(__pyx_k_shift), 0, 0, 1, 1},
  {&__pyx_n_s_skew, __pyx_k_skew, sizeof(__pyx_k_skew), 0, 0, 1, 1},
  {&__pyx_n_s_skew_x, __pyx_k_skew_x, sizeof(__pyx_k_skew_x), 0, 0, 1, 1},
  {&__pyx_n_s_skew_y, __pyx_k_skew_y, sizeof(__pyx_k_skew_y), 0, 0, 1, 1},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_sub, __pyx_k_sub, sizeof(__pyx_k_sub), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_translate, __pyx_k_translate, sizeof(__pyx_k_translate), 0, 0, 1, 1},
  {&__pyx_n_s_transpose, __pyx_k_transpose, sizeof(__pyx_k_transpose), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(0, 38, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 29, __pyx_L1_error)
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) __PYX_ERR(0, 167, __pyx_L1_error)
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) __PYX_ERR(0, 167, __pyx_L1_error)
  #endif
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(1, 116, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "pyorama/math3d/mat3.pyx":29
 *         cdef size_t size = 9
 *         if i < 0 or i >= size:
 *             raise ValueError("invalid index")             # <<<<<<<<<<<<<<
 *         return self.ptr[0][i]
 * 
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_invalid_index); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_self_ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":4
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_self_ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "pyorama/math3d/mat3.pyx":39
 * 
 *     @staticmethod
 *     def add(Mat3 out, Mat3 a, Mat3 b):             # <<<<<<<<<<<<<<
 *         Mat3.c_add(out.ptr, a.ptr, b.ptr)
 * 
 */
  __pyx_tuple__6 = PyTuple_Pack(3, __pyx_n_s_out, __pyx_n_s_a, __pyx_n_s_b); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);
  __pyx_codeobj__7 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__6, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_math3d_mat3_pyx, __pyx_n_s_add, 39, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__7)) __PYX_ERR(0, 39, __pyx_L1_error)

  /* "pyorama/math3d/mat3.pyx":43
 * 
 *     @staticmethod
 *     def copy(Mat3 out, Mat3 a):             # <<<<<<<<<<<<<<
 *         Mat3.c_copy(out.ptr, a.ptr)
 * 
 */
  __pyx_tuple__8 = PyTuple_Pack(2, __pyx_n_s_out, __pyx_n_s_a); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);
  __pyx_codeobj__9 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__8, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_math3d_mat3_pyx, __pyx_n_s_copy, 43, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__9)) __PYX_ERR(0, 43, __pyx_L1_error)

  /* "pyorama/math3d/mat3.pyx":47
 * 
 *     @staticmethod
 *     def det(Mat3 a):             # <<<<<<<<<<<<<<
 *         return Mat3.c_det(a.ptr)
 * 
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_n_s_a); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);
  __pyx_codeobj__11 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__10, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_math3d_mat3_pyx, __pyx_n_s_det, 47, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__11)) __PYX_ERR(0, 47, __pyx_L1_error)

  /* "pyorama/math3d/mat3.pyx":51
 * 
 *     @staticmethod
 *     def div(Mat3 out, Mat3 a, Mat3 b):             # <<<<<<<<<<<<<<
 *         Mat3.c_div(out.ptr, a.ptr, b.ptr)
 * 
 */
  __pyx_tuple__12 = PyTuple_Pack(3, __pyx_n_s_out, __pyx_n_s_a, __pyx_n_s_b); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);
  __pyx_codeobj__13 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_math3d_mat3_pyx, __pyx_n_s_div, 51, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__13)) __PYX_ERR(0, 51, __pyx_L1_error)

  /* "pyorama/math3d/mat3.pyx":55
 * 
 *     @staticmethod
 *     def dot(Mat3 out, Mat3 a, Mat3 b):             # <<<<<<<<<<<<<<
 *         Mat3.c_dot(out.ptr, a.ptr, b.ptr)
 * 
 */
  __pyx_tuple__14 = PyTuple_Pack(3, __pyx_n_s_out, __pyx_n_s_a, __pyx_n_s_b); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);
  __pyx_codeobj__15 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_math3d_mat3_pyx, __pyx_n_s_dot, 55, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__15)) __PYX_ERR(0, 55, __pyx_L1_error)

  /* "pyorama/math3d/mat3.pyx":59
 * 
 *     @staticmethod
 *     def equals(Mat3 a, Mat3 b):             # <<<<<<<<<<<<<<
 *         return Mat3.c_equals(a.ptr, b.ptr)
 * 
 */
  __pyx_tuple__16 = PyTuple_Pack(2, __pyx_n_s_a, __pyx_n_s_b); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);
  __pyx_codeobj__17 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__16, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_math3d_mat3_pyx, __pyx_n_s_equals, 59, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__17)) __PYX_ERR(0, 59, __pyx_L1_error)

  /* "pyorama/math3d/mat3.pyx":63
 * 
 *     @staticmethod
 *     def from_mat4(Mat3 out, Mat4 a):             # <<<<<<<<<<<<<<
 *         Mat3.c_from_mat4(out.ptr, a.ptr)
 * 
 */
  __pyx_tuple__18 = PyTuple_Pack(2, __pyx_n_s_out, __pyx_n_s_a); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);
  __pyx_codeobj__19 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_math3d_mat3_pyx, __pyx_n_s_from_mat4, 63, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__19)) __PYX_ERR(0, 63, __pyx_L1_error)

  /* "pyorama/math3d/mat3.pyx":67
 * 
 *     @staticmethod
 *     def from_quat(Mat3 out, Quat a):             # <<<<<<<<<<<<<<
 *         Mat3.c_from_quat(out.ptr, a.ptr)
 * 
 */
  __pyx_tuple__20 = PyTuple_Pack(2, __pyx_n_s_out, __pyx_n_s_a); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__20, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_math3d_mat3_pyx, __pyx_n_s_from_quat, 67, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) __PYX_ERR(0, 67, __pyx_L1_error)

  /* "pyorama/math3d/mat3.pyx":71
 * 
 *     @staticmethod
 *     def from_rotation(Mat3 out, float radians):             # <<<<<<<<<<<<<<
 *         Mat3.c_from_rotation(out.ptr, radians)
 * 
 */
  __pyx_tuple__22 = PyTuple_Pack(2, __pyx_n_s_out, __pyx_n_s_radians); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__22, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_math3d_mat3_pyx, __pyx_n_s_from_rotation, 71, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(0, 71, __pyx_L1_error)

  /* "pyorama/math3d/mat3.pyx":75
 * 
 *     @staticmethod
 *     def from_scaling(Mat3 out, Vec2 scale):             # <<<<<<<<<<<<<<
 *         Mat3.c_from_scaling(out.ptr, scale.ptr)
 * 
 */
  __pyx_tuple__24 = PyTuple_Pack(2, __pyx_n_s_out, __pyx_n_s_scale); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_math3d_mat3_pyx, __pyx_n_s_from_scaling, 75, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(0, 75, __pyx_L1_error)

  /* "pyorama/math3d/mat3.pyx":79
 * 
 *     @staticmethod
 *     def from_skewing(Mat3 out, Vec2 factor):             # <<<<<<<<<<<<<<
 *         Mat3.c_from_skewing(out.ptr, factor.ptr)
 * 
 */
  __pyx_tuple__26 = PyTuple_Pack(2, __pyx_n_s_out, __pyx_n_s_factor); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_math3d_mat3_pyx, __pyx_n_s_from_skewing, 79, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(0, 79, __pyx_L1_error)

  /* "pyorama/math3d/mat3.pyx":83
 * 
 *     @staticmethod
 *     def from_skewing_x(Mat3 out, float radians):             # <<<<<<<<<<<<<<
 *         Mat3.c_from_skewing_x(out.ptr, radians.ptr)
 * 
 */
  __pyx_tuple__28 = PyTuple_Pack(2, __pyx_n_s_out, __pyx_n_s_radians); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_math3d_mat3_pyx, __pyx_n_s_from_skewing_x, 83, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(0, 83, __pyx_L1_error)

  /* "pyorama/math3d/mat3.pyx":87
 * 
 *     @staticmethod
 *     def from_skewing_y(Mat3 out, float radians):             # <<<<<<<<<<<<<<
 *         Mat3.c_from_skewing_y(out.ptr, radians.ptr)
 * 
 */
  __pyx_tuple__30 = PyTuple_Pack(2, __pyx_n_s_out, __pyx_n_s_radians); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);
  __pyx_codeobj__31 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__30, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_math3d_mat3_pyx, __pyx_n_s_from_skewing_y, 87, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__31)) __PYX_ERR(0, 87, __pyx_L1_error)

  /* "pyorama/math3d/mat3.pyx":91
 * 
 *     @staticmethod
 *     def from_translation(Mat3 out, Vec2 shift):             # <<<<<<<<<<<<<<
 *         Mat3.c_from_translation(out.ptr, shift.ptr)
 * 
 */
  __pyx_tuple__32 = PyTuple_Pack(2, __pyx_n_s_out, __pyx_n_s_shift); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_math3d_mat3_pyx, __pyx_n_s_from_translation, 91, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(0, 91, __pyx_L1_error)

  /* "pyorama/math3d/mat3.pyx":95
 * 
 *     @staticmethod
 *     def identity(Mat3 out):             # <<<<<<<<<<<<<<
 *         Mat3.c_identity(out.ptr)
 * 
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_n_s_out); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_math3d_mat3_pyx, __pyx_n_s_identity, 95, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(0, 95, __pyx_L1_error)

  /* "pyorama/math3d/mat3.pyx":99
 * 
 *     @staticmethod
 *     def inv(Mat3 out, Mat3 a):             # <<<<<<<<<<<<<<
 *         Mat3.c_inv(out.ptr, a.ptr)
 * 
 */
  __pyx_tuple__36 = PyTuple_Pack(2, __pyx_n_s_out, __pyx_n_s_a); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_math3d_mat3_pyx, __pyx_n_s_inv, 99, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 99, __pyx_L1_error)

  /* "pyorama/math3d/mat3.pyx":103
 * 
 *     @staticmethod
 *     def mul(Mat3 out, Mat3 a, Mat3 b):             # <<<<<<<<<<<<<<
 *         Mat3.c_mul(out.ptr, a.ptr, b.ptr)
 * 
 */
  __pyx_tuple__38 = PyTuple_Pack(3, __pyx_n_s_out, __pyx_n_s_a, __pyx_n_s_b); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_math3d_mat3_pyx, __pyx_n_s_mul, 103, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(0, 103, __pyx_L1_error)

  /* "pyorama/math3d/mat3.pyx":107
 * 
 *     @staticmethod
 *     def nearly_equals(Mat3 a, Mat3 b, float epsilon=epsilon):             # <<<<<<<<<<<<<<
 *         return Mat3.c_nearly_equals(a.ptr, b.ptr, epsilon)
 * 
 */
  __pyx_tuple__40 = PyTuple_Pack(3, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_epsilon); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_math3d_mat3_pyx, __pyx_n_s_nearly_equals, 107, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 107, __pyx_L1_error)

  /* "pyorama/math3d/mat3.pyx":111
 * 
 *     @staticmethod
 *     def normal_from_mat4(Mat3 out, Mat4 a):             # <<<<<<<<<<<<<<
 *         Mat3.c_normal_from_mat4(out.ptr, a.ptr)
 * 
 */
  __pyx_tuple__42 = PyTuple_Pack(2, __pyx_n_s_out, __pyx_n_s_a); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_math3d_mat3_pyx, __pyx_n_s_normal_from_mat4, 111, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(0, 111, __pyx_L1_error)

  /* "pyorama/math3d/mat3.pyx":115
 * 
 *     @staticmethod
 *     def random(Mat3 out):             # <<<<<<<<<<<<<<
 *         Mat3.c_random(out.ptr)
 * 
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_n_s_out); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__44, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_math3d_mat3_pyx, __pyx_n_s_random, 115, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) __PYX_ERR(0, 115, __pyx_L1_error)

  /* "pyorama/math3d/mat3.pyx":119
 * 
 *     @staticmethod
 *     def rotate(Mat3 out, Mat3 a, float radians):             # <<<<<<<<<<<<<<
 *         Mat3.c_rotate(out.ptr, a.ptr, radians)
 * 
 */
  __pyx_tuple__46 = PyTuple_Pack(3, __pyx_n_s_out, __pyx_n_s_a, __pyx_n_s_radians); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_math3d_mat3_pyx, __pyx_n_s_rotate, 119, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(0, 119, __pyx_L1_error)

  /* "pyorama/math3d/mat3.pyx":123
 * 
 *     @staticmethod
 *     def scale(Mat3 out, Mat3 a, Vec2 factor):             # <<<<<<<<<<<<<<
 *         Mat3.c_scale(out.ptr, a.ptr, factor.ptr)
 * 
 */
  __pyx_tuple__48 = PyTuple_Pack(3, __pyx_n_s_out, __pyx_n_s_a, __pyx_n_s_factor); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_math3d_mat3_pyx, __pyx_n_s_scale, 123, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) __PYX_ERR(0, 123, __pyx_L1_error)

  /* "pyorama/math3d/mat3.pyx":127
 * 
 *     @staticmethod
 *     def scale_add(Mat3 out, Mat3 a, float scale=1.0, float add=0.0):             # <<<<<<<<<<<<<<
 *         Mat3.c_scale_add(out.ptr, a.ptr, scale, add)
 * 
 */
  __pyx_tuple__50 = PyTuple_Pack(4, __pyx_n_s_out, __pyx_n_s_a, __pyx_n_s_scale, __pyx_n_s_add); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);
  __pyx_codeobj__51 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_math3d_mat3_pyx, __pyx_n_s_scale_add, 127, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__51)) __PYX_ERR(0, 127, __pyx_L1_error)

  /* "pyorama/math3d/mat3.pyx":131
 * 
 *     @staticmethod
 *     def set_data(Mat3 out, float m00=0.0, float m01=0.0, float m02=0.0,             # <<<<<<<<<<<<<<
 *             float m10=0.0, float m11=0.0, float m12=0.0,
 *             float m20=0.0, float m21=0.0, float m22=0.0):
 */
  __pyx_tuple__52 = PyTuple_Pack(10, __pyx_n_s_out, __pyx_n_s_m00, __pyx_n_s_m01, __pyx_n_s_m02, __pyx_n_s_m10, __pyx_n_s_m11, __pyx_n_s_m12, __pyx_n_s_m20, __pyx_n_s_m21, __pyx_n_s_m22); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);
  __pyx_codeobj__53 = (PyObject*)__Pyx_PyCode_New(10, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__52, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_math3d_mat3_pyx, __pyx_n_s_set_data, 131, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__53)) __PYX_ERR(0, 131, __pyx_L1_error)

  /* "pyorama/math3d/mat3.pyx":140
 * 
 *     @staticmethod
 *     def skew(Mat3 out, Mat3 a, Vec2 factor):             # <<<<<<<<<<<<<<
 *         Mat3.c_skew(out.ptr, a.ptr, factor.ptr)
 * 
 */
  __pyx_tuple__54 = PyTuple_Pack(3, __pyx_n_s_out, __pyx_n_s_a, __pyx_n_s_factor); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  __pyx_codeobj__55 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_math3d_mat3_pyx, __pyx_n_s_skew, 140, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__55)) __PYX_ERR(0, 140, __pyx_L1_error)

  /* "pyorama/math3d/mat3.pyx":144
 * 
 *     @staticmethod
 *     def skew_x(Mat3 out, Mat3 a, float radians):             # <<<<<<<<<<<<<<
 *         Mat3.c_skew_x(out.ptr, a.ptr, radians)
 * 
 */
  __pyx_tuple__56 = PyTuple_Pack(3, __pyx_n_s_out, __pyx_n_s_a, __pyx_n_s_radians); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);
  __pyx_codeobj__57 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__56, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_math3d_mat3_pyx, __pyx_n_s_skew_x, 144, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__57)) __PYX_ERR(0, 144, __pyx_L1_error)

  /* "pyorama/math3d/mat3.pyx":148
 * 
 *     @staticmethod
 *     def skew_y(Mat3 out, Mat3 a, float radians):             # <<<<<<<<<<<<<<
 *         Mat3.c_skew_y(out.ptr, a.ptr, radians)
 * 
 */
  __pyx_tuple__58 = PyTuple_Pack(3, __pyx_n_s_out, __pyx_n_s_a, __pyx_n_s_radians); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);
  __pyx_codeobj__59 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_math3d_mat3_pyx, __pyx_n_s_skew_y, 148, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__59)) __PYX_ERR(0, 148, __pyx_L1_error)

  /* "pyorama/math3d/mat3.pyx":152
 * 
 *     @staticmethod
 *     def sub(Mat3 out, Mat3 a, Mat3 b):             # <<<<<<<<<<<<<<
 *         Mat3.c_sub(out.ptr, a.ptr, b.ptr)
 * 
 */
  __pyx_tuple__60 = PyTuple_Pack(3, __pyx_n_s_out, __pyx_n_s_a, __pyx_n_s_b); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);
  __pyx_codeobj__61 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__60, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_math3d_mat3_pyx, __pyx_n_s_sub, 152, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__61)) __PYX_ERR(0, 152, __pyx_L1_error)

  /* "pyorama/math3d/mat3.pyx":156
 * 
 *     @staticmethod
 *     def transpose(Mat3 out, Mat3 a):             # <<<<<<<<<<<<<<
 *         Mat3.c_transpose(out.ptr, a.ptr)
 * 
 */
  __pyx_tuple__62 = PyTuple_Pack(2, __pyx_n_s_out, __pyx_n_s_a); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);
  __pyx_codeobj__63 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__62, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_math3d_mat3_pyx, __pyx_n_s_transpose, 156, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__63)) __PYX_ERR(0, 156, __pyx_L1_error)

  /* "pyorama/math3d/mat3.pyx":160
 * 
 *     @staticmethod
 *     def translate(Mat3 out, Mat3 a, Vec2 shift):             # <<<<<<<<<<<<<<
 *         Mat3.c_translate(out.ptr, a.ptr, shift.ptr)
 * 
 */
  __pyx_tuple__64 = PyTuple_Pack(3, __pyx_n_s_out, __pyx_n_s_a, __pyx_n_s_shift); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);
  __pyx_codeobj__65 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyorama_math3d_mat3_pyx, __pyx_n_s_translate, 160, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__65)) __PYX_ERR(0, 160, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_tuple__66 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  __pyx_codeobj__67 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__67)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__68 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);
  __pyx_codeobj__69 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__68, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__69)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_7pyorama_6math3d_4mat3_Mat3 = &__pyx_vtable_7pyorama_6math3d_4mat3_Mat3;
  __pyx_vtable_7pyorama_6math3d_4mat3_Mat3.c_add = (void (*)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *))__pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_add;
  __pyx_vtable_7pyorama_6math3d_4mat3_Mat3.c_copy = (void (*)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *))__pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_copy;
  __pyx_vtable_7pyorama_6math3d_4mat3_Mat3.c_det = (float (*)(__pyx_t_7pyorama_6math3d_6common_Mat3C *))__pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_det;
  __pyx_vtable_7pyorama_6math3d_4mat3_Mat3.c_div = (void (*)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *))__pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_div;
  __pyx_vtable_7pyorama_6math3d_4mat3_Mat3.c_dot = (void (*)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *))__pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_dot;
  __pyx_vtable_7pyorama_6math3d_4mat3_Mat3.c_equals = (int (*)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *))__pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_equals;
  __pyx_vtable_7pyorama_6math3d_4mat3_Mat3.c_from_mat4 = (void (*)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *))__pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_mat4;
  __pyx_vtable_7pyorama_6math3d_4mat3_Mat3.c_from_quat = (void (*)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_QuatC *))__pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_quat;
  __pyx_vtable_7pyorama_6math3d_4mat3_Mat3.c_from_rotation = (void (*)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, float))__pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_rotation;
  __pyx_vtable_7pyorama_6math3d_4mat3_Mat3.c_from_scaling = (void (*)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *))__pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_scaling;
  __pyx_vtable_7pyorama_6math3d_4mat3_Mat3.c_from_skewing = (void (*)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *))__pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_skewing;
  __pyx_vtable_7pyorama_6math3d_4mat3_Mat3.c_from_skewing_x = (void (*)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, float))__pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_skewing_x;
  __pyx_vtable_7pyorama_6math3d_4mat3_Mat3.c_from_skewing_y = (void (*)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, float))__pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_skewing_y;
  __pyx_vtable_7pyorama_6math3d_4mat3_Mat3.c_from_translation = (void (*)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *))__pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_from_translation;
  __pyx_vtable_7pyorama_6math3d_4mat3_Mat3.c_identity = (void (*)(__pyx_t_7pyorama_6math3d_6common_Mat3C *))__pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_identity;
  __pyx_vtable_7pyorama_6math3d_4mat3_Mat3.c_inv = (void (*)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *))__pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_inv;
  __pyx_vtable_7pyorama_6math3d_4mat3_Mat3.c_mul = (void (*)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *))__pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_mul;
  __pyx_vtable_7pyorama_6math3d_4mat3_Mat3.c_nearly_equals = (int (*)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, struct __pyx_opt_args_7pyorama_6math3d_4mat3_4Mat3_c_nearly_equals *__pyx_optional_args))__pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_nearly_equals;
  __pyx_vtable_7pyorama_6math3d_4mat3_Mat3.c_normal_from_mat4 = (void (*)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat4C *))__pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_normal_from_mat4;
  __pyx_vtable_7pyorama_6math3d_4mat3_Mat3.c_random = (void (*)(__pyx_t_7pyorama_6math3d_6common_Mat3C *))__pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_random;
  __pyx_vtable_7pyorama_6math3d_4mat3_Mat3.c_rotate = (void (*)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, float))__pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_rotate;
  __pyx_vtable_7pyorama_6math3d_4mat3_Mat3.c_scale = (void (*)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *))__pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_scale;
  __pyx_vtable_7pyorama_6math3d_4mat3_Mat3.c_scale_add = (void (*)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, struct __pyx_opt_args_7pyorama_6math3d_4mat3_4Mat3_c_scale_add *__pyx_optional_args))__pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_scale_add;
  __pyx_vtable_7pyorama_6math3d_4mat3_Mat3.c_set_data = (void (*)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, struct __pyx_opt_args_7pyorama_6math3d_4mat3_4Mat3_c_set_data *__pyx_optional_args))__pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_set_data;
  __pyx_vtable_7pyorama_6math3d_4mat3_Mat3.c_skew = (void (*)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *))__pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_skew;
  __pyx_vtable_7pyorama_6math3d_4mat3_Mat3.c_skew_x = (void (*)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, float))__pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_skew_x;
  __pyx_vtable_7pyorama_6math3d_4mat3_Mat3.c_skew_y = (void (*)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, float))__pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_skew_y;
  __pyx_vtable_7pyorama_6math3d_4mat3_Mat3.c_sub = (void (*)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *))__pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_sub;
  __pyx_vtable_7pyorama_6math3d_4mat3_Mat3.c_transpose = (void (*)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *))__pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_transpose;
  __pyx_vtable_7pyorama_6math3d_4mat3_Mat3.c_translate = (void (*)(__pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Mat3C *, __pyx_t_7pyorama_6math3d_6common_Vec2C *))__pyx_f_7pyorama_6math3d_4mat3_4Mat3_c_translate;
  if (PyType_Ready(&__pyx_type_7pyorama_6math3d_4mat3_Mat3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7pyorama_6math3d_4mat3_Mat3.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7pyorama_6math3d_4mat3_Mat3.tp_dictoffset && __pyx_type_7pyorama_6math3d_4mat3_Mat3.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7pyorama_6math3d_4mat3_Mat3.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7pyorama_6math3d_4mat3_Mat3.tp_dict, __pyx_vtabptr_7pyorama_6math3d_4mat3_Mat3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Mat3, (PyObject *)&__pyx_type_7pyorama_6math3d_4mat3_Mat3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7pyorama_6math3d_4mat3_Mat3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_ptype_7pyorama_6math3d_4mat3_Mat3 = &__pyx_type_7pyorama_6math3d_4mat3_Mat3;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("pyorama.math3d.mat4"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pyorama_6math3d_4mat4_Mat4 = __Pyx_ImportType(__pyx_t_1, "pyorama.math3d.mat4", "Mat4", sizeof(struct __pyx_obj_7pyorama_6math3d_4mat4_Mat4), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyorama_6math3d_4mat4_Mat4) __PYX_ERR(2, 4, __pyx_L1_error)
  __pyx_vtabptr_7pyorama_6math3d_4mat4_Mat4 = (struct __pyx_vtabstruct_7pyorama_6math3d_4mat4_Mat4*)__Pyx_GetVtable(__pyx_ptype_7pyorama_6math3d_4mat4_Mat4->tp_dict); if (unlikely(!__pyx_vtabptr_7pyorama_6math3d_4mat4_Mat4)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pyorama.math3d.quat"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pyorama_6math3d_4quat_Quat = __Pyx_ImportType(__pyx_t_1, "pyorama.math3d.quat", "Quat", sizeof(struct __pyx_obj_7pyorama_6math3d_4quat_Quat), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyorama_6math3d_4quat_Quat) __PYX_ERR(3, 4, __pyx_L1_error)
  __pyx_vtabptr_7pyorama_6math3d_4quat_Quat = (struct __pyx_vtabstruct_7pyorama_6math3d_4quat_Quat*)__Pyx_GetVtable(__pyx_ptype_7pyorama_6math3d_4quat_Quat->tp_dict); if (unlikely(!__pyx_vtabptr_7pyorama_6math3d_4quat_Quat)) __PYX_ERR(3, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pyorama.math3d.vec3"); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pyorama_6math3d_4vec3_Vec3 = __Pyx_ImportType(__pyx_t_1, "pyorama.math3d.vec3", "Vec3", sizeof(struct __pyx_obj_7pyorama_6math3d_4vec3_Vec3), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyorama_6math3d_4vec3_Vec3) __PYX_ERR(4, 6, __pyx_L1_error)
  __pyx_vtabptr_7pyorama_6math3d_4vec3_Vec3 = (struct __pyx_vtabstruct_7pyorama_6math3d_4vec3_Vec3*)__Pyx_GetVtable(__pyx_ptype_7pyorama_6math3d_4vec3_Vec3->tp_dict); if (unlikely(!__pyx_vtabptr_7pyorama_6math3d_4vec3_Vec3)) __PYX_ERR(4, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pyorama.math3d.mat2"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pyorama_6math3d_4mat2_Mat2 = __Pyx_ImportType(__pyx_t_1, "pyorama.math3d.mat2", "Mat2", sizeof(struct __pyx_obj_7pyorama_6math3d_4mat2_Mat2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyorama_6math3d_4mat2_Mat2) __PYX_ERR(5, 5, __pyx_L1_error)
  __pyx_vtabptr_7pyorama_6math3d_4mat2_Mat2 = (struct __pyx_vtabstruct_7pyorama_6math3d_4mat2_Mat2*)__Pyx_GetVtable(__pyx_ptype_7pyorama_6math3d_4mat2_Mat2->tp_dict); if (unlikely(!__pyx_vtabptr_7pyorama_6math3d_4mat2_Mat2)) __PYX_ERR(5, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pyorama.math3d.vec2"); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7pyorama_6math3d_4vec2_Vec2 = __Pyx_ImportType(__pyx_t_1, "pyorama.math3d.vec2", "Vec2", sizeof(struct __pyx_obj_7pyorama_6math3d_4vec2_Vec2), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7pyorama_6math3d_4vec2_Vec2) __PYX_ERR(6, 7, __pyx_L1_error)
  __pyx_vtabptr_7pyorama_6math3d_4vec2_Vec2 = (struct __pyx_vtabstruct_7pyorama_6math3d_4vec2_Vec2*)__Pyx_GetVtable(__pyx_ptype_7pyorama_6math3d_4vec2_Vec2->tp_dict); if (unlikely(!__pyx_vtabptr_7pyorama_6math3d_4vec2_Vec2)) __PYX_ERR(6, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __pyx_t_1 = PyImport_ImportModule("pyorama.math3d.common"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "epsilon", (void **)&__pyx_vp_7pyorama_6math3d_6common_epsilon, "float") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initmat3(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initmat3(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_mat3(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_mat3(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_mat3(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'mat3' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_mat3(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("mat3", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_pyorama__math3d__mat3) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "pyorama.math3d.mat3")) {
      if (unlikely(PyDict_SetItemString(modules, "pyorama.math3d.mat3", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) goto __pyx_L1_error;
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) goto __pyx_L1_error;
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_variable_import_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "pyorama/math3d/mat3.pyx":39
 * 
 *     @staticmethod
 *     def add(Mat3 out, Mat3 a, Mat3 b):             # <<<<<<<<<<<<<<
 *         Mat3.c_add(out.ptr, a.ptr, b.ptr)
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_13add, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Mat3_add, NULL, __pyx_n_s_pyorama_math3d_mat3, __pyx_d, ((PyObject *)__pyx_codeobj__7)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_add, __pyx_t_1) < 0) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":38
 *         self.ptr[0][i] = value
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def add(Mat3 out, Mat3 a, Mat3 b):
 *         Mat3.c_add(out.ptr, a.ptr, b.ptr)
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3, __pyx_n_s_add); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_add, __pyx_t_2) < 0) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":43
 * 
 *     @staticmethod
 *     def copy(Mat3 out, Mat3 a):             # <<<<<<<<<<<<<<
 *         Mat3.c_copy(out.ptr, a.ptr)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_15copy, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Mat3_copy, NULL, __pyx_n_s_pyorama_math3d_mat3, __pyx_d, ((PyObject *)__pyx_codeobj__9)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_copy, __pyx_t_2) < 0) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":42
 *         Mat3.c_add(out.ptr, a.ptr, b.ptr)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def copy(Mat3 out, Mat3 a):
 *         Mat3.c_copy(out.ptr, a.ptr)
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3, __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_copy, __pyx_t_1) < 0) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":47
 * 
 *     @staticmethod
 *     def det(Mat3 a):             # <<<<<<<<<<<<<<
 *         return Mat3.c_det(a.ptr)
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_17det, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Mat3_det, NULL, __pyx_n_s_pyorama_math3d_mat3, __pyx_d, ((PyObject *)__pyx_codeobj__11)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_det, __pyx_t_1) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":46
 *         Mat3.c_copy(out.ptr, a.ptr)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def det(Mat3 a):
 *         return Mat3.c_det(a.ptr)
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3, __pyx_n_s_det); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_det, __pyx_t_2) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":51
 * 
 *     @staticmethod
 *     def div(Mat3 out, Mat3 a, Mat3 b):             # <<<<<<<<<<<<<<
 *         Mat3.c_div(out.ptr, a.ptr, b.ptr)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_19div, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Mat3_div, NULL, __pyx_n_s_pyorama_math3d_mat3, __pyx_d, ((PyObject *)__pyx_codeobj__13)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_div, __pyx_t_2) < 0) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":50
 *         return Mat3.c_det(a.ptr)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def div(Mat3 out, Mat3 a, Mat3 b):
 *         Mat3.c_div(out.ptr, a.ptr, b.ptr)
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3, __pyx_n_s_div); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_div, __pyx_t_1) < 0) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":55
 * 
 *     @staticmethod
 *     def dot(Mat3 out, Mat3 a, Mat3 b):             # <<<<<<<<<<<<<<
 *         Mat3.c_dot(out.ptr, a.ptr, b.ptr)
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_21dot, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Mat3_dot, NULL, __pyx_n_s_pyorama_math3d_mat3, __pyx_d, ((PyObject *)__pyx_codeobj__15)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_dot, __pyx_t_1) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":54
 *         Mat3.c_div(out.ptr, a.ptr, b.ptr)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def dot(Mat3 out, Mat3 a, Mat3 b):
 *         Mat3.c_dot(out.ptr, a.ptr, b.ptr)
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3, __pyx_n_s_dot); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_dot, __pyx_t_2) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":59
 * 
 *     @staticmethod
 *     def equals(Mat3 a, Mat3 b):             # <<<<<<<<<<<<<<
 *         return Mat3.c_equals(a.ptr, b.ptr)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_23equals, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Mat3_equals, NULL, __pyx_n_s_pyorama_math3d_mat3, __pyx_d, ((PyObject *)__pyx_codeobj__17)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_equals, __pyx_t_2) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":58
 *         Mat3.c_dot(out.ptr, a.ptr, b.ptr)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def equals(Mat3 a, Mat3 b):
 *         return Mat3.c_equals(a.ptr, b.ptr)
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3, __pyx_n_s_equals); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_equals, __pyx_t_1) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":63
 * 
 *     @staticmethod
 *     def from_mat4(Mat3 out, Mat4 a):             # <<<<<<<<<<<<<<
 *         Mat3.c_from_mat4(out.ptr, a.ptr)
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_25from_mat4, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Mat3_from_mat4, NULL, __pyx_n_s_pyorama_math3d_mat3, __pyx_d, ((PyObject *)__pyx_codeobj__19)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_from_mat4, __pyx_t_1) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":62
 *         return Mat3.c_equals(a.ptr, b.ptr)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_mat4(Mat3 out, Mat4 a):
 *         Mat3.c_from_mat4(out.ptr, a.ptr)
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3, __pyx_n_s_from_mat4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_from_mat4, __pyx_t_2) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":67
 * 
 *     @staticmethod
 *     def from_quat(Mat3 out, Quat a):             # <<<<<<<<<<<<<<
 *         Mat3.c_from_quat(out.ptr, a.ptr)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_27from_quat, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Mat3_from_quat, NULL, __pyx_n_s_pyorama_math3d_mat3, __pyx_d, ((PyObject *)__pyx_codeobj__21)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_from_quat, __pyx_t_2) < 0) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":66
 *         Mat3.c_from_mat4(out.ptr, a.ptr)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_quat(Mat3 out, Quat a):
 *         Mat3.c_from_quat(out.ptr, a.ptr)
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3, __pyx_n_s_from_quat); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_from_quat, __pyx_t_1) < 0) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":71
 * 
 *     @staticmethod
 *     def from_rotation(Mat3 out, float radians):             # <<<<<<<<<<<<<<
 *         Mat3.c_from_rotation(out.ptr, radians)
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_29from_rotation, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Mat3_from_rotation, NULL, __pyx_n_s_pyorama_math3d_mat3, __pyx_d, ((PyObject *)__pyx_codeobj__23)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_from_rotation, __pyx_t_1) < 0) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":70
 *         Mat3.c_from_quat(out.ptr, a.ptr)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_rotation(Mat3 out, float radians):
 *         Mat3.c_from_rotation(out.ptr, radians)
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3, __pyx_n_s_from_rotation); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_from_rotation, __pyx_t_2) < 0) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":75
 * 
 *     @staticmethod
 *     def from_scaling(Mat3 out, Vec2 scale):             # <<<<<<<<<<<<<<
 *         Mat3.c_from_scaling(out.ptr, scale.ptr)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_31from_scaling, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Mat3_from_scaling, NULL, __pyx_n_s_pyorama_math3d_mat3, __pyx_d, ((PyObject *)__pyx_codeobj__25)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_from_scaling, __pyx_t_2) < 0) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":74
 *         Mat3.c_from_rotation(out.ptr, radians)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_scaling(Mat3 out, Vec2 scale):
 *         Mat3.c_from_scaling(out.ptr, scale.ptr)
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3, __pyx_n_s_from_scaling); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_from_scaling, __pyx_t_1) < 0) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":79
 * 
 *     @staticmethod
 *     def from_skewing(Mat3 out, Vec2 factor):             # <<<<<<<<<<<<<<
 *         Mat3.c_from_skewing(out.ptr, factor.ptr)
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_33from_skewing, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Mat3_from_skewing, NULL, __pyx_n_s_pyorama_math3d_mat3, __pyx_d, ((PyObject *)__pyx_codeobj__27)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_from_skewing, __pyx_t_1) < 0) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":78
 *         Mat3.c_from_scaling(out.ptr, scale.ptr)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_skewing(Mat3 out, Vec2 factor):
 *         Mat3.c_from_skewing(out.ptr, factor.ptr)
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3, __pyx_n_s_from_skewing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_from_skewing, __pyx_t_2) < 0) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":83
 * 
 *     @staticmethod
 *     def from_skewing_x(Mat3 out, float radians):             # <<<<<<<<<<<<<<
 *         Mat3.c_from_skewing_x(out.ptr, radians.ptr)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_35from_skewing_x, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Mat3_from_skewing_x, NULL, __pyx_n_s_pyorama_math3d_mat3, __pyx_d, ((PyObject *)__pyx_codeobj__29)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_from_skewing_x, __pyx_t_2) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":82
 *         Mat3.c_from_skewing(out.ptr, factor.ptr)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_skewing_x(Mat3 out, float radians):
 *         Mat3.c_from_skewing_x(out.ptr, radians.ptr)
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3, __pyx_n_s_from_skewing_x); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_from_skewing_x, __pyx_t_1) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":87
 * 
 *     @staticmethod
 *     def from_skewing_y(Mat3 out, float radians):             # <<<<<<<<<<<<<<
 *         Mat3.c_from_skewing_y(out.ptr, radians.ptr)
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_37from_skewing_y, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Mat3_from_skewing_y, NULL, __pyx_n_s_pyorama_math3d_mat3, __pyx_d, ((PyObject *)__pyx_codeobj__31)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_from_skewing_y, __pyx_t_1) < 0) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":86
 *         Mat3.c_from_skewing_x(out.ptr, radians.ptr)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_skewing_y(Mat3 out, float radians):
 *         Mat3.c_from_skewing_y(out.ptr, radians.ptr)
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3, __pyx_n_s_from_skewing_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_from_skewing_y, __pyx_t_2) < 0) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":91
 * 
 *     @staticmethod
 *     def from_translation(Mat3 out, Vec2 shift):             # <<<<<<<<<<<<<<
 *         Mat3.c_from_translation(out.ptr, shift.ptr)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_39from_translation, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Mat3_from_translation, NULL, __pyx_n_s_pyorama_math3d_mat3, __pyx_d, ((PyObject *)__pyx_codeobj__33)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_from_translation, __pyx_t_2) < 0) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":90
 *         Mat3.c_from_skewing_y(out.ptr, radians.ptr)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_translation(Mat3 out, Vec2 shift):
 *         Mat3.c_from_translation(out.ptr, shift.ptr)
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3, __pyx_n_s_from_translation); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_from_translation, __pyx_t_1) < 0) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":95
 * 
 *     @staticmethod
 *     def identity(Mat3 out):             # <<<<<<<<<<<<<<
 *         Mat3.c_identity(out.ptr)
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_41identity, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Mat3_identity, NULL, __pyx_n_s_pyorama_math3d_mat3, __pyx_d, ((PyObject *)__pyx_codeobj__35)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_identity, __pyx_t_1) < 0) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":94
 *         Mat3.c_from_translation(out.ptr, shift.ptr)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def identity(Mat3 out):
 *         Mat3.c_identity(out.ptr)
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3, __pyx_n_s_identity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_identity, __pyx_t_2) < 0) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":99
 * 
 *     @staticmethod
 *     def inv(Mat3 out, Mat3 a):             # <<<<<<<<<<<<<<
 *         Mat3.c_inv(out.ptr, a.ptr)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_43inv, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Mat3_inv, NULL, __pyx_n_s_pyorama_math3d_mat3, __pyx_d, ((PyObject *)__pyx_codeobj__37)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_inv, __pyx_t_2) < 0) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":98
 *         Mat3.c_identity(out.ptr)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def inv(Mat3 out, Mat3 a):
 *         Mat3.c_inv(out.ptr, a.ptr)
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3, __pyx_n_s_inv); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_inv, __pyx_t_1) < 0) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":103
 * 
 *     @staticmethod
 *     def mul(Mat3 out, Mat3 a, Mat3 b):             # <<<<<<<<<<<<<<
 *         Mat3.c_mul(out.ptr, a.ptr, b.ptr)
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_45mul, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Mat3_mul, NULL, __pyx_n_s_pyorama_math3d_mat3, __pyx_d, ((PyObject *)__pyx_codeobj__39)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_mul, __pyx_t_1) < 0) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":102
 *         Mat3.c_inv(out.ptr, a.ptr)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def mul(Mat3 out, Mat3 a, Mat3 b):
 *         Mat3.c_mul(out.ptr, a.ptr, b.ptr)
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3, __pyx_n_s_mul); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_mul, __pyx_t_2) < 0) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":107
 * 
 *     @staticmethod
 *     def nearly_equals(Mat3 a, Mat3 b, float epsilon=epsilon):             # <<<<<<<<<<<<<<
 *         return Mat3.c_nearly_equals(a.ptr, b.ptr, epsilon)
 * 
 */
  __pyx_k__2 = __pyx_v_7pyorama_6math3d_6common_epsilon;
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_47nearly_equals, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Mat3_nearly_equals, NULL, __pyx_n_s_pyorama_math3d_mat3, __pyx_d, ((PyObject *)__pyx_codeobj__41)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_nearly_equals, __pyx_t_2) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":106
 *         Mat3.c_mul(out.ptr, a.ptr, b.ptr)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def nearly_equals(Mat3 a, Mat3 b, float epsilon=epsilon):
 *         return Mat3.c_nearly_equals(a.ptr, b.ptr, epsilon)
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3, __pyx_n_s_nearly_equals); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_nearly_equals, __pyx_t_1) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":111
 * 
 *     @staticmethod
 *     def normal_from_mat4(Mat3 out, Mat4 a):             # <<<<<<<<<<<<<<
 *         Mat3.c_normal_from_mat4(out.ptr, a.ptr)
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_49normal_from_mat4, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Mat3_normal_from_mat4, NULL, __pyx_n_s_pyorama_math3d_mat3, __pyx_d, ((PyObject *)__pyx_codeobj__43)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_normal_from_mat4, __pyx_t_1) < 0) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":110
 *         return Mat3.c_nearly_equals(a.ptr, b.ptr, epsilon)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def normal_from_mat4(Mat3 out, Mat4 a):
 *         Mat3.c_normal_from_mat4(out.ptr, a.ptr)
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3, __pyx_n_s_normal_from_mat4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_normal_from_mat4, __pyx_t_2) < 0) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":115
 * 
 *     @staticmethod
 *     def random(Mat3 out):             # <<<<<<<<<<<<<<
 *         Mat3.c_random(out.ptr)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_51random, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Mat3_random, NULL, __pyx_n_s_pyorama_math3d_mat3, __pyx_d, ((PyObject *)__pyx_codeobj__45)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_random, __pyx_t_2) < 0) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":114
 *         Mat3.c_normal_from_mat4(out.ptr, a.ptr)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def random(Mat3 out):
 *         Mat3.c_random(out.ptr)
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3, __pyx_n_s_random); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_random, __pyx_t_1) < 0) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":119
 * 
 *     @staticmethod
 *     def rotate(Mat3 out, Mat3 a, float radians):             # <<<<<<<<<<<<<<
 *         Mat3.c_rotate(out.ptr, a.ptr, radians)
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_53rotate, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Mat3_rotate, NULL, __pyx_n_s_pyorama_math3d_mat3, __pyx_d, ((PyObject *)__pyx_codeobj__47)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_rotate, __pyx_t_1) < 0) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":118
 *         Mat3.c_random(out.ptr)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def rotate(Mat3 out, Mat3 a, float radians):
 *         Mat3.c_rotate(out.ptr, a.ptr, radians)
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3, __pyx_n_s_rotate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_rotate, __pyx_t_2) < 0) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":123
 * 
 *     @staticmethod
 *     def scale(Mat3 out, Mat3 a, Vec2 factor):             # <<<<<<<<<<<<<<
 *         Mat3.c_scale(out.ptr, a.ptr, factor.ptr)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_55scale, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Mat3_scale, NULL, __pyx_n_s_pyorama_math3d_mat3, __pyx_d, ((PyObject *)__pyx_codeobj__49)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_scale, __pyx_t_2) < 0) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":122
 *         Mat3.c_rotate(out.ptr, a.ptr, radians)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def scale(Mat3 out, Mat3 a, Vec2 factor):
 *         Mat3.c_scale(out.ptr, a.ptr, factor.ptr)
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3, __pyx_n_s_scale); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_scale, __pyx_t_1) < 0) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":127
 * 
 *     @staticmethod
 *     def scale_add(Mat3 out, Mat3 a, float scale=1.0, float add=0.0):             # <<<<<<<<<<<<<<
 *         Mat3.c_scale_add(out.ptr, a.ptr, scale, add)
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_57scale_add, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Mat3_scale_add, NULL, __pyx_n_s_pyorama_math3d_mat3, __pyx_d, ((PyObject *)__pyx_codeobj__51)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_scale_add, __pyx_t_1) < 0) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":126
 *         Mat3.c_scale(out.ptr, a.ptr, factor.ptr)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def scale_add(Mat3 out, Mat3 a, float scale=1.0, float add=0.0):
 *         Mat3.c_scale_add(out.ptr, a.ptr, scale, add)
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3, __pyx_n_s_scale_add); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_scale_add, __pyx_t_2) < 0) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":131
 * 
 *     @staticmethod
 *     def set_data(Mat3 out, float m00=0.0, float m01=0.0, float m02=0.0,             # <<<<<<<<<<<<<<
 *             float m10=0.0, float m11=0.0, float m12=0.0,
 *             float m20=0.0, float m21=0.0, float m22=0.0):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_59set_data, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Mat3_set_data, NULL, __pyx_n_s_pyorama_math3d_mat3, __pyx_d, ((PyObject *)__pyx_codeobj__53)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_set_data, __pyx_t_2) < 0) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":130
 *         Mat3.c_scale_add(out.ptr, a.ptr, scale, add)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def set_data(Mat3 out, float m00=0.0, float m01=0.0, float m02=0.0,
 *             float m10=0.0, float m11=0.0, float m12=0.0,
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3, __pyx_n_s_set_data); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_set_data, __pyx_t_1) < 0) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":140
 * 
 *     @staticmethod
 *     def skew(Mat3 out, Mat3 a, Vec2 factor):             # <<<<<<<<<<<<<<
 *         Mat3.c_skew(out.ptr, a.ptr, factor.ptr)
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_61skew, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Mat3_skew, NULL, __pyx_n_s_pyorama_math3d_mat3, __pyx_d, ((PyObject *)__pyx_codeobj__55)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_skew, __pyx_t_1) < 0) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":139
 *                 m20, m21, m22)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def skew(Mat3 out, Mat3 a, Vec2 factor):
 *         Mat3.c_skew(out.ptr, a.ptr, factor.ptr)
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3, __pyx_n_s_skew); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_skew, __pyx_t_2) < 0) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":144
 * 
 *     @staticmethod
 *     def skew_x(Mat3 out, Mat3 a, float radians):             # <<<<<<<<<<<<<<
 *         Mat3.c_skew_x(out.ptr, a.ptr, radians)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_63skew_x, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Mat3_skew_x, NULL, __pyx_n_s_pyorama_math3d_mat3, __pyx_d, ((PyObject *)__pyx_codeobj__57)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_skew_x, __pyx_t_2) < 0) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":143
 *         Mat3.c_skew(out.ptr, a.ptr, factor.ptr)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def skew_x(Mat3 out, Mat3 a, float radians):
 *         Mat3.c_skew_x(out.ptr, a.ptr, radians)
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3, __pyx_n_s_skew_x); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_skew_x, __pyx_t_1) < 0) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":148
 * 
 *     @staticmethod
 *     def skew_y(Mat3 out, Mat3 a, float radians):             # <<<<<<<<<<<<<<
 *         Mat3.c_skew_y(out.ptr, a.ptr, radians)
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_65skew_y, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Mat3_skew_y, NULL, __pyx_n_s_pyorama_math3d_mat3, __pyx_d, ((PyObject *)__pyx_codeobj__59)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_skew_y, __pyx_t_1) < 0) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":147
 *         Mat3.c_skew_x(out.ptr, a.ptr, radians)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def skew_y(Mat3 out, Mat3 a, float radians):
 *         Mat3.c_skew_y(out.ptr, a.ptr, radians)
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3, __pyx_n_s_skew_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_skew_y, __pyx_t_2) < 0) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":152
 * 
 *     @staticmethod
 *     def sub(Mat3 out, Mat3 a, Mat3 b):             # <<<<<<<<<<<<<<
 *         Mat3.c_sub(out.ptr, a.ptr, b.ptr)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_67sub, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Mat3_sub, NULL, __pyx_n_s_pyorama_math3d_mat3, __pyx_d, ((PyObject *)__pyx_codeobj__61)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_sub, __pyx_t_2) < 0) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":151
 *         Mat3.c_skew_y(out.ptr, a.ptr, radians)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def sub(Mat3 out, Mat3 a, Mat3 b):
 *         Mat3.c_sub(out.ptr, a.ptr, b.ptr)
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3, __pyx_n_s_sub); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_sub, __pyx_t_1) < 0) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":156
 * 
 *     @staticmethod
 *     def transpose(Mat3 out, Mat3 a):             # <<<<<<<<<<<<<<
 *         Mat3.c_transpose(out.ptr, a.ptr)
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_69transpose, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Mat3_transpose, NULL, __pyx_n_s_pyorama_math3d_mat3, __pyx_d, ((PyObject *)__pyx_codeobj__63)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_transpose, __pyx_t_1) < 0) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":155
 *         Mat3.c_sub(out.ptr, a.ptr, b.ptr)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def transpose(Mat3 out, Mat3 a):
 *         Mat3.c_transpose(out.ptr, a.ptr)
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3, __pyx_n_s_transpose); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_transpose, __pyx_t_2) < 0) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":160
 * 
 *     @staticmethod
 *     def translate(Mat3 out, Mat3 a, Vec2 shift):             # <<<<<<<<<<<<<<
 *         Mat3.c_translate(out.ptr, a.ptr, shift.ptr)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_71translate, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Mat3_translate, NULL, __pyx_n_s_pyorama_math3d_mat3, __pyx_d, ((PyObject *)__pyx_codeobj__65)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_translate, __pyx_t_2) < 0) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":159
 *         Mat3.c_transpose(out.ptr, a.ptr)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def translate(Mat3 out, Mat3 a, Vec2 shift):
 *         Mat3.c_translate(out.ptr, a.ptr, shift.ptr)
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3, __pyx_n_s_translate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7pyorama_6math3d_4mat3_Mat3->tp_dict, __pyx_n_s_translate, __pyx_t_1) < 0) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7pyorama_6math3d_4mat3_Mat3);

  /* "pyorama/math3d/mat3.pyx":372
 * 
 *     @staticmethod
 *     cdef inline bint c_nearly_equals(Mat3C *a, Mat3C *b, float epsilon=epsilon) nogil:             # <<<<<<<<<<<<<<
 *         cdef size_t i = 0
 *         cdef size_t size = 9
 */
  __pyx_k__3 = __pyx_v_7pyorama_6math3d_6common_epsilon;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_73__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Mat3___reduce_cython, NULL, __pyx_n_s_pyorama_math3d_mat3, __pyx_d, ((PyObject *)__pyx_codeobj__67)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_7pyorama_6math3d_4mat3_4Mat3_75__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Mat3___setstate_cython, NULL, __pyx_n_s_pyorama_math3d_mat3, __pyx_d, ((PyObject *)__pyx_codeobj__69)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_1) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyorama/math3d/mat3.pyx":1
 * cdef class Mat3:             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "carray.to_py":124
 * 
 * @cname("__Pyx_carray_to_tuple_float")
 * cdef inline tuple __Pyx_carray_to_tuple_float(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init pyorama.math3d.mat3", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pyorama.math3d.mat3");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* GetNameInClass */
static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    PyObject *result;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) ((size_t) 0 - (size_t) 1), const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* VoidPtrImport */
#ifndef __PYX_HAVE_RT_ImportVoidPtr
#define __PYX_HAVE_RT_ImportVoidPtr
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, name);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C variable %.200s",
                PyModule_GetName(module), name);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    *p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, desc);
        goto bad;
    }
    *p = PyCObject_AsVoidPtr(cobj);}
#endif
    if (!(*p))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
